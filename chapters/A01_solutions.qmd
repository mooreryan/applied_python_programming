---
author: "Ryan M. Moore, PhD"
date-modified: last-modified
date: "2025-03-24"
jupyter: python3
---

# Appendix 1: Solutions {.unnumbered}

## Chapter 6: Errors & Exceptions

### Stop & Think

@tip-06-name-error:  When Python tries to evaluate the name `gene` and doesn't find it in any scope, it raises a `NameError`, which matches the exception type specified in the except clause.  This causes a message with the error details to be printed to the console.

@tip-06-file-not-exist: `FileNotFoundError`

@tip-06-handle-na: We could check if the expression value is "na" before trying to convert it, or use a try/except block to catch the ValueError and set a default value (like `None`, `1`, `0`, or `NaN`).

@tip-06-exception-chaining: When analyzing sequencing datasets, one error might trigger others in a cascade. For example, a file reading error might lead to missing data, which then causes calculation errors. This chain makes it harder to find the root cause of the error.

@tip-06-file-read-errors: Specific exceptions might include: `FileNotFoundError`, `PermissionError`, `IsADirectoryError`. All of these could be caught by `OSError`, which is the parent class for file-related errors.

@tip-06-finally-clause: The `finally` clause is useful when working with resources that need to be released regardless of success or failure, such as closing file handles or database connections.

@tip-06-custom-exceptions: Possible custom exceptions: `InvalidSequenceError`, `AlignmentFailedError`, `LowCoverageError`, `DifferentialExpressionError`, etc.

### Practice Problems

#### Solution @sec-problem-6.1

```python
   try:
       value = float("abc")
   except ValueError:
       print("Not a valid number")
```

#### Solution @sec-problem-6.2

```python
counts = {"A": 1, "C": 2, "G": 0, "T": 4}
total = sum(counts.values())

try:
    n_ratio = counts["N"] / total 
except KeyError:
    print("N is not present in the counts dictionary")
    n_ratio = None
```

#### Solution @sec-problem-6.3

```python 
try:
    silly_divide(5, 0)
except ZeroDivisionError:
    print("you can't divide by zero!")
except Exception as error:
    print(f"a mysterious error occurred: {error=}")
```

#### Solution @sec-problem-6.4

```python 
def fold_change(expression_1, expression_2)
    try:
        return expression_1 / expression_2
    except ZeroDivisionError:
        print("expression_2 was zero!")
        return None
```

#### Solution @sec-problem-6.5

```python 
class SequenceLengthError(Exception):
    pass

MIN_LENGTH = 50
MAX_LENGTH = 150 

def validate_sequence_length(sequence):
    sequence_length = len(sequence)

    if sequence_length < MIN_LENGTH:
        raise SequenceLengthError(f"sequence length {sequence_length} was too short!")

    if sequence_length > MAX_LENGTH:
        raise SequenceLengthError(f"sequence length {sequence_length} was too long!")
    
    return None
```

#### Solution @sec-problem-6.6

```python 
def run_simulation(max_turns):
    if max_turns < 1:
        raise ValueError(f"Expected at least 1 iteration, but got {max_turns=}")
    
    if max_turns > 1000:
        raise ValueError(f"Expected at most 1000 iterations, but got {max_turns=}")
    
    # Simulation code would follow
    pass
```