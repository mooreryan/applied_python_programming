{
  "hash": "a68e604a2324ba26e2c64b3a7fd1057c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: \"Ryan M. Moore, PhD\"\ndate-modified: last-modified\ndate: \"2025-05-27\"\njupyter: python3\n---\n\n# Collections: Practice Problem Solutions {#sec-collections-practice-problem-solutions}\n\n## Solution to [Problem @sec-creating-accessing-lists]\n\n::: {#c4fb0c36 .cell execution_count=1}\n``` {.python .cell-code}\ngene_names = [\"TP53\", \"BRCA1\", \"MDM2\"]\nprint(gene_names[0])\nprint(gene_names[1])\nprint(gene_names[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTP53\nBRCA1\nMDM2\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-slicing-lists]\n\n::: {#72b7b5c9 .cell execution_count=2}\n``` {.python .cell-code}\nbases = [\"A\", \"T\", \"G\", \"C\", \"G\", \"C\"]\n\nfirst_three = bases[:3]\nlast_two = bases[-2:]\n\nprint(first_three)\nprint(last_two)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['A', 'T', 'G']\n['G', 'C']\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-using-list-methods-append-remove]\n\n::: {#f5529a12 .cell execution_count=3}\n``` {.python .cell-code}\ngenes = [\"TP53\", \"BRCA1\"]\n\ngenes.append(\"ATM\")\ngenes.remove(\"BRCA1\")\n\nprint(genes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['TP53', 'ATM']\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-creating-tuples]\n\n::: {#5e8a209c .cell execution_count=4}\n``` {.python .cell-code}\ngene_location = (2_345_678, 2_346_987)\nprint(gene_location)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2345678, 2346987)\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-dictionary-creation-value-lookup]\n\n::: {#5bdde01b .cell execution_count=5}\n``` {.python .cell-code}\ngene_functions = {\"TP53\": \"tumor suppression\", \"BRCA1\": \"DNA repair\"}\nprint(gene_functions[\"TP53\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntumor suppression\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-using-dictionary-get-method]\n\n::: {#542780d2 .cell execution_count=6}\n``` {.python .cell-code}\ngene_functions = {\"TP53\": \"tumor suppression\", \"BRCA1\": \"DNA repair\"}\n\nresult = gene_functions.get(\"MDM2\", \"Unknown\")\n\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnknown\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-looping-through-list]\n\n::: {#07b73586 .cell execution_count=7}\n``` {.python .cell-code}\nexpression = [2.3, 3.1, 1.9]\n\nfor value in expression:\n    print(value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.3\n3.1\n1.9\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-counting-items-with-loop]\n\n::: {#ca27f75a .cell execution_count=8}\n``` {.python .cell-code}\nsequence = \"AAGCTTAA\"\ncount = 0\n\nfor base in sequence:\n    if base == \"A\":\n        count += 1\n\nprint(count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-filtering-list-with-for-loop]\n\n::: {#f66725f1 .cell execution_count=9}\n``` {.python .cell-code}\ngenes = [\"TP53\", \"BRCA1\", \"MDM2\", \"ATM\"]\ngenes_with_A = []\n\nfor gene in genes:\n    if \"A\" in gene:\n        genes_with_A.append(gene)\n\nprint(genes_with_A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['BRCA1', 'ATM']\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-using-in-operator]\n\n::: {#bed6a054 .cell execution_count=10}\n``` {.python .cell-code}\ngenes = [\"TP53\", \"BRCA1\", \"MDM2\"]\n\nif \"BRCA1\" in genes:\n    print(\"Found\")\nelse:\n    print(\"Not found\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-nested-lists-indexing]\n\n::: {#cbe6adf0 .cell execution_count=11}\n``` {.python .cell-code}\nsamples = [\n    [\"Sample1\", [1.1, 1.2, 1.3]],\n    [\"Sample2\", [2.1, 2.2, 2.3]],\n    [\"Sample3\", [3.1, 3.2, 3.3]],\n]\n\nprint(samples[2][1][0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.1\n```\n:::\n:::\n\n\n### Optional Extension\n\nHere is one way that you could nested `for` loops with enumerate to print the values and their indices:\n\n::: {#622072f1 .cell execution_count=12}\n``` {.python .cell-code}\nfor sample_index, sample_data in enumerate(samples):\n    sample_name, observations = sample_data\n    for observation_index, observation in enumerate(observations):\n        print(f\"{sample_index}: {sample_name}; {observation_index}: {observation}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0: Sample1; 0: 1.1\n0: Sample1; 1: 1.2\n0: Sample1; 2: 1.3\n1: Sample2; 0: 2.1\n1: Sample2; 1: 2.2\n1: Sample2; 2: 2.3\n2: Sample3; 0: 3.1\n2: Sample3; 1: 3.2\n2: Sample3; 2: 3.3\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-building-dict-from-two-lists]\n\n::: {#a34a5226 .cell execution_count=13}\n``` {.python .cell-code}\ngene_ids = [\"nrdA\", \"nrdJ\", \"nrdD\"]\nproducts = [\"Class I RNR\", \"Class II RNR\", \"Class III RNR\"]\n\ngene_products = {}\n\nfor gene_id, product in zip(gene_ids, products):\n    gene_products[gene_id] = product\n\nprint(gene_products)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'nrdA': 'Class I RNR', 'nrdJ': 'Class II RNR', 'nrdD': 'Class III RNR'}\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-list-comprehension-sequence-conversion]\n\n::: {#a144cbb6 .cell execution_count=14}\n``` {.python .cell-code}\ndna = \"ATGCTTAC\"\n\nrna = [\"U\" if base == \"T\" else base for base in dna]\n\nprint(rna)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['A', 'U', 'G', 'C', 'U', 'U', 'A', 'C']\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-counting-with-defaultdict]\n\n::: {#730153a4 .cell execution_count=15}\n``` {.python .cell-code}\nfrom collections import defaultdict\n\nsequence = \"AAGCGAAGCT\"\ncounts = defaultdict(int)\n\nfor base in sequence:\n    counts[base] += 1\n\nfor base, count in counts.items():\n    print(f\"{base} => {count}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA => 4\nG => 3\nC => 2\nT => 1\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-nested-dict-access]\n\n::: {#9d9ff554 .cell execution_count=16}\n``` {.python .cell-code}\ngene_info = {\n    \"nrdA\": {\"product\": \"Class I RNR\", \"location\": {\"start\": 1023, \"end\": 3268}}\n}\n\nstart = gene_info[\"nrdA\"][\"location\"][\"start\"]\nend = gene_info[\"nrdA\"][\"location\"][\"end\"]\n\nprint(f\"{start=}\")\nprint(f\"{end=}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstart=1023\nend=3268\n```\n:::\n:::\n\n\n### Optional Extension\n\nLet's add another gene to the dictionary and loop through it.\n\n::: {#8d268cbe .cell execution_count=17}\n``` {.python .cell-code}\ngene_info[\"new_gene\"] = {\n    \"product\": \"Some Protein\",\n    \"location\": {\"start\": 5000, \"end\": 8000},\n}\n\nfor gene_id, gene_data in gene_info.items():\n    start = gene_data[\"location\"][\"start\"]\n    end = gene_data[\"location\"][\"end\"]\n\n    print(f\"Gene={gene_id}; {start=}; {end=}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGene=nrdA; start=1023; end=3268\nGene=new_gene; start=5000; end=8000\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-reverse-complement-dna-sequence]\n\n::: {#28eba9ee .cell execution_count=18}\n``` {.python .cell-code}\ncomplement = {\"A\": \"T\", \"T\": \"A\", \"G\": \"C\", \"C\": \"G\"}\n\nsequence = \"AAAACCCGGT\"\nrev_comp = \"\"\n\nfor base in reversed(sequence):\n    rev_comp += complement[base]\n\nprint(rev_comp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nACCGGGTTTT\n```\n:::\n:::\n\n\n## Solution to [Problem @sec-simulating-random-growth-list]\n\n::: {#17776b46 .cell execution_count=19}\n``` {.python .cell-code}\nBACTERIA_COUNT = 10\nbacteria = [5] * BACTERIA_COUNT\n\nfor turn in range(10):\n    print(f\"Turn {turn}: {bacteria}\")\n\n    # Check if this is an even turn\n    is_even_turn = turn % 2 == 0\n\n    for i in range(BACTERIA_COUNT):\n        # Check if this bacteria is at an even index\n        is_even_index = i % 2 == 0\n\n        # Even turns: even-indexed bacteria grow\n        if is_even_turn and is_even_index:\n            bacteria[i] += 1\n        # Odd turns: odd-indexed bacteria shrink\n        elif not is_even_turn and not is_even_index:\n            bacteria[i] -= 1\n\nprint(f\"At the end: {bacteria}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTurn 0: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\nTurn 1: [6, 5, 6, 5, 6, 5, 6, 5, 6, 5]\nTurn 2: [6, 4, 6, 4, 6, 4, 6, 4, 6, 4]\nTurn 3: [7, 4, 7, 4, 7, 4, 7, 4, 7, 4]\nTurn 4: [7, 3, 7, 3, 7, 3, 7, 3, 7, 3]\nTurn 5: [8, 3, 8, 3, 8, 3, 8, 3, 8, 3]\nTurn 6: [8, 2, 8, 2, 8, 2, 8, 2, 8, 2]\nTurn 7: [9, 2, 9, 2, 9, 2, 9, 2, 9, 2]\nTurn 8: [9, 1, 9, 1, 9, 1, 9, 1, 9, 1]\nTurn 9: [10, 1, 10, 1, 10, 1, 10, 1, 10, 1]\nAt the end: [10, 0, 10, 0, 10, 0, 10, 0, 10, 0]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}