{
  "hash": "cf32f99853e28fd9e81566e85ad169f1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: \"Ryan M. Moore, PhD\"\ndate-modified: last-modified\ndate: \"2025-05-27\"\njupyter: python3\n---\n\n# Collections: Practice Problems {#sec-collections-practice-problems}\n\nThese are the practice problems for @sec-collections.  For solutions, see @sec-collections-practice-problem-solutions.\n\n## Creating and Accessing Lists {#sec-creating-accessing-lists}\n\n### Task Description\n\nCreate a list called `gene_names` containing the strings `\"TP53\"`, `\"BRCA1\"`, and `\"MDM2\"`. Then, print out each gene name by accessing its items one at a time using their indices.\n\n### Learning Objectives\n\n- Create a list with multiple items\n- Access list elements by index\n- Print list elements\n\n#### Solution\n\n::: {#4d4074b9 .cell execution_count=1}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#6a21ae31 .cell execution_count=2}\n``` {.python .cell-code}\n# Should print:\n# TP53\n# BRCA1\n# MDM2\n```\n:::\n\n\n### Common Issues\n\n- Forgetting to use square brackets for list creation or indexing\n- Starting index at 1 instead of 0\n\n### Optional Extensions\n\n- Use a for loop to print all gene names\n\n\n## Slicing Lists {#sec-slicing-lists}\n\n### Task Description\n\nGiven the list `bases = [\"A\", \"T\", \"G\", \"C\", \"A\", \"T\"]`, use slicing to create:\n- `first_three`, the first three items,\n- `last_two`, the last two items.\n\nPrint both variables.\n\n### Learning Objectives\n\n- Use list slicing to extract parts of a list\n\n#### Solution\n\n::: {#d9e53f03 .cell execution_count=3}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#fe7c6d74 .cell execution_count=4}\n``` {.python .cell-code}\n# Output:\n# ['A', 'T', 'G']\n# ['G', 'C']\n```\n:::\n\n\n### Common Issues\n\n- Off-by-one errors in slicing\n- Misusing negative indices\n\n### Optional Extensions\n\n- Print the middle two items of the list\n- Practice getting different sized slices from the end of the collection\n\n## Using List Methods: `append` and `remove` {#sec-using-list-methods-append-remove}\n\n### Task Description\n\nStart with `genes = [\"TP53\", \"BRCA1\"]`. Add `\"ATM\"` to the end of the list, then remove `\"BRCA1\"`. Print the resulting list.\n\n### Learning Objectives\n\n- Modify lists by adding and removing items\n- Use `append()` and `remove()` list methods\n\n#### Solution\n\n::: {#2811f039 .cell execution_count=5}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#7322ad14 .cell execution_count=6}\n``` {.python .cell-code}\n# Output:\n# ['TP53', 'ATM']\n```\n:::\n\n\n### Common Issues\n\n- Trying to remove an item not present in the list\n- Using list methods as built-in functions (e.g., `append(numbers, 3)` rather than `numbers.append(3)`)\n\n### Optional Extensions\n\n- Add another gene at the start using `insert()`\n\n## Creating a Tuple {#sec-creating-tuples}\n\n### Task Description\n\nStore the chromosome location for a gene, which starts at position `2_345_678` and ends at `2_346_987`, as a tuple. Print the tuple.\n\n### Learning Objectives\n\n- Create and print a tuple to store related information\n\n#### Solution\n\n::: {#1c96360c .cell execution_count=7}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#a857db79 .cell execution_count=8}\n``` {.python .cell-code}\n# Output:\n# (2345678, 2346987)\n```\n:::\n\n\n### Common Issues\n\n- Using brackets instead of parentheses\n\n### Optional Extensions\n\n- Print the start and end positions separately by indexing the tuple\n- Try to reassign (change) the first element of the tuple to another value. What happens?\n\n## Dictionary Creation and Value Lookup {#sec-dictionary-creation-value-lookup}\n\n### Task Description\n\nCreate a dictionary named `gene_functions` mapping the gene `\"TP53\"` to `\"tumor suppression\"` and `\"BRCA1\"` to `\"DNA repair\"`. Then, use the dictionary to print the function of `\"TP53\"`.\n\n### Learning Objectives\n\n- Create dictionaries with key-value pairs\n- Access dictionary values using keys\n\n#### Solution\n\n::: {#0dfe7a83 .cell execution_count=9}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#0e11c659 .cell execution_count=10}\n``` {.python .cell-code}\n# Output:\n# tumor suppression\n```\n:::\n\n\n### Common Issues\n\n- Using parentheses or square brackets instead of curly brackets for dictionary literals\n- Misspelling keys\n\n### Optional Extensions\n\n- Try to print the value for a gene that doesn't exist. What happens?\n\n## Using Dictionary `get` Method {#sec-using-dictionary-get-method}\n\n### Task Description\n\nUse the `gene_functions` dictionary from the previous task. Retrieve the function for `\"MDM2\"` safely using the `get` method, with a default value of `\"Unknown\"`. Print the result.\n\n### Learning Objectives\n\n- Use the `get()` method to safely access dictionary values\n\n#### Solution\n\n::: {#ff899294 .cell execution_count=11}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#9cf8f7f3 .cell execution_count=12}\n``` {.python .cell-code}\n# Output:\n# Unknown\n```\n:::\n\n\n### Common Issues\n\n- Not exactly an \"issue\" _per se_, but, forgetting the default value for `get`, leading to `None`\n- Confusing square bracket dictionary access and the `get()` method\n\n### Optional Extensions\n\n- Add `\"MDM2\": \"p53 regulation\"` to the dictionary, then use `get` again\n\n## Looping Through a List {#sec-looping-through-list}\n\n### Task Description\n\nGiven `expression = [2.3, 3.1, 1.9]`, write a for loop that prints each value in the list.\n\n### Learning Objectives\n\n- Use a for loop to iterate over a list\n\n#### Solution\n\n::: {#2d3634aa .cell execution_count=13}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#9796d4ac .cell execution_count=14}\n``` {.python .cell-code}\n# Output:\n# 2.3\n# 3.1\n# 1.9\n```\n:::\n\n\n### Common Issues\n\n- Forgetting indentation within the loop block\n- Using the wrong variable name inside the loop\n\n### Optional Extensions\n\n- Print the index and value together using `enumerate()`\n\n## Counting Items with a Loop {#sec-counting-items-with-loop}\n\n### Task Description\n\nGiven the string `sequence = \"AAGCTTAA\"`, count how many times `\"A\"` appears by looping through the string and incrementing a counter variable. Print the count.\n\n### Learning Objectives\n\n- Use a loop and a counter to count characters\n\n#### Solution\n\n::: {#158a4358 .cell execution_count=15}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#ec80d7b9 .cell execution_count=16}\n``` {.python .cell-code}\n# Output:\n# 4\n```\n:::\n\n\n### Common Issues\n\n- Counting every base rather than only the adenines\n- Using `base = \"A\"` instead of `base == \"A\"`\n\n### Optional Extensions\n\n- Use the string method `count()` to check your answer\n\n## Filtering a List with a For Loop {#sec-filtering-list-with-for-loop}\n\n### Task Description\n\nGiven a list `genes = [\"TP53\", \"BRCA1\", \"MDM2\", \"ATM\"]`, create a new list named `genes_with_A` containing only gene names that include the letter `'A'`. Print this filtered list.\n\n### Learning Objectives\n\n- Use a for loop with a conditional to filter and build a new list\n\n#### Solution\n\n::: {#01e82c83 .cell execution_count=17}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#7311b144 .cell execution_count=18}\n``` {.python .cell-code}\n# Output:\n# ['BRCA1', 'ATM']\n```\n:::\n\n\n### Common Issues\n\n- Forgetting to initialize the new list before the loop\n- Appending all items, not just those with 'A'\n\n### Optional Extensions\n\n- Solve the same task using a list comprehension\n\n## Using the `in` Operator {#sec-using-in-operator}\n\n### Task Description\n\nGiven a list of gene names `genes = [\"TP53\", \"BRCA1\", \"MDM2\"]`, check if `\"BRCA1\"` is present in the list, and print `\"Found\"` if it is, or `\"Not found\"` otherwise.\n\n### Learning Objectives\n\n- Use the `in` operator to test list membership\n\n#### Solution\n\n::: {#5095b5e5 .cell execution_count=19}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#6ed38891 .cell execution_count=20}\n``` {.python .cell-code}\n# Output:\n# Found\n```\n:::\n\n\n### Common Issues\n\n- Checking the wrong value or casing\n\n### Optional Extensions\n\n- Prompt the user to enter a gene name and check if it's in the list\n\n## Nested Lists and Indexing {#sec-nested-lists-indexing}\n\n### Task Description\n\nGiven the nested list:\n\n```python\nsamples = [\n    [\"Sample1\", [1.1, 1.2, 1.3]],\n    [\"Sample2\", [2.1, 2.2, 2.3]],\n    [\"Sample3\", [3.1, 3.2, 3.3]],\n]\n```\n\nPrint the value `3.1` by correctly indexing into `samples`.\n\n### Learning Objectives\n\n- Index into nested lists\n\n#### Solution\n\n::: {#d1cb6194 .cell execution_count=21}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#62e8af40 .cell execution_count=22}\n``` {.python .cell-code}\n# Output:\n# 3.1\n```\n:::\n\n\n### Common Issues\n\n- Mixing up list indices\n- Using the 1-based indexing rather than 0-based indexing (especially if you're used to the R programming language)\n\n### Optional Extensions\n\n- Print all values for \"Sample2\"\n- Use nested `for` loops with enumerate to print values with their indices\n\n## Building a Dictionary from Two Lists {#sec-building-dict-from-two-lists}\n\n### Task Description\n\nYou are given:\n\n```python\ngene_ids = [\"nrdA\",  \"nrdJ\", \"nrdD\"]\nproducts = [\"Class I RNR\", \"Class II RNR\", \"Class III RNR\"]\n```\n\nBuild a dictionary mapping each gene id to its product using `zip()` and a `for` loop. Print the resulting dictionary.\n\n### Learning Objectives\n\n- Loop through multiple lists\n- Build a dictionary programmatically\n\n#### Solution\n\n::: {#d5f73299 .cell execution_count=23}\n``` {.python .cell-code}\ngene_ids = [\"nrdA\",  \"nrdJ\", \"nrdD\"]\nproducts = [\"Class I RNR\", \"Class II RNR\", \"Class III RNR\"]\n\ngene_products = {}\nfor i in range(len(gene_ids)):\n    gene_products[gene_ids[i]] = products[i]\n\nprint(gene_products)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'nrdA': 'Class I RNR', 'nrdJ': 'Class II RNR', 'nrdD': 'Class III RNR'}\n```\n:::\n:::\n\n\n### Test Cases\n\n::: {#ab2f7378 .cell execution_count=24}\n``` {.python .cell-code}\n# Output:\n# {'nrdA': 'Class I RNR', 'nrdJ': 'Class II RNR', 'nrdD': 'Class III RNR'}\n```\n:::\n\n\n### Common Issues\n\n- Mixing up the order of items in the `zip`\n- Mixing up which list provides keys and which provides values\n- In more complicated problems, overwriting existing dictionary keys\n- Potential problems when zipping lists with different lengths\n\n### Optional Extensions\n\n- Use a `for` loop, but without using the `zip()` function to get key-value pairs\n- Use `zip()`, but don't use a `for` loop to build the dictionary\n\n## List Comprehension for Sequence Conversion {#sec-list-comprehension-sequence-conversion}\n\n### Task Description\n\nGiven `dna = \"ATGCTTAC\"`, use a list comprehension to generate a list of its RNA bases (replace every `\"T\"` with `\"U\"`, others stay the same). Print the resulting list.\n\n### Learning Objectives\n\n- Use list comprehensions for transformation\n- Apply conditional logic inside a comprehension\n\n#### Solution\n\n::: {#7e81c1e2 .cell execution_count=25}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#988898de .cell execution_count=26}\n``` {.python .cell-code}\n# Output:\n# ['A', 'U', 'G', 'C', 'U', 'U', 'A', 'C']\n```\n:::\n\n\n### Common Issues\n\n- Using `if base = \"T\"` instead of `==`\n- Not understanding the position/order of `if` and `else` in the comprehension\n\n### Optional Extensions\n\n- Join the resulting list into a string using `join()`\n\n## Medium: Counting with `defaultdict` {#sec-counting-with-defaultdict}\n\n### Task Description\n\nGiven a DNA string `sequence = \"AAGCGAAGCT\"`, use `defaultdict` from the `collections` module to count the occurrences of each base. Print the counts for each base.\n\n### Learning Objectives\n\n- Import and use `defaultdict`\n- Count frequencies programmatically\n\n#### Solution\n\n::: {#bdacd3bc .cell execution_count=27}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#cf8f9f0b .cell execution_count=28}\n``` {.python .cell-code}\n# Something like:\n# A => 4\n# G => 3\n# C => 2\n# T => 1\n```\n:::\n\n\n### Common Issues\n\n- Forgetting to import `defaultdict`\n- Not using `counts[base] += 1` properly\n\n### Optional Extensions\n\n- Try using a regular dictionary rather than a `defaultdict`\n- Try using a `Counter` instead of a `defaultdict`\n\n## Nested Dictionaries and Access {#sec-nested-dict-access}\n\n### Task Description\n\nGiven the nested dictionary:\n\n```python\ngene_info = {\n    \"nrdA\": {\"product\": \"Class I RNR\", \"location\": {\"start\": 1023, \"end\": 3268}}\n}\n```\n\nPrint the start and end position of `\"nrdA\"` by accessing nested keys.\n\n### Learning Objectives\n\n- Access values in nested dictionaries\n\n#### Solution\n\n::: {#8d0c1d14 .cell execution_count=29}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#6798954c .cell execution_count=30}\n``` {.python .cell-code}\n# Output:\n# start=1023\n# end=3268\n```\n:::\n\n\n### Common Issues\n\n- Misplacing or omitting square brackets\n- Wrong ordering of keys\n\n### Optional Extensions\n\n- Try to print a value for a key that does not exist and observe the error\n- Add another gene to the dictionary, and loop through start positions for all genes\n\n## Reverse Complement DNA Sequence {#sec-reverse-complement-dna-sequence}\n\n### Task Description\n\nWrite code that, given a DNA sequence string (e.g., `\"AAAACCCGGT\"`), prints its reverse complement as a string. (A <-> T, C <-> G). Use a dictionary for base pairing and a loop.\n\n### Learning Objectives\n\n- Use dictionaries for mapping\n- Loop through a string in reverse\n- Concatenate strings to build a new sequence\n\n#### Solution\n\n::: {#71608f5d .cell execution_count=31}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#3ff14573 .cell execution_count=32}\n``` {.python .cell-code}\n# Input: AAAACCCGGT\n# Output: ACCGGGTTTT\n\n# Input: \"AGTC\"\n# Output: \"GACT\"\n```\n:::\n\n\n### Common Issues\n\n- Incorrect complement dictionary\n- Forgetting to reverse the DNA sequence\n- In more realistic problems, improper handling of ambiguous bases (see [IUPAC conventions](https://arep.med.harvard.edu/labgc/adnan/projects/Utilities/revcomp.html))\n\n### Optional Extensions\n\n- Write your solution using a list comprehension and the `join()` method\n- Don't use a dictionary to store base complement info\n\n## Simulating Random Growth in a List {#sec-simulating-random-growth-list}\n\n### Task Description\n\nSimulate a population of 10 bacteria, each with starting size 5. On each turn, every bacterium will grow or shrink according to these rules:\n\n- On even numbered turns (0, 2, 4, ...), bacteria with even indices grow by 1 unit, and the other bacteria stay the same\n- On odd numbered turns (1, 3, 5, ...), bacteria with even indices stay the same, and the other bacteria shrink by 1\n\nRun the simulation for 10 turns, starting with turn `0`. At the start of each turn, print the bacteria list. Finally, when the simulation is over, print the final bacteria list.\n\n### Learning Objectives\n\n- Practice with nested loops\n- Update values in a list\n- Check conditions for breaking loops\n\n#### Solution\n\n::: {#7ea610c5 .cell execution_count=33}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n::: {#c0922eee .cell execution_count=34}\n``` {.python .cell-code}\n# Output:\n# Turn 0: [5, 5, 5, ...]\n# Turn 1: [...]\n# ...\n# Turn 9: [...]\n# At the end: [...]\n```\n:::\n\n\n### Common Issues\n\n- 0-based indexing issues or forgetting 0 counts as even\n- Mixing up conditional logic\n- Forgetting how the modulo operator (`%`) works\n- Printing results at the wrong time in the loop (e.g., at the end rather than the start)\n\n### Optional Extensions\n\n- Track and print the average population size at the end of each turn\n- Change the rules to use the [random](https://docs.python.org/3/library/random.html) module to make a more interesting simulation\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}