{
  "hash": "24b9ed5d47efb96dd853560fed2cb594",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: \"Ryan M. Moore, PhD\"\ndate-modified: last-modified\ndate: \"2025-03-24\"\njupyter: python3\n---\n\n\n\n\n# Appendix 1: Solutions {.unnumbered}\n\n## Chapter 6: Errors & Exceptions\n\n### Stop & Think\n\n@tip-06-name-error: When Python tries to evaluate the name `gene` and doesn't find it in any scope, it raises a `NameError`, which matches the exception type specified in the except clause. This causes a message with the error details to be printed to the console.\n\n@tip-06-file-not-exist: `FileNotFoundError`\n\n@tip-06-handle-na: We could check if the expression value is \"na\" before trying to convert it, or use a try/except block to catch the ValueError and set a default value (like `None`, `1`, `0`, or `NaN`).\n\n@tip-06-exception-chaining: When analyzing sequencing datasets, one error might trigger others in a cascade. For example, a file reading error might lead to missing data, which then causes calculation errors. This chain makes it harder to find the root cause of the error.\n\n@tip-06-file-read-errors: Specific exceptions might include: `FileNotFoundError`, `PermissionError`, `IsADirectoryError`. All of these could be caught by `OSError`, which is the parent class for file-related errors.\n\n@tip-06-finally-clause: The `finally` clause is useful when working with resources that need to be released regardless of success or failure, such as closing file handles or database connections.\n\n@tip-06-custom-exceptions: Possible custom exceptions: `InvalidSequenceError`, `AlignmentFailedError`, `LowCoverageError`, `DifferentialExpressionError`, etc.\n\n### Practice Problems\n\n#### Solution @sec-problem-6.1\n\n```python\ntry:\n    value = float(\"abc\")\nexcept ValueError:\n    print(\"Not a valid number\")\n```\n\n#### Solution @sec-problem-6.2\n\n```python\ncounts = {\"A\": 1, \"C\": 2, \"G\": 0, \"T\": 4}\ntotal = sum(counts.values())\n\ntry:\n    n_ratio = counts[\"N\"] / total\nexcept KeyError:\n    print(\"N is not present in the counts dictionary\")\n    n_ratio = None\n```\n\n#### Solution @sec-problem-6.3\n\n```python\ntry:\n    silly_divide(5, 0)\nexcept ZeroDivisionError:\n    print(\"you can't divide by zero!\")\nexcept Exception as error:\n    print(f\"a mysterious error occurred: {error=}\")\n```\n\n#### Solution @sec-problem-6.4\n\n```python\ndef fold_change(expression_1, expression_2)\n    try:\n        return expression_1 / expression_2\n    except ZeroDivisionError:\n        print(\"expression_2 was zero!\")\n        return None\n```\n\n#### Solution @sec-problem-6.5\n\n```python\nclass SequenceLengthError(Exception):\n    pass\n\nMIN_LENGTH = 50\nMAX_LENGTH = 150\n\ndef validate_sequence_length(sequence):\n    sequence_length = len(sequence)\n\n    if sequence_length < MIN_LENGTH:\n        raise SequenceLengthError(f\"sequence length {sequence_length} was too short!\")\n\n    if sequence_length > MAX_LENGTH:\n        raise SequenceLengthError(f\"sequence length {sequence_length} was too long!\")\n\n    return None\n```\n\n#### Solution @sec-problem-6.6\n\n```python\ndef run_simulation(max_turns):\n    if max_turns < 1:\n        raise ValueError(f\"Expected at least 1 iteration, but got {max_turns=}\")\n\n    if max_turns > 1000:\n        raise ValueError(f\"Expected at most 1000 iterations, but got {max_turns=}\")\n\n    # Simulation code would follow\n    pass\n```\n\n## Chapter 7: Intro to Exploratory Data Analysis with Python\n\n### Stop & Think\n\n@tip-07-why-summarize-data response:  Looking at a summary of your data has a ton of benefits.  Summarizing your data can help you:\n\n- Identify data import issues, like importing the wrong file\n- Identify data quality issues, like missing values or outliers\n- Become familiar with the data, including data types and ranges\n\nThe more familiar you are with your data, the better!\n\n@tip-07-why-nice-plots response: Clean visualizations aren’t just important for presenting data to others, they are also important for presenting data to yourself!  A messy graph may hide trends, overload the viewer, or be otherwise difficult to interpret, potentially leading to misinterpretations or missed patterns.  Professional-looking visualizations can also be shared with colleagues through presentations and reports with minimal modifications, freeing up time later.  Lastly, it’s never bad to get in the habit of producing clear and effective visualizations of your data!\n\n@tip-07-good-color-palette response: Choosing a good color palette is critical for communicating information about your data.  Improper color choice can easily lead to misinterpretations.  In the heatmap example, we use a diverging color scheme to show the difference between positive and negative correlations, but the balance of those colors must be correct:\n\n- If the center of the palette was on 0.2 rather than zero, it would visually suggest that values around 0.2 are \"neutral\" or \"average,” rather than “positive”\n- With asymmetric color intensity (brightest blue at -0.2, brightest orange at 1.0), it would create visual bias, making positive correlations appear weaker than negative ones of the same magnitude\n\nIn both cases, viewers would easily be thrown off by the color scheme, even with a legend available.\n\n@tip-07-why-filter-columns response: Filtering columns by category can help manage cognitive load and distraction when working with large datasets, allowing you to focus on particular variables. It can make it easier to identify patterns, facilitate more targeted analysis, and help build intuition about how different aspects of the data relate to each other.\n\n@tip-07-what-correlation-tells-us response: Correlation values can show potential relationships between variables and suggest further avenues for investigation. However, they have limitations: they only measure linear relationships, can be heavily influenced by outliers, and don't indicate causation. They should be considered as starting points for deeper analysis rather than conclusive findings.\n\n@tip-07-log-scale-purpose response: While we are most used to linear scales, logarithmic scales are useful in many situations:\n\n⁃ When data spans several orders of magnitude, log scales lett you visualize both small and large values effectively on the same plot\n⁃ When data follows exponential growth patterns, like in the early stages of an [epidemic](https://data.europa.eu/apps/data-visualisation-guide/logarithmic-y-axes)\n⁃ When looking for proportional or percentage changes rather than count changes, like in the case of this [library example](https://www.lrs.org/2020/06/17/visualizing-data-the-logarithmic-scale/)\n\nIn fact, visualizing data on a logarithmic scale can sometimes reveal trends that are not apparent from count data, as in [this example using cancer data](https://www.pa.gov/content/dam/copapwp-pagov/en/health/documents/topics/healthstatistics/statistical-resources/understandinghealthstats/documents/Arithmetic_vs_Logarithmic_Line_Charts.pdf).\n\nLogarithmic transformations also have some nifty statistical applications, like [reducing skew in data](https://pmc.ncbi.nlm.nih.gov/articles/PMC9036143/).\n\n@tip-07-why-correlation-heatmap response: Heatmaps add an extra visual layer that is not present in tables (color), making strong correlations visually obvious.  Clustering reveals groups of variables that behave similarly, and the dendrograms show how those variables are related to each other.  Together, these components make patterns easier to spot than a table alone and add hierarchical structure that can’t be easily represented in a data table.\n\n@tip-07-merge-considerations response: When merging datasets, it’s important to consider:\n\n1. Whether incomplete data is acceptable or problematic.  If problematic, choose an inner join.\n2. If either dataset is primary to your analysis.  If no, choose an outer join.  If yes, choose a left or right join according to the dataset.\n\nAlong the way, consider how representative the resulting dataset will be and whether you will be able to use it effectively for any planned analyses or visualizations.\n\n### Practice Problems\n\n#### Solution @sec-problem-7.1\n\n```python\ndf = pd.DataFrame(state_cancer_data)\n```\n\n#### Solution @sec-problem-7.2\n\n```python\ndf[\"Cancer Deaths Per 100k\"] = df[\"Cancer Deaths\"] / df[\"Population\"] * 100_000\n```\n\n#### Solution @sec-problem-7.3\n\n```python\ndf.query(\"`Cancer Deaths Per 100k` >= 180 and `Median Household Income` < 68_500\")\n```\n\n#### Solution @sec-problem-7.4\n\n```python\ndf.plot(kind=\"scatter\", x=\"Median Household Income\", y=\"Cancer Deaths Per 100k\")\n```\n\n#### Solution @sec-problem-7.5\n\n```python\ndf.plot(kind=\"scatter\", x=\"Percent Aged 65+\", y=\"Cancer Deaths Per 100k\")\n```\n\n## Chapter 8: Intro to Statistics & Modeling with Python\n\n### Stop and Think\n\n@tip-08-pvalue-misconceptions: Relying solely on p-values can lead to overinterpreting small, biologically meaningless differences as important simply because they're statistically significant, especially with large sample sizes.\n\n@tip-08-parametric-vs-nonparametric: You might choose a nonparametric test like Mann-Whitney when your data doesn't follow a normal distribution or when you have small sample sizes and can't verify distributional assumptions.\n\n@tip-08-which-anova: This is definitely a personal preference type of questions! But I kind of like the 2nd option. It's a bit \"fancy\" but it's nice because it only uses data contained in the data frame itself and doesn't require going through the keys in the `REGIONS` map.\n\n@tip-08-statistical-vs-biological: A result can be statistically significant but have such a small effect size that it's biologically meaningless, or a result can have a large biological effect but fail to reach statistical significance due to small sample size.\n\n@tip-08-effect-size-examples: In drug studies, a medication might show a statistically significant reduction in some biomarker (p < 0.05), but the actual change might be so small (tiny effect size) that it doesn't translate to any meaningful clinical improvement for patients.\n\n@tip-08-post-hoc-interpretation: Regions whose confidence intervals don't overlap have significantly different cancer death rates. From the plot, it appears the West has significantly lower death rates than several other regions, particularly the Southeast.\n\n@tip-08-regression-interpretation: An R-squared value close to zero indicates that the linear model explains almost none of the variation in the dependent variable, suggesting there's no linear relationship between the predictor and response variables.\n\n@tip-08-feature-selection: You can determine important predictors by examining their coefficients and p-values in the summary output. Predictors with larger absolute coefficient values and p-values < 0.05 (like X1 and X2 in our example) are more important to the model.\n\n@tip-08-pca-interpretation: Although we didn’t go over the biplot, it can be a useful tool for interpreting the principal components. That said, you can still examine the loadings returned by the PCA model to understand how each feature relates to PC 1 (the x-axis). Specifically, you can compute the angle each loading vector makes with the x-axis. Features with small angles (or angles close to 180°) align closely with PC 1. For example, you could use something like `result.loadings.apply(lambda row: np.arctan2(row[1], row[0]) * 180 / np.pi, axis=1)` to calculate these angles. In this dataset, petal length and petal width are most strongly associated with PC 1.\n\n@tip-08-clustering-challenges: One potential explanation that k-means performed less well for _virginica_ is because it overlaps more with _versicolor_ in the feature space, while _setosa_ is more distinct. This suggests _virginica_ and _versicolor_ share more similar morphological characteristics.\n\n### Practice Problems\n\nThe solutions use the following imports:\n\n::: {#aad6edf2 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport scipy.cluster as cluster\nimport scipy.stats as stats\nimport seaborn as sns\nimport statsmodels.formula.api\n```\n:::\n\n\n#### Solution @sec-problem-8.1\n\n::: {#ab03bb5d .cell execution_count=2}\n``` {.python .cell-code}\nnp.random.seed(2503478)\ngroup_A = stats.norm(loc=10, scale=2).rvs(30)\ngroup_B = stats.norm(loc=15, scale=2).rvs(30)\nresult = stats.ttest_ind(group_A, group_B)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTtestResult(statistic=np.float64(-8.473531241332175), pvalue=np.float64(9.899983754486164e-12), df=np.float64(58.0))\n```\n:::\n:::\n\n\n#### Solution @sec-problem-8.2\n\n::: {#c90b04eb .cell execution_count=3}\n``` {.python .cell-code}\nnp.random.seed(493567)\ngroup_A = stats.norm(loc=10, scale=2).rvs(30)\ngroup_B = stats.norm(loc=15, scale=2).rvs(30)\ngroup_C = stats.norm(loc=11, scale=2).rvs(30)\nresult = stats.f_oneway(group_A, group_B, group_C)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nF_onewayResult(statistic=np.float64(56.614548038664914), pvalue=np.float64(1.7891834179400852e-16))\n```\n:::\n:::\n\n\n#### Solution @sec-problem-8.3\n\n::: {#6c26fe91 .cell execution_count=4}\n``` {.python .cell-code}\nresult = stats.tukey_hsd(group_A, group_B, group_C)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTukey's HSD Pairwise Group Comparisons (95.0% Confidence Interval)\nComparison  Statistic  p-value  Lower CI  Upper CI\n (0 - 1)     -4.656     0.000    -5.787    -3.525\n (0 - 2)     -0.643     0.369    -1.774     0.488\n (1 - 0)      4.656     0.000     3.525     5.787\n (1 - 2)      4.013     0.000     2.882     5.144\n (2 - 0)      0.643     0.369    -0.488     1.774\n (2 - 1)     -4.013     0.000    -5.144    -2.882\n\n```\n:::\n:::\n\n\n#### Solution @sec-problem-8.4\n\n::: {#e49a8c85 .cell execution_count=5}\n``` {.python .cell-code}\nnp.random.seed(932847)\nx1 = np.random.uniform(-10, 10, 50)\nx2 = np.random.uniform(-10, 10, 50)\ny = 3 * x1 + np.random.normal(0, 2, 50)\ndf = pd.DataFrame({\"X1\": x1, \"X2\": x2, \"Y\": y})\nmodel = statsmodels.formula.api.ols(\"Y ~ X1 + X2\", data=df).fit()\nprint(model.summary().tables[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     -0.4118      0.295     -1.395      0.170      -1.006       0.182\nX1             3.0064      0.046     65.950      0.000       2.915       3.098\nX2            -0.0319      0.053     -0.606      0.547      -0.138       0.074\n==============================================================================\n```\n:::\n:::\n\n\n#### Solution @sec-problem-8.5\n\nTwo clusters mainly separate _setosa_ from _versicolor_ and _virginica_, which makes biological sense given that _setosa_ is the most distinct species.\n\n::: {#3197962e .cell execution_count=6}\n``` {.python .cell-code}\niris = pd.read_csv(\"../_data/iris.csv\")\nsns.pairplot(iris, hue=\"Species\")\n_centroids, labels = cluster.vq.kmeans2(iris.drop(columns=\"Species\"), k=2)\nsns.pairplot(iris.assign(Cluster=labels), hue=\"Cluster\")\n```\n\n::: {.cell-output .cell-output-display}\n![](A01_solutions_files/figure-html/cell-7-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](A01_solutions_files/figure-html/cell-7-output-2.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "A01_solutions_files"
    ],
    "filters": [],
    "includes": {}
  }
}