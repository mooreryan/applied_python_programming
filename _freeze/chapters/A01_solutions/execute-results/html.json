{
  "hash": "fda3e74c1cca3d3226bbf0728e91207c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: \"Ryan M. Moore, PhD\"\ndate-modified: last-modified\ndate: \"2025-03-24\"\njupyter: python3\n---\n\n\n\n\n# Appendix 1: Solutions {.unnumbered}\n\n## Chapter 6: Errors & Exceptions\n\n### Stop & Think\n\n@tip-06-name-error:  When Python tries to evaluate the name `gene` and doesn't find it in any scope, it raises a `NameError`, which matches the exception type specified in the except clause.  This causes a message with the error details to be printed to the console.\n\n@tip-06-file-not-exist: `FileNotFoundError`\n\n@tip-06-handle-na: We could check if the expression value is \"na\" before trying to convert it, or use a try/except block to catch the ValueError and set a default value (like `None`, `1`, `0`, or `NaN`).\n\n@tip-06-exception-chaining: When analyzing sequencing datasets, one error might trigger others in a cascade. For example, a file reading error might lead to missing data, which then causes calculation errors. This chain makes it harder to find the root cause of the error.\n\n@tip-06-file-read-errors: Specific exceptions might include: `FileNotFoundError`, `PermissionError`, `IsADirectoryError`. All of these could be caught by `OSError`, which is the parent class for file-related errors.\n\n@tip-06-finally-clause: The `finally` clause is useful when working with resources that need to be released regardless of success or failure, such as closing file handles or database connections.\n\n@tip-06-custom-exceptions: Possible custom exceptions: `InvalidSequenceError`, `AlignmentFailedError`, `LowCoverageError`, `DifferentialExpressionError`, etc.\n\n### Practice Problems\n\n#### Solution @sec-problem-6.1\n\n```python\n   try:\n       value = float(\"abc\")\n   except ValueError:\n       print(\"Not a valid number\")\n```\n\n#### Solution @sec-problem-6.2\n\n```python\ncounts = {\"A\": 1, \"C\": 2, \"G\": 0, \"T\": 4}\ntotal = sum(counts.values())\n\ntry:\n    n_ratio = counts[\"N\"] / total \nexcept KeyError:\n    print(\"N is not present in the counts dictionary\")\n    n_ratio = None\n```\n\n#### Solution @sec-problem-6.3\n\n```python \ntry:\n    silly_divide(5, 0)\nexcept ZeroDivisionError:\n    print(\"you can't divide by zero!\")\nexcept Exception as error:\n    print(f\"a mysterious error occurred: {error=}\")\n```\n\n#### Solution @sec-problem-6.4\n\n```python \ndef fold_change(expression_1, expression_2)\n    try:\n        return expression_1 / expression_2\n    except ZeroDivisionError:\n        print(\"expression_2 was zero!\")\n        return None\n```\n\n#### Solution @sec-problem-6.5\n\n```python \nclass SequenceLengthError(Exception):\n    pass\n\nMIN_LENGTH = 50\nMAX_LENGTH = 150 \n\ndef validate_sequence_length(sequence):\n    sequence_length = len(sequence)\n\n    if sequence_length < MIN_LENGTH:\n        raise SequenceLengthError(f\"sequence length {sequence_length} was too short!\")\n\n    if sequence_length > MAX_LENGTH:\n        raise SequenceLengthError(f\"sequence length {sequence_length} was too long!\")\n    \n    return None\n```\n\n#### Solution @sec-problem-6.6\n\n```python \ndef run_simulation(max_turns):\n    if max_turns < 1:\n        raise ValueError(f\"Expected at least 1 iteration, but got {max_turns=}\")\n    \n    if max_turns > 1000:\n        raise ValueError(f\"Expected at most 1000 iterations, but got {max_turns=}\")\n    \n    # Simulation code would follow\n    pass\n```\n\n",
    "supporting": [
      "A01_solutions_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}