{
  "hash": "3a337d458aa234b0adb0f16b7ab2fdf6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: \"Ryan M. Moore, PhD\"\ndate-modified: last-modified\ndate: \"2025-04-01\"\njupyter: python3\n---\n\n\n\n\n# Intro to Exploratory Data Analysis with Python {#sec-eda}\n\nIn this tutorial, we will learn the basics of exploratory data analysis in Python using Pandas (and just a tiny bit of seaborn).\n\n## Introduction\n\nExploratory Data Analysis, or EDA for short, is the process of building an understanding of your data. Before jumping into complex statistical analyses or building predictive models, EDA helps you understand what your data actually contains. It's about visually and statistically summarizing your dataset, identifying patterns, spotting anomalies, and generating hypotheses.\n\nEDA is a critical step in discovery-based research (sometimes known as foundational or exploratory research). As biologists, you will be familiar with hypothesis-driven research, whereby you start with the answer (the hypothesis), and try to work back to either prove or disprove it using the scientific method. Discovery-based research fits in even before hypothesis-driven research can begin, and is especially useful in cases where we know so little about the topic or system in question that we can't craft useful hypotheses. One of its main goals is to build understanding of complex systems and generate hypotheses that can be tested in the more classical style of hypothesis-driven research, and EDA is a critical step in this process.\n\nWhile EDA is often closely connected with discovery-based research, it is important to note that it is also a critical aspect of hypothesis-driven processes as well. For example, EDA can be a powerful tool for data quality control and assumption checking. It's important to identify missing values, outliers, or other bad data that could compromise your analysis. Further, many statistical methods have assumptions about your data (like normality or constant variance of errors). EDA helps you verify if these assumptions are reasonable. Without proper exploration of your data, you might miss critical insights or, worse, draw incorrect conclusions from your analyses.\n\nEDA has a role in helping you to build an intuition for your problem domain and your data. Regularly engaging with EDA will help you get a \"feel\" for your data and better understand its strengths and limitations. This intuition is critical for effective communication of your findings and for productive discussion of your data and problem domain with collaborators and stakeholders, or in publications.\n\n### Important Python libraries for doing EDA\n\nPython has a strong set of libraries for exploratory data analysis (EDA). Here are some of the more common ones:\n\n- [Pandas](https://pandas.pydata.org/): Essential for working with tabular data, offering powerful DataFrame operations.\n- [NumPy](https://numpy.org/): Provides fast array operations, forming the backbone of numerical computing in Python.\n- [SciPy](https://scipy.org/): Useful for advanced statistical analysis and scientific computing.\n- Statsmodels: Extends on the statistical models provided by SciPy and provides and alternative interface.\n- [Matplotlib](https://matplotlib.org/): A versatile library for creating static, animated, and interactive plots.\n- [Seaborn](https://seaborn.pydata.org/): Simplifies statistical visualization with built-in themes and functions.\n- [Jupyter](https://jupyter.org/) and [Quarto](https://quarto.org/): Computational notebooks\n\nThere are many more, but you will see these popping up again and again.\n\n### Why We're Using Pandas\n\nWe're using Pandas in this tutorial because:\n\n- Works well with tabular data: Most biological data is structured like a spreadsheet or database table, and Pandas is built for handling this format.\n- Widely used: It's a common tool in both academia and industry.\n- Relatively easy to use: Pandas provides a straightforward way to explore and manipulate data.\n- Has useful built-ins: Filtering, grouping, summarizing, and plotting data often take just a few lines of code.\n- Plays well with others: Pandas integrates smoothly with visualization and statistical tools.\n- Uses similar concepts to R's [tidyverse](https://www.tidyverse.org/), which many of you have experience with from your previous coursework\n\nWe'll also use a bit of seaborn for visualization, as it can help with certain types of plots or when data is in a certain format.\n\n### Practical Examples\n\nIn this tutorial, we'll learn exploratory data analysis (EDA) by working through real research questions with real datasets. Instead of covering every Pandas function upfront, we'll introduce tools as we need them.\n\nWe'll use datasets from the CORGIS collection, which offers accessible real-world data. Our examples include:\n\n- State Demographics: Analyzing population patterns and economic indicators across the U.S.\n- Cancer Statistics: Examining cancer rates and their potential links to demographics.\n- Vaccination Impact: Exploring historical disease data to see how vaccines have shaped public health.\n\nThese examples will help you learn Pandas in context, and use techniques that are similar to those you could use when getting started with a real research project.\n\n### Key Pandas Functionality\n\nAfter working through the examples, we'll summarize the essential Pandas operations, including:\n\n- Loading and examining data\n- Selecting, filtering, and sorting\n- Grouping and aggregating\n- Basic visualization\n- Merging and joining datasets\n\nBy focusing on core functions, you'll gain practical skills without getting lost in the details. Let's dive in!\n\n## Import Needed Libraries\n\nThe first thing we need to do is to import some libraries. We are only using numpy for a couple things in this tutorial: specifying data types the `NaN` value.\n\n::: {#eb9394cc .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\npd.options.mode.copy_on_write = \"warn\"\n\npd.set_option(\"display.max_rows\", 10)\n```\n:::\n\n\n_Note: While we don't need to import it, you will also need to have SciPy installed to run the clustered heatmaps._\n\n## State Demographics Data\n\nTo start, we are going to look at the state demographics data from [The Collection of Really Great, Interesting, Situated Datasets (CORGIS)](https://corgis-edu.github.io/corgis/). CORGIS is a collection of datasets that have been cleaned and otherwise made ready for teaching/learning purposes. It was created in part by [Dr. Cory Bart](https://www.cis.udel.edu/people/faculty/austin-cory-bart/), who is a professor at UD.\n\nThis [state demographics data](https://corgis-edu.github.io/corgis/csv/state_demographics/) includes a lot of info about states that we will be able to use to try and explain some of the cancer trends that we see in the next section. To give you an idea of the kinds of data we'll be working with, here are some of the data categories:\n\n- Population\n- Age\n- Ethnicities\n- Housing\n- Income\n- Employment\n\n### Importing Data\n\nThe first thing we need to do is import the data. To do that, we can use the [read_csv()](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html) function:\n\n::: {#1a6297dd .cell execution_count=2}\n``` {.python .cell-code}\nstate_demographics = pd.read_csv(\"../_data/state_demographics.csv\")\n```\n:::\n\n\n### Data Overview\n\nAfter importing data, it's always a good idea to check out its basic info, things like shape, column names, basic summary statistics, etc.\n\nTo get the number of rows and columns in a data frame, we use [shape()][https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.shape.html]:\n\n::: {#31b2f51f .cell execution_count=3}\n``` {.python .cell-code}\nstate_demographics.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(51, 48)\n```\n:::\n:::\n\n\nThat's not too much data, so let's look at the table directly. We will use the [head()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head) function to take only the first few rows:\n\n::: {#3d8aad5a .cell execution_count=4}\n``` {.python .cell-code}\nstate_demographics.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>State</th>\n      <th>Population.Population Percent Change</th>\n      <th>Population.2014 Population</th>\n      <th>Population.2010 Population</th>\n      <th>Age.Percent Under 5 Years</th>\n      <th>Age.Percent Under 18 Years</th>\n      <th>Age.Percent 65 and Older</th>\n      <th>Miscellaneous.Percent Female</th>\n      <th>Ethnicities.White Alone</th>\n      <th>Ethnicities.Black Alone</th>\n      <th>...</th>\n      <th>Employment.Nonemployer Establishments</th>\n      <th>Employment.Firms.Total</th>\n      <th>Employment.Firms.Men-Owned</th>\n      <th>Employment.Firms.Women-Owned</th>\n      <th>Employment.Firms.Minority-Owned</th>\n      <th>Employment.Firms.Nonminority-Owned</th>\n      <th>Employment.Firms.Veteran-Owned</th>\n      <th>Employment.Firms.Nonveteran-Owned</th>\n      <th>Population.Population per Square Mile</th>\n      <th>Miscellaneous.Land Area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Connecticut</td>\n      <td>-10.2</td>\n      <td>3605944</td>\n      <td>3574097</td>\n      <td>5.1</td>\n      <td>20.4</td>\n      <td>17.7</td>\n      <td>51.2</td>\n      <td>79.7</td>\n      <td>12.2</td>\n      <td>...</td>\n      <td>286874</td>\n      <td>326693</td>\n      <td>187845</td>\n      <td>106678</td>\n      <td>56113</td>\n      <td>259614</td>\n      <td>31056</td>\n      <td>281182</td>\n      <td>738.1</td>\n      <td>4842.36</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Delaware</td>\n      <td>8.4</td>\n      <td>989948</td>\n      <td>897934</td>\n      <td>5.6</td>\n      <td>20.9</td>\n      <td>19.4</td>\n      <td>51.7</td>\n      <td>69.2</td>\n      <td>23.2</td>\n      <td>...</td>\n      <td>68623</td>\n      <td>73418</td>\n      <td>38328</td>\n      <td>23964</td>\n      <td>14440</td>\n      <td>54782</td>\n      <td>7206</td>\n      <td>60318</td>\n      <td>460.8</td>\n      <td>1948.54</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>District of Columbia</td>\n      <td>17.3</td>\n      <td>689545</td>\n      <td>601723</td>\n      <td>6.4</td>\n      <td>18.2</td>\n      <td>12.4</td>\n      <td>52.6</td>\n      <td>46.0</td>\n      <td>46.0</td>\n      <td>...</td>\n      <td>62583</td>\n      <td>63408</td>\n      <td>30237</td>\n      <td>27064</td>\n      <td>29983</td>\n      <td>29521</td>\n      <td>5070</td>\n      <td>54217</td>\n      <td>9856.5</td>\n      <td>61.05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Florida</td>\n      <td>14.2</td>\n      <td>21538187</td>\n      <td>18801310</td>\n      <td>5.3</td>\n      <td>19.7</td>\n      <td>20.9</td>\n      <td>51.1</td>\n      <td>77.3</td>\n      <td>16.9</td>\n      <td>...</td>\n      <td>2388050</td>\n      <td>2100187</td>\n      <td>1084885</td>\n      <td>807817</td>\n      <td>926112</td>\n      <td>1121749</td>\n      <td>185756</td>\n      <td>1846686</td>\n      <td>350.6</td>\n      <td>53624.76</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Georgia</td>\n      <td>9.6</td>\n      <td>10711908</td>\n      <td>9687653</td>\n      <td>6.2</td>\n      <td>23.6</td>\n      <td>14.3</td>\n      <td>51.4</td>\n      <td>60.2</td>\n      <td>32.6</td>\n      <td>...</td>\n      <td>955621</td>\n      <td>929864</td>\n      <td>480578</td>\n      <td>376506</td>\n      <td>371588</td>\n      <td>538893</td>\n      <td>96787</td>\n      <td>800585</td>\n      <td>168.4</td>\n      <td>57513.49</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 48 columns</p>\n</div>\n```\n:::\n:::\n\n\nTo get summary statistics of the numeric rows of a data frame, we use [describe()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe). This can help you to get an overall sense of your data.\n\n::: {#399db9e5 .cell execution_count=5}\n``` {.python .cell-code}\nstate_demographics.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Population.Population Percent Change</th>\n      <th>Population.2014 Population</th>\n      <th>Population.2010 Population</th>\n      <th>Age.Percent Under 5 Years</th>\n      <th>Age.Percent Under 18 Years</th>\n      <th>Age.Percent 65 and Older</th>\n      <th>Miscellaneous.Percent Female</th>\n      <th>Ethnicities.White Alone</th>\n      <th>Ethnicities.Black Alone</th>\n      <th>Ethnicities.American Indian and Alaska Native Alone</th>\n      <th>...</th>\n      <th>Employment.Nonemployer Establishments</th>\n      <th>Employment.Firms.Total</th>\n      <th>Employment.Firms.Men-Owned</th>\n      <th>Employment.Firms.Women-Owned</th>\n      <th>Employment.Firms.Minority-Owned</th>\n      <th>Employment.Firms.Nonminority-Owned</th>\n      <th>Employment.Firms.Veteran-Owned</th>\n      <th>Employment.Firms.Nonveteran-Owned</th>\n      <th>Population.Population per Square Mile</th>\n      <th>Miscellaneous.Land Area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>51.000000</td>\n      <td>5.100000e+01</td>\n      <td>5.100000e+01</td>\n      <td>51.000000</td>\n      <td>51.000000</td>\n      <td>51.000000</td>\n      <td>51.000000</td>\n      <td>51.000000</td>\n      <td>51.000000</td>\n      <td>51.000000</td>\n      <td>...</td>\n      <td>5.100000e+01</td>\n      <td>5.100000e+01</td>\n      <td>5.100000e+01</td>\n      <td>5.100000e+01</td>\n      <td>5.100000e+01</td>\n      <td>5.100000e+01</td>\n      <td>51.000000</td>\n      <td>5.100000e+01</td>\n      <td>51.000000</td>\n      <td>51.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.147059</td>\n      <td>6.499006e+06</td>\n      <td>6.053834e+06</td>\n      <td>5.958824</td>\n      <td>22.139216</td>\n      <td>16.878431</td>\n      <td>50.598039</td>\n      <td>78.068627</td>\n      <td>11.872549</td>\n      <td>2.005882</td>\n      <td>...</td>\n      <td>5.193242e+05</td>\n      <td>5.452549e+05</td>\n      <td>2.923801e+05</td>\n      <td>1.938421e+05</td>\n      <td>1.560321e+05</td>\n      <td>3.737521e+05</td>\n      <td>49611.882353</td>\n      <td>4.733260e+05</td>\n      <td>384.403922</td>\n      <td>69253.047843</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6.870760</td>\n      <td>7.408023e+06</td>\n      <td>6.823984e+06</td>\n      <td>0.607018</td>\n      <td>1.996805</td>\n      <td>2.008812</td>\n      <td>0.836777</td>\n      <td>13.024907</td>\n      <td>10.704057</td>\n      <td>3.105441</td>\n      <td>...</td>\n      <td>6.688605e+05</td>\n      <td>6.614342e+05</td>\n      <td>3.524479e+05</td>\n      <td>2.468993e+05</td>\n      <td>2.992485e+05</td>\n      <td>3.615840e+05</td>\n      <td>51941.581563</td>\n      <td>5.892086e+05</td>\n      <td>1377.354603</td>\n      <td>85526.076023</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-13.300000</td>\n      <td>5.768510e+05</td>\n      <td>5.636260e+05</td>\n      <td>4.700000</td>\n      <td>18.200000</td>\n      <td>11.400000</td>\n      <td>47.900000</td>\n      <td>25.500000</td>\n      <td>0.600000</td>\n      <td>0.300000</td>\n      <td>...</td>\n      <td>5.304200e+04</td>\n      <td>6.242700e+04</td>\n      <td>3.003900e+04</td>\n      <td>1.934400e+04</td>\n      <td>2.354000e+03</td>\n      <td>2.952100e+04</td>\n      <td>5070.000000</td>\n      <td>5.135300e+04</td>\n      <td>1.200000</td>\n      <td>61.050000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.950000</td>\n      <td>1.816411e+06</td>\n      <td>1.696962e+06</td>\n      <td>5.700000</td>\n      <td>21.050000</td>\n      <td>16.100000</td>\n      <td>50.200000</td>\n      <td>71.250000</td>\n      <td>3.650000</td>\n      <td>0.500000</td>\n      <td>...</td>\n      <td>1.216330e+05</td>\n      <td>1.431060e+05</td>\n      <td>7.392400e+04</td>\n      <td>4.478700e+04</td>\n      <td>1.472200e+04</td>\n      <td>1.261350e+05</td>\n      <td>14892.500000</td>\n      <td>1.200765e+05</td>\n      <td>45.800000</td>\n      <td>33334.515000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.100000</td>\n      <td>4.505836e+06</td>\n      <td>4.339367e+06</td>\n      <td>6.000000</td>\n      <td>22.100000</td>\n      <td>16.900000</td>\n      <td>50.700000</td>\n      <td>80.600000</td>\n      <td>8.500000</td>\n      <td>0.700000</td>\n      <td>...</td>\n      <td>3.026530e+05</td>\n      <td>3.393050e+05</td>\n      <td>1.878450e+05</td>\n      <td>1.230150e+05</td>\n      <td>6.125200e+04</td>\n      <td>2.762690e+05</td>\n      <td>36273.000000</td>\n      <td>2.887900e+05</td>\n      <td>101.200000</td>\n      <td>53624.760000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>9.800000</td>\n      <td>7.428392e+06</td>\n      <td>6.636084e+06</td>\n      <td>6.200000</td>\n      <td>23.250000</td>\n      <td>17.850000</td>\n      <td>51.200000</td>\n      <td>86.900000</td>\n      <td>16.300000</td>\n      <td>1.600000</td>\n      <td>...</td>\n      <td>5.568705e+05</td>\n      <td>5.790585e+05</td>\n      <td>3.276305e+05</td>\n      <td>2.041645e+05</td>\n      <td>1.288060e+05</td>\n      <td>4.462370e+05</td>\n      <td>58167.500000</td>\n      <td>4.975955e+05</td>\n      <td>221.450000</td>\n      <td>80692.730000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>17.300000</td>\n      <td>3.953822e+07</td>\n      <td>3.725396e+07</td>\n      <td>7.700000</td>\n      <td>29.000000</td>\n      <td>21.200000</td>\n      <td>52.600000</td>\n      <td>94.400000</td>\n      <td>46.000000</td>\n      <td>15.600000</td>\n      <td>...</td>\n      <td>3.453769e+06</td>\n      <td>3.548449e+06</td>\n      <td>1.852580e+06</td>\n      <td>1.320085e+06</td>\n      <td>1.619857e+06</td>\n      <td>1.819107e+06</td>\n      <td>252377.000000</td>\n      <td>3.176341e+06</td>\n      <td>9856.500000</td>\n      <td>570640.950000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 47 columns</p>\n</div>\n```\n:::\n:::\n\n\nDo you notice how the values in the table have a lot of precision, and are all using scientific notation? Sometimes this is what we want, but we really don't need all that here, and it's only serving to clutter up the view. We can control the precision of the numbers in the table using the `.style.format()` pattern. Since we have some large numbers in there, let's add a thousands place separator as well.\n\n::: {#73c8a4d7 .cell execution_count=6}\n``` {.python .cell-code}\nstate_demographics.describe().style.format(\n    # Set precision of numbers to 2 decimal places\n    precision=2,\n    # Use a comma to separate out the thousands in the big numbers\n    thousands=\",\",\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_8f580\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_8f580_level0_col0\" class=\"col_heading level0 col0\" >Population.Population Percent Change</th>\n      <th id=\"T_8f580_level0_col1\" class=\"col_heading level0 col1\" >Population.2014 Population</th>\n      <th id=\"T_8f580_level0_col2\" class=\"col_heading level0 col2\" >Population.2010 Population</th>\n      <th id=\"T_8f580_level0_col3\" class=\"col_heading level0 col3\" >Age.Percent Under 5 Years</th>\n      <th id=\"T_8f580_level0_col4\" class=\"col_heading level0 col4\" >Age.Percent Under 18 Years</th>\n      <th id=\"T_8f580_level0_col5\" class=\"col_heading level0 col5\" >Age.Percent 65 and Older</th>\n      <th id=\"T_8f580_level0_col6\" class=\"col_heading level0 col6\" >Miscellaneous.Percent Female</th>\n      <th id=\"T_8f580_level0_col7\" class=\"col_heading level0 col7\" >Ethnicities.White Alone</th>\n      <th id=\"T_8f580_level0_col8\" class=\"col_heading level0 col8\" >Ethnicities.Black Alone</th>\n      <th id=\"T_8f580_level0_col9\" class=\"col_heading level0 col9\" >Ethnicities.American Indian and Alaska Native Alone</th>\n      <th id=\"T_8f580_level0_col10\" class=\"col_heading level0 col10\" >Ethnicities.Asian Alone</th>\n      <th id=\"T_8f580_level0_col11\" class=\"col_heading level0 col11\" >Ethnicities.Native Hawaiian and Other Pacific Islander Alone</th>\n      <th id=\"T_8f580_level0_col12\" class=\"col_heading level0 col12\" >Ethnicities.Two or More Races</th>\n      <th id=\"T_8f580_level0_col13\" class=\"col_heading level0 col13\" >Ethnicities.Hispanic or Latino</th>\n      <th id=\"T_8f580_level0_col14\" class=\"col_heading level0 col14\" >Ethnicities.White Alone, not Hispanic or Latino</th>\n      <th id=\"T_8f580_level0_col15\" class=\"col_heading level0 col15\" >Miscellaneous.Veterans</th>\n      <th id=\"T_8f580_level0_col16\" class=\"col_heading level0 col16\" >Miscellaneous.Foreign Born</th>\n      <th id=\"T_8f580_level0_col17\" class=\"col_heading level0 col17\" >Housing.Housing Units</th>\n      <th id=\"T_8f580_level0_col18\" class=\"col_heading level0 col18\" >Housing.Homeownership Rate</th>\n      <th id=\"T_8f580_level0_col19\" class=\"col_heading level0 col19\" >Housing.Median Value of Owner-Occupied Units</th>\n      <th id=\"T_8f580_level0_col20\" class=\"col_heading level0 col20\" >Housing.Households</th>\n      <th id=\"T_8f580_level0_col21\" class=\"col_heading level0 col21\" >Housing.Persons per Household</th>\n      <th id=\"T_8f580_level0_col22\" class=\"col_heading level0 col22\" >Miscellaneous.Living in Same House +1 Years</th>\n      <th id=\"T_8f580_level0_col23\" class=\"col_heading level0 col23\" >Miscellaneous.Language Other than English at Home</th>\n      <th id=\"T_8f580_level0_col24\" class=\"col_heading level0 col24\" >Housing.Households with a computer</th>\n      <th id=\"T_8f580_level0_col25\" class=\"col_heading level0 col25\" >Housing.Households with a Internet</th>\n      <th id=\"T_8f580_level0_col26\" class=\"col_heading level0 col26\" >Education.High School or Higher</th>\n      <th id=\"T_8f580_level0_col27\" class=\"col_heading level0 col27\" >Education.Bachelor's Degree or Higher</th>\n      <th id=\"T_8f580_level0_col28\" class=\"col_heading level0 col28\" >Miscellaneous.Percent Under 66 Years With a Disability</th>\n      <th id=\"T_8f580_level0_col29\" class=\"col_heading level0 col29\" >Miscellaneous.Percent Under 65 Years Without Health insurance</th>\n      <th id=\"T_8f580_level0_col30\" class=\"col_heading level0 col30\" >Sales.Accommodation and Food Services Sales</th>\n      <th id=\"T_8f580_level0_col31\" class=\"col_heading level0 col31\" >Miscellaneous.Manufacturers Shipments</th>\n      <th id=\"T_8f580_level0_col32\" class=\"col_heading level0 col32\" >Sales.Retail Sales</th>\n      <th id=\"T_8f580_level0_col33\" class=\"col_heading level0 col33\" >Miscellaneous.Mean Travel Time to Work</th>\n      <th id=\"T_8f580_level0_col34\" class=\"col_heading level0 col34\" >Income.Median Houseold Income</th>\n      <th id=\"T_8f580_level0_col35\" class=\"col_heading level0 col35\" >Income.Per Capita Income</th>\n      <th id=\"T_8f580_level0_col36\" class=\"col_heading level0 col36\" >Income.Persons Below Poverty Level</th>\n      <th id=\"T_8f580_level0_col37\" class=\"col_heading level0 col37\" >Employment.Nonemployer Establishments</th>\n      <th id=\"T_8f580_level0_col38\" class=\"col_heading level0 col38\" >Employment.Firms.Total</th>\n      <th id=\"T_8f580_level0_col39\" class=\"col_heading level0 col39\" >Employment.Firms.Men-Owned</th>\n      <th id=\"T_8f580_level0_col40\" class=\"col_heading level0 col40\" >Employment.Firms.Women-Owned</th>\n      <th id=\"T_8f580_level0_col41\" class=\"col_heading level0 col41\" >Employment.Firms.Minority-Owned</th>\n      <th id=\"T_8f580_level0_col42\" class=\"col_heading level0 col42\" >Employment.Firms.Nonminority-Owned</th>\n      <th id=\"T_8f580_level0_col43\" class=\"col_heading level0 col43\" >Employment.Firms.Veteran-Owned</th>\n      <th id=\"T_8f580_level0_col44\" class=\"col_heading level0 col44\" >Employment.Firms.Nonveteran-Owned</th>\n      <th id=\"T_8f580_level0_col45\" class=\"col_heading level0 col45\" >Population.Population per Square Mile</th>\n      <th id=\"T_8f580_level0_col46\" class=\"col_heading level0 col46\" >Miscellaneous.Land Area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_8f580_level0_row0\" class=\"row_heading level0 row0\" >count</th>\n      <td id=\"T_8f580_row0_col0\" class=\"data row0 col0\" >51.00</td>\n      <td id=\"T_8f580_row0_col1\" class=\"data row0 col1\" >51.00</td>\n      <td id=\"T_8f580_row0_col2\" class=\"data row0 col2\" >51.00</td>\n      <td id=\"T_8f580_row0_col3\" class=\"data row0 col3\" >51.00</td>\n      <td id=\"T_8f580_row0_col4\" class=\"data row0 col4\" >51.00</td>\n      <td id=\"T_8f580_row0_col5\" class=\"data row0 col5\" >51.00</td>\n      <td id=\"T_8f580_row0_col6\" class=\"data row0 col6\" >51.00</td>\n      <td id=\"T_8f580_row0_col7\" class=\"data row0 col7\" >51.00</td>\n      <td id=\"T_8f580_row0_col8\" class=\"data row0 col8\" >51.00</td>\n      <td id=\"T_8f580_row0_col9\" class=\"data row0 col9\" >51.00</td>\n      <td id=\"T_8f580_row0_col10\" class=\"data row0 col10\" >51.00</td>\n      <td id=\"T_8f580_row0_col11\" class=\"data row0 col11\" >51.00</td>\n      <td id=\"T_8f580_row0_col12\" class=\"data row0 col12\" >51.00</td>\n      <td id=\"T_8f580_row0_col13\" class=\"data row0 col13\" >51.00</td>\n      <td id=\"T_8f580_row0_col14\" class=\"data row0 col14\" >51.00</td>\n      <td id=\"T_8f580_row0_col15\" class=\"data row0 col15\" >51.00</td>\n      <td id=\"T_8f580_row0_col16\" class=\"data row0 col16\" >51.00</td>\n      <td id=\"T_8f580_row0_col17\" class=\"data row0 col17\" >51.00</td>\n      <td id=\"T_8f580_row0_col18\" class=\"data row0 col18\" >51.00</td>\n      <td id=\"T_8f580_row0_col19\" class=\"data row0 col19\" >51.00</td>\n      <td id=\"T_8f580_row0_col20\" class=\"data row0 col20\" >51.00</td>\n      <td id=\"T_8f580_row0_col21\" class=\"data row0 col21\" >51.00</td>\n      <td id=\"T_8f580_row0_col22\" class=\"data row0 col22\" >51.00</td>\n      <td id=\"T_8f580_row0_col23\" class=\"data row0 col23\" >51.00</td>\n      <td id=\"T_8f580_row0_col24\" class=\"data row0 col24\" >51.00</td>\n      <td id=\"T_8f580_row0_col25\" class=\"data row0 col25\" >51.00</td>\n      <td id=\"T_8f580_row0_col26\" class=\"data row0 col26\" >51.00</td>\n      <td id=\"T_8f580_row0_col27\" class=\"data row0 col27\" >51.00</td>\n      <td id=\"T_8f580_row0_col28\" class=\"data row0 col28\" >51.00</td>\n      <td id=\"T_8f580_row0_col29\" class=\"data row0 col29\" >51.00</td>\n      <td id=\"T_8f580_row0_col30\" class=\"data row0 col30\" >51.00</td>\n      <td id=\"T_8f580_row0_col31\" class=\"data row0 col31\" >49.00</td>\n      <td id=\"T_8f580_row0_col32\" class=\"data row0 col32\" >51.00</td>\n      <td id=\"T_8f580_row0_col33\" class=\"data row0 col33\" >51.00</td>\n      <td id=\"T_8f580_row0_col34\" class=\"data row0 col34\" >51.00</td>\n      <td id=\"T_8f580_row0_col35\" class=\"data row0 col35\" >51.00</td>\n      <td id=\"T_8f580_row0_col36\" class=\"data row0 col36\" >51.00</td>\n      <td id=\"T_8f580_row0_col37\" class=\"data row0 col37\" >51.00</td>\n      <td id=\"T_8f580_row0_col38\" class=\"data row0 col38\" >51.00</td>\n      <td id=\"T_8f580_row0_col39\" class=\"data row0 col39\" >51.00</td>\n      <td id=\"T_8f580_row0_col40\" class=\"data row0 col40\" >51.00</td>\n      <td id=\"T_8f580_row0_col41\" class=\"data row0 col41\" >51.00</td>\n      <td id=\"T_8f580_row0_col42\" class=\"data row0 col42\" >51.00</td>\n      <td id=\"T_8f580_row0_col43\" class=\"data row0 col43\" >51.00</td>\n      <td id=\"T_8f580_row0_col44\" class=\"data row0 col44\" >51.00</td>\n      <td id=\"T_8f580_row0_col45\" class=\"data row0 col45\" >51.00</td>\n      <td id=\"T_8f580_row0_col46\" class=\"data row0 col46\" >51.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_8f580_level0_row1\" class=\"row_heading level0 row1\" >mean</th>\n      <td id=\"T_8f580_row1_col0\" class=\"data row1 col0\" >5.15</td>\n      <td id=\"T_8f580_row1_col1\" class=\"data row1 col1\" >6,499,005.51</td>\n      <td id=\"T_8f580_row1_col2\" class=\"data row1 col2\" >6,053,834.08</td>\n      <td id=\"T_8f580_row1_col3\" class=\"data row1 col3\" >5.96</td>\n      <td id=\"T_8f580_row1_col4\" class=\"data row1 col4\" >22.14</td>\n      <td id=\"T_8f580_row1_col5\" class=\"data row1 col5\" >16.88</td>\n      <td id=\"T_8f580_row1_col6\" class=\"data row1 col6\" >50.60</td>\n      <td id=\"T_8f580_row1_col7\" class=\"data row1 col7\" >78.07</td>\n      <td id=\"T_8f580_row1_col8\" class=\"data row1 col8\" >11.87</td>\n      <td id=\"T_8f580_row1_col9\" class=\"data row1 col9\" >2.01</td>\n      <td id=\"T_8f580_row1_col10\" class=\"data row1 col10\" >4.55</td>\n      <td id=\"T_8f580_row1_col11\" class=\"data row1 col11\" >0.40</td>\n      <td id=\"T_8f580_row1_col12\" class=\"data row1 col12\" >3.11</td>\n      <td id=\"T_8f580_row1_col13\" class=\"data row1 col13\" >12.25</td>\n      <td id=\"T_8f580_row1_col14\" class=\"data row1 col14\" >67.67</td>\n      <td id=\"T_8f580_row1_col15\" class=\"data row1 col15\" >357,457.29</td>\n      <td id=\"T_8f580_row1_col16\" class=\"data row1 col16\" >9.41</td>\n      <td id=\"T_8f580_row1_col17\" class=\"data row1 col17\" >2,738,906.75</td>\n      <td id=\"T_8f580_row1_col18\" class=\"data row1 col18\" >65.67</td>\n      <td id=\"T_8f580_row1_col19\" class=\"data row1 col19\" >233,176.47</td>\n      <td id=\"T_8f580_row1_col20\" class=\"data row1 col20\" >2,367,765.65</td>\n      <td id=\"T_8f580_row1_col21\" class=\"data row1 col21\" >2.56</td>\n      <td id=\"T_8f580_row1_col22\" class=\"data row1 col22\" >85.24</td>\n      <td id=\"T_8f580_row1_col23\" class=\"data row1 col23\" >14.98</td>\n      <td id=\"T_8f580_row1_col24\" class=\"data row1 col24\" >89.98</td>\n      <td id=\"T_8f580_row1_col25\" class=\"data row1 col25\" >82.05</td>\n      <td id=\"T_8f580_row1_col26\" class=\"data row1 col26\" >89.54</td>\n      <td id=\"T_8f580_row1_col27\" class=\"data row1 col27\" >31.77</td>\n      <td id=\"T_8f580_row1_col28\" class=\"data row1 col28\" >9.16</td>\n      <td id=\"T_8f580_row1_col29\" class=\"data row1 col29\" >9.96</td>\n      <td id=\"T_8f580_row1_col30\" class=\"data row1 col30\" >13,885,070.55</td>\n      <td id=\"T_8f580_row1_col31\" class=\"data row1 col31\" >116,411,562.24</td>\n      <td id=\"T_8f580_row1_col32\" class=\"data row1 col32\" >82,741,605.31</td>\n      <td id=\"T_8f580_row1_col33\" class=\"data row1 col33\" >24.80</td>\n      <td id=\"T_8f580_row1_col34\" class=\"data row1 col34\" >63,097.86</td>\n      <td id=\"T_8f580_row1_col35\" class=\"data row1 col35\" >33,743.06</td>\n      <td id=\"T_8f580_row1_col36\" class=\"data row1 col36\" >12.17</td>\n      <td id=\"T_8f580_row1_col37\" class=\"data row1 col37\" >519,324.16</td>\n      <td id=\"T_8f580_row1_col38\" class=\"data row1 col38\" >545,254.90</td>\n      <td id=\"T_8f580_row1_col39\" class=\"data row1 col39\" >292,380.10</td>\n      <td id=\"T_8f580_row1_col40\" class=\"data row1 col40\" >193,842.12</td>\n      <td id=\"T_8f580_row1_col41\" class=\"data row1 col41\" >156,032.14</td>\n      <td id=\"T_8f580_row1_col42\" class=\"data row1 col42\" >373,752.12</td>\n      <td id=\"T_8f580_row1_col43\" class=\"data row1 col43\" >49,611.88</td>\n      <td id=\"T_8f580_row1_col44\" class=\"data row1 col44\" >473,326.00</td>\n      <td id=\"T_8f580_row1_col45\" class=\"data row1 col45\" >384.40</td>\n      <td id=\"T_8f580_row1_col46\" class=\"data row1 col46\" >69,253.05</td>\n    </tr>\n    <tr>\n      <th id=\"T_8f580_level0_row2\" class=\"row_heading level0 row2\" >std</th>\n      <td id=\"T_8f580_row2_col0\" class=\"data row2 col0\" >6.87</td>\n      <td id=\"T_8f580_row2_col1\" class=\"data row2 col1\" >7,408,022.55</td>\n      <td id=\"T_8f580_row2_col2\" class=\"data row2 col2\" >6,823,984.27</td>\n      <td id=\"T_8f580_row2_col3\" class=\"data row2 col3\" >0.61</td>\n      <td id=\"T_8f580_row2_col4\" class=\"data row2 col4\" >2.00</td>\n      <td id=\"T_8f580_row2_col5\" class=\"data row2 col5\" >2.01</td>\n      <td id=\"T_8f580_row2_col6\" class=\"data row2 col6\" >0.84</td>\n      <td id=\"T_8f580_row2_col7\" class=\"data row2 col7\" >13.02</td>\n      <td id=\"T_8f580_row2_col8\" class=\"data row2 col8\" >10.70</td>\n      <td id=\"T_8f580_row2_col9\" class=\"data row2 col9\" >3.11</td>\n      <td id=\"T_8f580_row2_col10\" class=\"data row2 col10\" >5.52</td>\n      <td id=\"T_8f580_row2_col11\" class=\"data row2 col11\" >1.41</td>\n      <td id=\"T_8f580_row2_col12\" class=\"data row2 col12\" >3.21</td>\n      <td id=\"T_8f580_row2_col13\" class=\"data row2 col13\" >10.35</td>\n      <td id=\"T_8f580_row2_col14\" class=\"data row2 col14\" >16.18</td>\n      <td id=\"T_8f580_row2_col15\" class=\"data row2 col15\" >351,951.29</td>\n      <td id=\"T_8f580_row2_col16\" class=\"data row2 col16\" >6.11</td>\n      <td id=\"T_8f580_row2_col17\" class=\"data row2 col17\" >2,888,415.00</td>\n      <td id=\"T_8f580_row2_col18\" class=\"data row2 col18\" >5.44</td>\n      <td id=\"T_8f580_row2_col19\" class=\"data row2 col19\" >109,205.70</td>\n      <td id=\"T_8f580_row2_col20\" class=\"data row2 col20\" >2,531,758.54</td>\n      <td id=\"T_8f580_row2_col21\" class=\"data row2 col21\" >0.17</td>\n      <td id=\"T_8f580_row2_col22\" class=\"data row2 col22\" >2.06</td>\n      <td id=\"T_8f580_row2_col23\" class=\"data row2 col23\" >9.77</td>\n      <td id=\"T_8f580_row2_col24\" class=\"data row2 col24\" >2.55</td>\n      <td id=\"T_8f580_row2_col25\" class=\"data row2 col25\" >3.79</td>\n      <td id=\"T_8f580_row2_col26\" class=\"data row2 col26\" >2.70</td>\n      <td id=\"T_8f580_row2_col27\" class=\"data row2 col27\" >6.43</td>\n      <td id=\"T_8f580_row2_col28\" class=\"data row2 col28\" >1.77</td>\n      <td id=\"T_8f580_row2_col29\" class=\"data row2 col29\" >3.64</td>\n      <td id=\"T_8f580_row2_col30\" class=\"data row2 col30\" >16,274,397.82</td>\n      <td id=\"T_8f580_row2_col31\" class=\"data row2 col31\" >131,704,461.49</td>\n      <td id=\"T_8f580_row2_col32\" class=\"data row2 col32\" >91,289,768.45</td>\n      <td id=\"T_8f580_row2_col33\" class=\"data row2 col33\" >3.98</td>\n      <td id=\"T_8f580_row2_col34\" class=\"data row2 col34\" >10,715.13</td>\n      <td id=\"T_8f580_row2_col35\" class=\"data row2 col35\" >5,689.58</td>\n      <td id=\"T_8f580_row2_col36\" class=\"data row2 col36\" >2.68</td>\n      <td id=\"T_8f580_row2_col37\" class=\"data row2 col37\" >668,860.54</td>\n      <td id=\"T_8f580_row2_col38\" class=\"data row2 col38\" >661,434.25</td>\n      <td id=\"T_8f580_row2_col39\" class=\"data row2 col39\" >352,447.95</td>\n      <td id=\"T_8f580_row2_col40\" class=\"data row2 col40\" >246,899.31</td>\n      <td id=\"T_8f580_row2_col41\" class=\"data row2 col41\" >299,248.47</td>\n      <td id=\"T_8f580_row2_col42\" class=\"data row2 col42\" >361,584.05</td>\n      <td id=\"T_8f580_row2_col43\" class=\"data row2 col43\" >51,941.58</td>\n      <td id=\"T_8f580_row2_col44\" class=\"data row2 col44\" >589,208.57</td>\n      <td id=\"T_8f580_row2_col45\" class=\"data row2 col45\" >1,377.35</td>\n      <td id=\"T_8f580_row2_col46\" class=\"data row2 col46\" >85,526.08</td>\n    </tr>\n    <tr>\n      <th id=\"T_8f580_level0_row3\" class=\"row_heading level0 row3\" >min</th>\n      <td id=\"T_8f580_row3_col0\" class=\"data row3 col0\" >-13.30</td>\n      <td id=\"T_8f580_row3_col1\" class=\"data row3 col1\" >576,851.00</td>\n      <td id=\"T_8f580_row3_col2\" class=\"data row3 col2\" >563,626.00</td>\n      <td id=\"T_8f580_row3_col3\" class=\"data row3 col3\" >4.70</td>\n      <td id=\"T_8f580_row3_col4\" class=\"data row3 col4\" >18.20</td>\n      <td id=\"T_8f580_row3_col5\" class=\"data row3 col5\" >11.40</td>\n      <td id=\"T_8f580_row3_col6\" class=\"data row3 col6\" >47.90</td>\n      <td id=\"T_8f580_row3_col7\" class=\"data row3 col7\" >25.50</td>\n      <td id=\"T_8f580_row3_col8\" class=\"data row3 col8\" >0.60</td>\n      <td id=\"T_8f580_row3_col9\" class=\"data row3 col9\" >0.30</td>\n      <td id=\"T_8f580_row3_col10\" class=\"data row3 col10\" >0.80</td>\n      <td id=\"T_8f580_row3_col11\" class=\"data row3 col11\" >0.00</td>\n      <td id=\"T_8f580_row3_col12\" class=\"data row3 col12\" >1.30</td>\n      <td id=\"T_8f580_row3_col13\" class=\"data row3 col13\" >1.70</td>\n      <td id=\"T_8f580_row3_col14\" class=\"data row3 col14\" >21.70</td>\n      <td id=\"T_8f580_row3_col15\" class=\"data row3 col15\" >26,156.00</td>\n      <td id=\"T_8f580_row3_col16\" class=\"data row3 col16\" >1.70</td>\n      <td id=\"T_8f580_row3_col17\" class=\"data row3 col17\" >280,291.00</td>\n      <td id=\"T_8f580_row3_col18\" class=\"data row3 col18\" >41.60</td>\n      <td id=\"T_8f580_row3_col19\" class=\"data row3 col19\" >119,000.00</td>\n      <td id=\"T_8f580_row3_col20\" class=\"data row3 col20\" >230,101.00</td>\n      <td id=\"T_8f580_row3_col21\" class=\"data row3 col21\" >2.30</td>\n      <td id=\"T_8f580_row3_col22\" class=\"data row3 col22\" >80.50</td>\n      <td id=\"T_8f580_row3_col23\" class=\"data row3 col23\" >2.60</td>\n      <td id=\"T_8f580_row3_col24\" class=\"data row3 col24\" >83.80</td>\n      <td id=\"T_8f580_row3_col25\" class=\"data row3 col25\" >71.50</td>\n      <td id=\"T_8f580_row3_col26\" class=\"data row3 col26\" >83.30</td>\n      <td id=\"T_8f580_row3_col27\" class=\"data row3 col27\" >20.60</td>\n      <td id=\"T_8f580_row3_col28\" class=\"data row3 col28\" >6.40</td>\n      <td id=\"T_8f580_row3_col29\" class=\"data row3 col29\" >3.50</td>\n      <td id=\"T_8f580_row3_col30\" class=\"data row3 col30\" >1,564,272.00</td>\n      <td id=\"T_8f580_row3_col31\" class=\"data row3 col31\" >309,832.00</td>\n      <td id=\"T_8f580_row3_col32\" class=\"data row3 col32\" >4,439,933.00</td>\n      <td id=\"T_8f580_row3_col33\" class=\"data row3 col33\" >17.20</td>\n      <td id=\"T_8f580_row3_col34\" class=\"data row3 col34\" >45,081.00</td>\n      <td id=\"T_8f580_row3_col35\" class=\"data row3 col35\" >24,369.00</td>\n      <td id=\"T_8f580_row3_col36\" class=\"data row3 col36\" >7.30</td>\n      <td id=\"T_8f580_row3_col37\" class=\"data row3 col37\" >53,042.00</td>\n      <td id=\"T_8f580_row3_col38\" class=\"data row3 col38\" >62,427.00</td>\n      <td id=\"T_8f580_row3_col39\" class=\"data row3 col39\" >30,039.00</td>\n      <td id=\"T_8f580_row3_col40\" class=\"data row3 col40\" >19,344.00</td>\n      <td id=\"T_8f580_row3_col41\" class=\"data row3 col41\" >2,354.00</td>\n      <td id=\"T_8f580_row3_col42\" class=\"data row3 col42\" >29,521.00</td>\n      <td id=\"T_8f580_row3_col43\" class=\"data row3 col43\" >5,070.00</td>\n      <td id=\"T_8f580_row3_col44\" class=\"data row3 col44\" >51,353.00</td>\n      <td id=\"T_8f580_row3_col45\" class=\"data row3 col45\" >1.20</td>\n      <td id=\"T_8f580_row3_col46\" class=\"data row3 col46\" >61.05</td>\n    </tr>\n    <tr>\n      <th id=\"T_8f580_level0_row4\" class=\"row_heading level0 row4\" >25%</th>\n      <td id=\"T_8f580_row4_col0\" class=\"data row4 col0\" >1.95</td>\n      <td id=\"T_8f580_row4_col1\" class=\"data row4 col1\" >1,816,411.00</td>\n      <td id=\"T_8f580_row4_col2\" class=\"data row4 col2\" >1,696,961.50</td>\n      <td id=\"T_8f580_row4_col3\" class=\"data row4 col3\" >5.70</td>\n      <td id=\"T_8f580_row4_col4\" class=\"data row4 col4\" >21.05</td>\n      <td id=\"T_8f580_row4_col5\" class=\"data row4 col5\" >16.10</td>\n      <td id=\"T_8f580_row4_col6\" class=\"data row4 col6\" >50.20</td>\n      <td id=\"T_8f580_row4_col7\" class=\"data row4 col7\" >71.25</td>\n      <td id=\"T_8f580_row4_col8\" class=\"data row4 col8\" >3.65</td>\n      <td id=\"T_8f580_row4_col9\" class=\"data row4 col9\" >0.50</td>\n      <td id=\"T_8f580_row4_col10\" class=\"data row4 col10\" >1.80</td>\n      <td id=\"T_8f580_row4_col11\" class=\"data row4 col11\" >0.10</td>\n      <td id=\"T_8f580_row4_col12\" class=\"data row4 col12\" >2.10</td>\n      <td id=\"T_8f580_row4_col13\" class=\"data row4 col13\" >5.30</td>\n      <td id=\"T_8f580_row4_col14\" class=\"data row4 col14\" >57.40</td>\n      <td id=\"T_8f580_row4_col15\" class=\"data row4 col15\" >116,811.50</td>\n      <td id=\"T_8f580_row4_col16\" class=\"data row4 col16\" >4.75</td>\n      <td id=\"T_8f580_row4_col17\" class=\"data row4 col17\" >801,166.00</td>\n      <td id=\"T_8f580_row4_col18\" class=\"data row4 col18\" >64.10</td>\n      <td id=\"T_8f580_row4_col19\" class=\"data row4 col19\" >159,750.00</td>\n      <td id=\"T_8f580_row4_col20\" class=\"data row4 col20\" >681,296.50</td>\n      <td id=\"T_8f580_row4_col21\" class=\"data row4 col21\" >2.46</td>\n      <td id=\"T_8f580_row4_col22\" class=\"data row4 col22\" >83.95</td>\n      <td id=\"T_8f580_row4_col23\" class=\"data row4 col23\" >7.30</td>\n      <td id=\"T_8f580_row4_col24\" class=\"data row4 col24\" >88.80</td>\n      <td id=\"T_8f580_row4_col25\" class=\"data row4 col25\" >80.70</td>\n      <td id=\"T_8f580_row4_col26\" class=\"data row4 col26\" >87.30</td>\n      <td id=\"T_8f580_row4_col27\" class=\"data row4 col27\" >27.85</td>\n      <td id=\"T_8f580_row4_col28\" class=\"data row4 col28\" >7.85</td>\n      <td id=\"T_8f580_row4_col29\" class=\"data row4 col29\" >7.30</td>\n      <td id=\"T_8f580_row4_col30\" class=\"data row4 col30\" >4,171,798.50</td>\n      <td id=\"T_8f580_row4_col31\" class=\"data row4 col31\" >24,553,072.00</td>\n      <td id=\"T_8f580_row4_col32\" class=\"data row4 col32\" >23,908,598.50</td>\n      <td id=\"T_8f580_row4_col33\" class=\"data row4 col33\" >22.25</td>\n      <td id=\"T_8f580_row4_col34\" class=\"data row4 col34\" >55,560.50</td>\n      <td id=\"T_8f580_row4_col35\" class=\"data row4 col35\" >30,276.50</td>\n      <td id=\"T_8f580_row4_col36\" class=\"data row4 col36\" >10.10</td>\n      <td id=\"T_8f580_row4_col37\" class=\"data row4 col37\" >121,633.00</td>\n      <td id=\"T_8f580_row4_col38\" class=\"data row4 col38\" >143,106.00</td>\n      <td id=\"T_8f580_row4_col39\" class=\"data row4 col39\" >73,924.00</td>\n      <td id=\"T_8f580_row4_col40\" class=\"data row4 col40\" >44,787.00</td>\n      <td id=\"T_8f580_row4_col41\" class=\"data row4 col41\" >14,722.00</td>\n      <td id=\"T_8f580_row4_col42\" class=\"data row4 col42\" >126,135.00</td>\n      <td id=\"T_8f580_row4_col43\" class=\"data row4 col43\" >14,892.50</td>\n      <td id=\"T_8f580_row4_col44\" class=\"data row4 col44\" >120,076.50</td>\n      <td id=\"T_8f580_row4_col45\" class=\"data row4 col45\" >45.80</td>\n      <td id=\"T_8f580_row4_col46\" class=\"data row4 col46\" >33,334.51</td>\n    </tr>\n    <tr>\n      <th id=\"T_8f580_level0_row5\" class=\"row_heading level0 row5\" >50%</th>\n      <td id=\"T_8f580_row5_col0\" class=\"data row5 col0\" >4.10</td>\n      <td id=\"T_8f580_row5_col1\" class=\"data row5 col1\" >4,505,836.00</td>\n      <td id=\"T_8f580_row5_col2\" class=\"data row5 col2\" >4,339,367.00</td>\n      <td id=\"T_8f580_row5_col3\" class=\"data row5 col3\" >6.00</td>\n      <td id=\"T_8f580_row5_col4\" class=\"data row5 col4\" >22.10</td>\n      <td id=\"T_8f580_row5_col5\" class=\"data row5 col5\" >16.90</td>\n      <td id=\"T_8f580_row5_col6\" class=\"data row5 col6\" >50.70</td>\n      <td id=\"T_8f580_row5_col7\" class=\"data row5 col7\" >80.60</td>\n      <td id=\"T_8f580_row5_col8\" class=\"data row5 col8\" >8.50</td>\n      <td id=\"T_8f580_row5_col9\" class=\"data row5 col9\" >0.70</td>\n      <td id=\"T_8f580_row5_col10\" class=\"data row5 col10\" >3.00</td>\n      <td id=\"T_8f580_row5_col11\" class=\"data row5 col11\" >0.10</td>\n      <td id=\"T_8f580_row5_col12\" class=\"data row5 col12\" >2.40</td>\n      <td id=\"T_8f580_row5_col13\" class=\"data row5 col13\" >9.80</td>\n      <td id=\"T_8f580_row5_col14\" class=\"data row5 col14\" >71.10</td>\n      <td id=\"T_8f580_row5_col15\" class=\"data row5 col15\" >270,775.00</td>\n      <td id=\"T_8f580_row5_col16\" class=\"data row5 col16\" >7.20</td>\n      <td id=\"T_8f580_row5_col17\" class=\"data row5 col17\" >2,006,358.00</td>\n      <td id=\"T_8f580_row5_col18\" class=\"data row5 col18\" >66.30</td>\n      <td id=\"T_8f580_row5_col19\" class=\"data row5 col19\" >194,500.00</td>\n      <td id=\"T_8f580_row5_col20\" class=\"data row5 col20\" >1,734,618.00</td>\n      <td id=\"T_8f580_row5_col21\" class=\"data row5 col21\" >2.52</td>\n      <td id=\"T_8f580_row5_col22\" class=\"data row5 col22\" >85.30</td>\n      <td id=\"T_8f580_row5_col23\" class=\"data row5 col23\" >11.80</td>\n      <td id=\"T_8f580_row5_col24\" class=\"data row5 col24\" >89.90</td>\n      <td id=\"T_8f580_row5_col25\" class=\"data row5 col25\" >82.50</td>\n      <td id=\"T_8f580_row5_col26\" class=\"data row5 col26\" >90.20</td>\n      <td id=\"T_8f580_row5_col27\" class=\"data row5 col27\" >31.30</td>\n      <td id=\"T_8f580_row5_col28\" class=\"data row5 col28\" >8.90</td>\n      <td id=\"T_8f580_row5_col29\" class=\"data row5 col29\" >9.30</td>\n      <td id=\"T_8f580_row5_col30\" class=\"data row5 col30\" >9,542,068.00</td>\n      <td id=\"T_8f580_row5_col31\" class=\"data row5 col31\" >81,927,799.00</td>\n      <td id=\"T_8f580_row5_col32\" class=\"data row5 col32\" >54,869,978.00</td>\n      <td id=\"T_8f580_row5_col33\" class=\"data row5 col33\" >24.80</td>\n      <td id=\"T_8f580_row5_col34\" class=\"data row5 col34\" >61,439.00</td>\n      <td id=\"T_8f580_row5_col35\" class=\"data row5 col35\" >32,176.00</td>\n      <td id=\"T_8f580_row5_col36\" class=\"data row5 col36\" >11.80</td>\n      <td id=\"T_8f580_row5_col37\" class=\"data row5 col37\" >302,653.00</td>\n      <td id=\"T_8f580_row5_col38\" class=\"data row5 col38\" >339,305.00</td>\n      <td id=\"T_8f580_row5_col39\" class=\"data row5 col39\" >187,845.00</td>\n      <td id=\"T_8f580_row5_col40\" class=\"data row5 col40\" >123,015.00</td>\n      <td id=\"T_8f580_row5_col41\" class=\"data row5 col41\" >61,252.00</td>\n      <td id=\"T_8f580_row5_col42\" class=\"data row5 col42\" >276,269.00</td>\n      <td id=\"T_8f580_row5_col43\" class=\"data row5 col43\" >36,273.00</td>\n      <td id=\"T_8f580_row5_col44\" class=\"data row5 col44\" >288,790.00</td>\n      <td id=\"T_8f580_row5_col45\" class=\"data row5 col45\" >101.20</td>\n      <td id=\"T_8f580_row5_col46\" class=\"data row5 col46\" >53,624.76</td>\n    </tr>\n    <tr>\n      <th id=\"T_8f580_level0_row6\" class=\"row_heading level0 row6\" >75%</th>\n      <td id=\"T_8f580_row6_col0\" class=\"data row6 col0\" >9.80</td>\n      <td id=\"T_8f580_row6_col1\" class=\"data row6 col1\" >7,428,391.50</td>\n      <td id=\"T_8f580_row6_col2\" class=\"data row6 col2\" >6,636,084.50</td>\n      <td id=\"T_8f580_row6_col3\" class=\"data row6 col3\" >6.20</td>\n      <td id=\"T_8f580_row6_col4\" class=\"data row6 col4\" >23.25</td>\n      <td id=\"T_8f580_row6_col5\" class=\"data row6 col5\" >17.85</td>\n      <td id=\"T_8f580_row6_col6\" class=\"data row6 col6\" >51.20</td>\n      <td id=\"T_8f580_row6_col7\" class=\"data row6 col7\" >86.90</td>\n      <td id=\"T_8f580_row6_col8\" class=\"data row6 col8\" >16.30</td>\n      <td id=\"T_8f580_row6_col9\" class=\"data row6 col9\" >1.60</td>\n      <td id=\"T_8f580_row6_col10\" class=\"data row6 col10\" >5.10</td>\n      <td id=\"T_8f580_row6_col11\" class=\"data row6 col11\" >0.20</td>\n      <td id=\"T_8f580_row6_col12\" class=\"data row6 col12\" >2.90</td>\n      <td id=\"T_8f580_row6_col13\" class=\"data row6 col13\" >13.90</td>\n      <td id=\"T_8f580_row6_col14\" class=\"data row6 col14\" >79.10</td>\n      <td id=\"T_8f580_row6_col15\" class=\"data row6 col15\" >459,667.50</td>\n      <td id=\"T_8f580_row6_col16\" class=\"data row6 col16\" >13.65</td>\n      <td id=\"T_8f580_row6_col17\" class=\"data row6 col17\" >3,135,492.50</td>\n      <td id=\"T_8f580_row6_col18\" class=\"data row6 col18\" >69.00</td>\n      <td id=\"T_8f580_row6_col19\" class=\"data row6 col19\" >271,750.00</td>\n      <td id=\"T_8f580_row6_col20\" class=\"data row6 col20\" >2,732,946.50</td>\n      <td id=\"T_8f580_row6_col21\" class=\"data row6 col21\" >2.62</td>\n      <td id=\"T_8f580_row6_col22\" class=\"data row6 col22\" >86.70</td>\n      <td id=\"T_8f580_row6_col23\" class=\"data row6 col23\" >21.00</td>\n      <td id=\"T_8f580_row6_col24\" class=\"data row6 col24\" >91.65</td>\n      <td id=\"T_8f580_row6_col25\" class=\"data row6 col25\" >84.80</td>\n      <td id=\"T_8f580_row6_col26\" class=\"data row6 col26\" >91.70</td>\n      <td id=\"T_8f580_row6_col27\" class=\"data row6 col27\" >34.45</td>\n      <td id=\"T_8f580_row6_col28\" class=\"data row6 col28\" >10.20</td>\n      <td id=\"T_8f580_row6_col29\" class=\"data row6 col29\" >12.15</td>\n      <td id=\"T_8f580_row6_col30\" class=\"data row6 col30\" >17,652,438.00</td>\n      <td id=\"T_8f580_row6_col31\" class=\"data row6 col31\" >139,960,482.00</td>\n      <td id=\"T_8f580_row6_col32\" class=\"data row6 col32\" >101,458,882.50</td>\n      <td id=\"T_8f580_row6_col33\" class=\"data row6 col33\" >27.35</td>\n      <td id=\"T_8f580_row6_col34\" class=\"data row6 col34\" >71,463.50</td>\n      <td id=\"T_8f580_row6_col35\" class=\"data row6 col35\" >36,454.00</td>\n      <td id=\"T_8f580_row6_col36\" class=\"data row6 col36\" >13.50</td>\n      <td id=\"T_8f580_row6_col37\" class=\"data row6 col37\" >556,870.50</td>\n      <td id=\"T_8f580_row6_col38\" class=\"data row6 col38\" >579,058.50</td>\n      <td id=\"T_8f580_row6_col39\" class=\"data row6 col39\" >327,630.50</td>\n      <td id=\"T_8f580_row6_col40\" class=\"data row6 col40\" >204,164.50</td>\n      <td id=\"T_8f580_row6_col41\" class=\"data row6 col41\" >128,806.00</td>\n      <td id=\"T_8f580_row6_col42\" class=\"data row6 col42\" >446,237.00</td>\n      <td id=\"T_8f580_row6_col43\" class=\"data row6 col43\" >58,167.50</td>\n      <td id=\"T_8f580_row6_col44\" class=\"data row6 col44\" >497,595.50</td>\n      <td id=\"T_8f580_row6_col45\" class=\"data row6 col45\" >221.45</td>\n      <td id=\"T_8f580_row6_col46\" class=\"data row6 col46\" >80,692.73</td>\n    </tr>\n    <tr>\n      <th id=\"T_8f580_level0_row7\" class=\"row_heading level0 row7\" >max</th>\n      <td id=\"T_8f580_row7_col0\" class=\"data row7 col0\" >17.30</td>\n      <td id=\"T_8f580_row7_col1\" class=\"data row7 col1\" >39,538,223.00</td>\n      <td id=\"T_8f580_row7_col2\" class=\"data row7 col2\" >37,253,956.00</td>\n      <td id=\"T_8f580_row7_col3\" class=\"data row7 col3\" >7.70</td>\n      <td id=\"T_8f580_row7_col4\" class=\"data row7 col4\" >29.00</td>\n      <td id=\"T_8f580_row7_col5\" class=\"data row7 col5\" >21.20</td>\n      <td id=\"T_8f580_row7_col6\" class=\"data row7 col6\" >52.60</td>\n      <td id=\"T_8f580_row7_col7\" class=\"data row7 col7\" >94.40</td>\n      <td id=\"T_8f580_row7_col8\" class=\"data row7 col8\" >46.00</td>\n      <td id=\"T_8f580_row7_col9\" class=\"data row7 col9\" >15.60</td>\n      <td id=\"T_8f580_row7_col10\" class=\"data row7 col10\" >37.60</td>\n      <td id=\"T_8f580_row7_col11\" class=\"data row7 col11\" >10.10</td>\n      <td id=\"T_8f580_row7_col12\" class=\"data row7 col12\" >24.20</td>\n      <td id=\"T_8f580_row7_col13\" class=\"data row7 col13\" >49.30</td>\n      <td id=\"T_8f580_row7_col14\" class=\"data row7 col14\" >93.00</td>\n      <td id=\"T_8f580_row7_col15\" class=\"data row7 col15\" >1,574,531.00</td>\n      <td id=\"T_8f580_row7_col16\" class=\"data row7 col16\" >26.80</td>\n      <td id=\"T_8f580_row7_col17\" class=\"data row7 col17\" >14,366,336.00</td>\n      <td id=\"T_8f580_row7_col18\" class=\"data row7 col18\" >73.20</td>\n      <td id=\"T_8f580_row7_col19\" class=\"data row7 col19\" >615,300.00</td>\n      <td id=\"T_8f580_row7_col20\" class=\"data row7 col20\" >13,044,266.00</td>\n      <td id=\"T_8f580_row7_col21\" class=\"data row7 col21\" >3.12</td>\n      <td id=\"T_8f580_row7_col22\" class=\"data row7 col22\" >89.80</td>\n      <td id=\"T_8f580_row7_col23\" class=\"data row7 col23\" >44.20</td>\n      <td id=\"T_8f580_row7_col24\" class=\"data row7 col24\" >95.30</td>\n      <td id=\"T_8f580_row7_col25\" class=\"data row7 col25\" >88.30</td>\n      <td id=\"T_8f580_row7_col26\" class=\"data row7 col26\" >93.60</td>\n      <td id=\"T_8f580_row7_col27\" class=\"data row7 col27\" >58.50</td>\n      <td id=\"T_8f580_row7_col28\" class=\"data row7 col28\" >14.00</td>\n      <td id=\"T_8f580_row7_col29\" class=\"data row7 col29\" >20.80</td>\n      <td id=\"T_8f580_row7_col30\" class=\"data row7 col30\" >90,830,372.00</td>\n      <td id=\"T_8f580_row7_col31\" class=\"data row7 col31\" >702,603,073.00</td>\n      <td id=\"T_8f580_row7_col32\" class=\"data row7 col32\" >481,800,461.00</td>\n      <td id=\"T_8f580_row7_col33\" class=\"data row7 col33\" >33.60</td>\n      <td id=\"T_8f580_row7_col34\" class=\"data row7 col34\" >86,420.00</td>\n      <td id=\"T_8f580_row7_col35\" class=\"data row7 col35\" >56,147.00</td>\n      <td id=\"T_8f580_row7_col36\" class=\"data row7 col36\" >19.60</td>\n      <td id=\"T_8f580_row7_col37\" class=\"data row7 col37\" >3,453,769.00</td>\n      <td id=\"T_8f580_row7_col38\" class=\"data row7 col38\" >3,548,449.00</td>\n      <td id=\"T_8f580_row7_col39\" class=\"data row7 col39\" >1,852,580.00</td>\n      <td id=\"T_8f580_row7_col40\" class=\"data row7 col40\" >1,320,085.00</td>\n      <td id=\"T_8f580_row7_col41\" class=\"data row7 col41\" >1,619,857.00</td>\n      <td id=\"T_8f580_row7_col42\" class=\"data row7 col42\" >1,819,107.00</td>\n      <td id=\"T_8f580_row7_col43\" class=\"data row7 col43\" >252,377.00</td>\n      <td id=\"T_8f580_row7_col44\" class=\"data row7 col44\" >3,176,341.00</td>\n      <td id=\"T_8f580_row7_col45\" class=\"data row7 col45\" >9,856.50</td>\n      <td id=\"T_8f580_row7_col46\" class=\"data row7 col46\" >570,640.95</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nOne more thing we can do to clean up this view is to sort the variables by their name.\n\n::: {#8b2254fb .cell execution_count=7}\n``` {.python .cell-code}\n(\n    state_demographics.describe()\n    # Sort the data frame by the row index (a.k.a., the row names)\n    .sort_index(axis=\"columns\")\n    .style.format(precision=2, thousands=\",\")\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_776db\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_776db_level0_col0\" class=\"col_heading level0 col0\" >Age.Percent 65 and Older</th>\n      <th id=\"T_776db_level0_col1\" class=\"col_heading level0 col1\" >Age.Percent Under 18 Years</th>\n      <th id=\"T_776db_level0_col2\" class=\"col_heading level0 col2\" >Age.Percent Under 5 Years</th>\n      <th id=\"T_776db_level0_col3\" class=\"col_heading level0 col3\" >Education.Bachelor's Degree or Higher</th>\n      <th id=\"T_776db_level0_col4\" class=\"col_heading level0 col4\" >Education.High School or Higher</th>\n      <th id=\"T_776db_level0_col5\" class=\"col_heading level0 col5\" >Employment.Firms.Men-Owned</th>\n      <th id=\"T_776db_level0_col6\" class=\"col_heading level0 col6\" >Employment.Firms.Minority-Owned</th>\n      <th id=\"T_776db_level0_col7\" class=\"col_heading level0 col7\" >Employment.Firms.Nonminority-Owned</th>\n      <th id=\"T_776db_level0_col8\" class=\"col_heading level0 col8\" >Employment.Firms.Nonveteran-Owned</th>\n      <th id=\"T_776db_level0_col9\" class=\"col_heading level0 col9\" >Employment.Firms.Total</th>\n      <th id=\"T_776db_level0_col10\" class=\"col_heading level0 col10\" >Employment.Firms.Veteran-Owned</th>\n      <th id=\"T_776db_level0_col11\" class=\"col_heading level0 col11\" >Employment.Firms.Women-Owned</th>\n      <th id=\"T_776db_level0_col12\" class=\"col_heading level0 col12\" >Employment.Nonemployer Establishments</th>\n      <th id=\"T_776db_level0_col13\" class=\"col_heading level0 col13\" >Ethnicities.American Indian and Alaska Native Alone</th>\n      <th id=\"T_776db_level0_col14\" class=\"col_heading level0 col14\" >Ethnicities.Asian Alone</th>\n      <th id=\"T_776db_level0_col15\" class=\"col_heading level0 col15\" >Ethnicities.Black Alone</th>\n      <th id=\"T_776db_level0_col16\" class=\"col_heading level0 col16\" >Ethnicities.Hispanic or Latino</th>\n      <th id=\"T_776db_level0_col17\" class=\"col_heading level0 col17\" >Ethnicities.Native Hawaiian and Other Pacific Islander Alone</th>\n      <th id=\"T_776db_level0_col18\" class=\"col_heading level0 col18\" >Ethnicities.Two or More Races</th>\n      <th id=\"T_776db_level0_col19\" class=\"col_heading level0 col19\" >Ethnicities.White Alone</th>\n      <th id=\"T_776db_level0_col20\" class=\"col_heading level0 col20\" >Ethnicities.White Alone, not Hispanic or Latino</th>\n      <th id=\"T_776db_level0_col21\" class=\"col_heading level0 col21\" >Housing.Homeownership Rate</th>\n      <th id=\"T_776db_level0_col22\" class=\"col_heading level0 col22\" >Housing.Households</th>\n      <th id=\"T_776db_level0_col23\" class=\"col_heading level0 col23\" >Housing.Households with a Internet</th>\n      <th id=\"T_776db_level0_col24\" class=\"col_heading level0 col24\" >Housing.Households with a computer</th>\n      <th id=\"T_776db_level0_col25\" class=\"col_heading level0 col25\" >Housing.Housing Units</th>\n      <th id=\"T_776db_level0_col26\" class=\"col_heading level0 col26\" >Housing.Median Value of Owner-Occupied Units</th>\n      <th id=\"T_776db_level0_col27\" class=\"col_heading level0 col27\" >Housing.Persons per Household</th>\n      <th id=\"T_776db_level0_col28\" class=\"col_heading level0 col28\" >Income.Median Houseold Income</th>\n      <th id=\"T_776db_level0_col29\" class=\"col_heading level0 col29\" >Income.Per Capita Income</th>\n      <th id=\"T_776db_level0_col30\" class=\"col_heading level0 col30\" >Income.Persons Below Poverty Level</th>\n      <th id=\"T_776db_level0_col31\" class=\"col_heading level0 col31\" >Miscellaneous.Foreign Born</th>\n      <th id=\"T_776db_level0_col32\" class=\"col_heading level0 col32\" >Miscellaneous.Land Area</th>\n      <th id=\"T_776db_level0_col33\" class=\"col_heading level0 col33\" >Miscellaneous.Language Other than English at Home</th>\n      <th id=\"T_776db_level0_col34\" class=\"col_heading level0 col34\" >Miscellaneous.Living in Same House +1 Years</th>\n      <th id=\"T_776db_level0_col35\" class=\"col_heading level0 col35\" >Miscellaneous.Manufacturers Shipments</th>\n      <th id=\"T_776db_level0_col36\" class=\"col_heading level0 col36\" >Miscellaneous.Mean Travel Time to Work</th>\n      <th id=\"T_776db_level0_col37\" class=\"col_heading level0 col37\" >Miscellaneous.Percent Female</th>\n      <th id=\"T_776db_level0_col38\" class=\"col_heading level0 col38\" >Miscellaneous.Percent Under 65 Years Without Health insurance</th>\n      <th id=\"T_776db_level0_col39\" class=\"col_heading level0 col39\" >Miscellaneous.Percent Under 66 Years With a Disability</th>\n      <th id=\"T_776db_level0_col40\" class=\"col_heading level0 col40\" >Miscellaneous.Veterans</th>\n      <th id=\"T_776db_level0_col41\" class=\"col_heading level0 col41\" >Population.2010 Population</th>\n      <th id=\"T_776db_level0_col42\" class=\"col_heading level0 col42\" >Population.2014 Population</th>\n      <th id=\"T_776db_level0_col43\" class=\"col_heading level0 col43\" >Population.Population Percent Change</th>\n      <th id=\"T_776db_level0_col44\" class=\"col_heading level0 col44\" >Population.Population per Square Mile</th>\n      <th id=\"T_776db_level0_col45\" class=\"col_heading level0 col45\" >Sales.Accommodation and Food Services Sales</th>\n      <th id=\"T_776db_level0_col46\" class=\"col_heading level0 col46\" >Sales.Retail Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_776db_level0_row0\" class=\"row_heading level0 row0\" >count</th>\n      <td id=\"T_776db_row0_col0\" class=\"data row0 col0\" >51.00</td>\n      <td id=\"T_776db_row0_col1\" class=\"data row0 col1\" >51.00</td>\n      <td id=\"T_776db_row0_col2\" class=\"data row0 col2\" >51.00</td>\n      <td id=\"T_776db_row0_col3\" class=\"data row0 col3\" >51.00</td>\n      <td id=\"T_776db_row0_col4\" class=\"data row0 col4\" >51.00</td>\n      <td id=\"T_776db_row0_col5\" class=\"data row0 col5\" >51.00</td>\n      <td id=\"T_776db_row0_col6\" class=\"data row0 col6\" >51.00</td>\n      <td id=\"T_776db_row0_col7\" class=\"data row0 col7\" >51.00</td>\n      <td id=\"T_776db_row0_col8\" class=\"data row0 col8\" >51.00</td>\n      <td id=\"T_776db_row0_col9\" class=\"data row0 col9\" >51.00</td>\n      <td id=\"T_776db_row0_col10\" class=\"data row0 col10\" >51.00</td>\n      <td id=\"T_776db_row0_col11\" class=\"data row0 col11\" >51.00</td>\n      <td id=\"T_776db_row0_col12\" class=\"data row0 col12\" >51.00</td>\n      <td id=\"T_776db_row0_col13\" class=\"data row0 col13\" >51.00</td>\n      <td id=\"T_776db_row0_col14\" class=\"data row0 col14\" >51.00</td>\n      <td id=\"T_776db_row0_col15\" class=\"data row0 col15\" >51.00</td>\n      <td id=\"T_776db_row0_col16\" class=\"data row0 col16\" >51.00</td>\n      <td id=\"T_776db_row0_col17\" class=\"data row0 col17\" >51.00</td>\n      <td id=\"T_776db_row0_col18\" class=\"data row0 col18\" >51.00</td>\n      <td id=\"T_776db_row0_col19\" class=\"data row0 col19\" >51.00</td>\n      <td id=\"T_776db_row0_col20\" class=\"data row0 col20\" >51.00</td>\n      <td id=\"T_776db_row0_col21\" class=\"data row0 col21\" >51.00</td>\n      <td id=\"T_776db_row0_col22\" class=\"data row0 col22\" >51.00</td>\n      <td id=\"T_776db_row0_col23\" class=\"data row0 col23\" >51.00</td>\n      <td id=\"T_776db_row0_col24\" class=\"data row0 col24\" >51.00</td>\n      <td id=\"T_776db_row0_col25\" class=\"data row0 col25\" >51.00</td>\n      <td id=\"T_776db_row0_col26\" class=\"data row0 col26\" >51.00</td>\n      <td id=\"T_776db_row0_col27\" class=\"data row0 col27\" >51.00</td>\n      <td id=\"T_776db_row0_col28\" class=\"data row0 col28\" >51.00</td>\n      <td id=\"T_776db_row0_col29\" class=\"data row0 col29\" >51.00</td>\n      <td id=\"T_776db_row0_col30\" class=\"data row0 col30\" >51.00</td>\n      <td id=\"T_776db_row0_col31\" class=\"data row0 col31\" >51.00</td>\n      <td id=\"T_776db_row0_col32\" class=\"data row0 col32\" >51.00</td>\n      <td id=\"T_776db_row0_col33\" class=\"data row0 col33\" >51.00</td>\n      <td id=\"T_776db_row0_col34\" class=\"data row0 col34\" >51.00</td>\n      <td id=\"T_776db_row0_col35\" class=\"data row0 col35\" >49.00</td>\n      <td id=\"T_776db_row0_col36\" class=\"data row0 col36\" >51.00</td>\n      <td id=\"T_776db_row0_col37\" class=\"data row0 col37\" >51.00</td>\n      <td id=\"T_776db_row0_col38\" class=\"data row0 col38\" >51.00</td>\n      <td id=\"T_776db_row0_col39\" class=\"data row0 col39\" >51.00</td>\n      <td id=\"T_776db_row0_col40\" class=\"data row0 col40\" >51.00</td>\n      <td id=\"T_776db_row0_col41\" class=\"data row0 col41\" >51.00</td>\n      <td id=\"T_776db_row0_col42\" class=\"data row0 col42\" >51.00</td>\n      <td id=\"T_776db_row0_col43\" class=\"data row0 col43\" >51.00</td>\n      <td id=\"T_776db_row0_col44\" class=\"data row0 col44\" >51.00</td>\n      <td id=\"T_776db_row0_col45\" class=\"data row0 col45\" >51.00</td>\n      <td id=\"T_776db_row0_col46\" class=\"data row0 col46\" >51.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_776db_level0_row1\" class=\"row_heading level0 row1\" >mean</th>\n      <td id=\"T_776db_row1_col0\" class=\"data row1 col0\" >16.88</td>\n      <td id=\"T_776db_row1_col1\" class=\"data row1 col1\" >22.14</td>\n      <td id=\"T_776db_row1_col2\" class=\"data row1 col2\" >5.96</td>\n      <td id=\"T_776db_row1_col3\" class=\"data row1 col3\" >31.77</td>\n      <td id=\"T_776db_row1_col4\" class=\"data row1 col4\" >89.54</td>\n      <td id=\"T_776db_row1_col5\" class=\"data row1 col5\" >292,380.10</td>\n      <td id=\"T_776db_row1_col6\" class=\"data row1 col6\" >156,032.14</td>\n      <td id=\"T_776db_row1_col7\" class=\"data row1 col7\" >373,752.12</td>\n      <td id=\"T_776db_row1_col8\" class=\"data row1 col8\" >473,326.00</td>\n      <td id=\"T_776db_row1_col9\" class=\"data row1 col9\" >545,254.90</td>\n      <td id=\"T_776db_row1_col10\" class=\"data row1 col10\" >49,611.88</td>\n      <td id=\"T_776db_row1_col11\" class=\"data row1 col11\" >193,842.12</td>\n      <td id=\"T_776db_row1_col12\" class=\"data row1 col12\" >519,324.16</td>\n      <td id=\"T_776db_row1_col13\" class=\"data row1 col13\" >2.01</td>\n      <td id=\"T_776db_row1_col14\" class=\"data row1 col14\" >4.55</td>\n      <td id=\"T_776db_row1_col15\" class=\"data row1 col15\" >11.87</td>\n      <td id=\"T_776db_row1_col16\" class=\"data row1 col16\" >12.25</td>\n      <td id=\"T_776db_row1_col17\" class=\"data row1 col17\" >0.40</td>\n      <td id=\"T_776db_row1_col18\" class=\"data row1 col18\" >3.11</td>\n      <td id=\"T_776db_row1_col19\" class=\"data row1 col19\" >78.07</td>\n      <td id=\"T_776db_row1_col20\" class=\"data row1 col20\" >67.67</td>\n      <td id=\"T_776db_row1_col21\" class=\"data row1 col21\" >65.67</td>\n      <td id=\"T_776db_row1_col22\" class=\"data row1 col22\" >2,367,765.65</td>\n      <td id=\"T_776db_row1_col23\" class=\"data row1 col23\" >82.05</td>\n      <td id=\"T_776db_row1_col24\" class=\"data row1 col24\" >89.98</td>\n      <td id=\"T_776db_row1_col25\" class=\"data row1 col25\" >2,738,906.75</td>\n      <td id=\"T_776db_row1_col26\" class=\"data row1 col26\" >233,176.47</td>\n      <td id=\"T_776db_row1_col27\" class=\"data row1 col27\" >2.56</td>\n      <td id=\"T_776db_row1_col28\" class=\"data row1 col28\" >63,097.86</td>\n      <td id=\"T_776db_row1_col29\" class=\"data row1 col29\" >33,743.06</td>\n      <td id=\"T_776db_row1_col30\" class=\"data row1 col30\" >12.17</td>\n      <td id=\"T_776db_row1_col31\" class=\"data row1 col31\" >9.41</td>\n      <td id=\"T_776db_row1_col32\" class=\"data row1 col32\" >69,253.05</td>\n      <td id=\"T_776db_row1_col33\" class=\"data row1 col33\" >14.98</td>\n      <td id=\"T_776db_row1_col34\" class=\"data row1 col34\" >85.24</td>\n      <td id=\"T_776db_row1_col35\" class=\"data row1 col35\" >116,411,562.24</td>\n      <td id=\"T_776db_row1_col36\" class=\"data row1 col36\" >24.80</td>\n      <td id=\"T_776db_row1_col37\" class=\"data row1 col37\" >50.60</td>\n      <td id=\"T_776db_row1_col38\" class=\"data row1 col38\" >9.96</td>\n      <td id=\"T_776db_row1_col39\" class=\"data row1 col39\" >9.16</td>\n      <td id=\"T_776db_row1_col40\" class=\"data row1 col40\" >357,457.29</td>\n      <td id=\"T_776db_row1_col41\" class=\"data row1 col41\" >6,053,834.08</td>\n      <td id=\"T_776db_row1_col42\" class=\"data row1 col42\" >6,499,005.51</td>\n      <td id=\"T_776db_row1_col43\" class=\"data row1 col43\" >5.15</td>\n      <td id=\"T_776db_row1_col44\" class=\"data row1 col44\" >384.40</td>\n      <td id=\"T_776db_row1_col45\" class=\"data row1 col45\" >13,885,070.55</td>\n      <td id=\"T_776db_row1_col46\" class=\"data row1 col46\" >82,741,605.31</td>\n    </tr>\n    <tr>\n      <th id=\"T_776db_level0_row2\" class=\"row_heading level0 row2\" >std</th>\n      <td id=\"T_776db_row2_col0\" class=\"data row2 col0\" >2.01</td>\n      <td id=\"T_776db_row2_col1\" class=\"data row2 col1\" >2.00</td>\n      <td id=\"T_776db_row2_col2\" class=\"data row2 col2\" >0.61</td>\n      <td id=\"T_776db_row2_col3\" class=\"data row2 col3\" >6.43</td>\n      <td id=\"T_776db_row2_col4\" class=\"data row2 col4\" >2.70</td>\n      <td id=\"T_776db_row2_col5\" class=\"data row2 col5\" >352,447.95</td>\n      <td id=\"T_776db_row2_col6\" class=\"data row2 col6\" >299,248.47</td>\n      <td id=\"T_776db_row2_col7\" class=\"data row2 col7\" >361,584.05</td>\n      <td id=\"T_776db_row2_col8\" class=\"data row2 col8\" >589,208.57</td>\n      <td id=\"T_776db_row2_col9\" class=\"data row2 col9\" >661,434.25</td>\n      <td id=\"T_776db_row2_col10\" class=\"data row2 col10\" >51,941.58</td>\n      <td id=\"T_776db_row2_col11\" class=\"data row2 col11\" >246,899.31</td>\n      <td id=\"T_776db_row2_col12\" class=\"data row2 col12\" >668,860.54</td>\n      <td id=\"T_776db_row2_col13\" class=\"data row2 col13\" >3.11</td>\n      <td id=\"T_776db_row2_col14\" class=\"data row2 col14\" >5.52</td>\n      <td id=\"T_776db_row2_col15\" class=\"data row2 col15\" >10.70</td>\n      <td id=\"T_776db_row2_col16\" class=\"data row2 col16\" >10.35</td>\n      <td id=\"T_776db_row2_col17\" class=\"data row2 col17\" >1.41</td>\n      <td id=\"T_776db_row2_col18\" class=\"data row2 col18\" >3.21</td>\n      <td id=\"T_776db_row2_col19\" class=\"data row2 col19\" >13.02</td>\n      <td id=\"T_776db_row2_col20\" class=\"data row2 col20\" >16.18</td>\n      <td id=\"T_776db_row2_col21\" class=\"data row2 col21\" >5.44</td>\n      <td id=\"T_776db_row2_col22\" class=\"data row2 col22\" >2,531,758.54</td>\n      <td id=\"T_776db_row2_col23\" class=\"data row2 col23\" >3.79</td>\n      <td id=\"T_776db_row2_col24\" class=\"data row2 col24\" >2.55</td>\n      <td id=\"T_776db_row2_col25\" class=\"data row2 col25\" >2,888,415.00</td>\n      <td id=\"T_776db_row2_col26\" class=\"data row2 col26\" >109,205.70</td>\n      <td id=\"T_776db_row2_col27\" class=\"data row2 col27\" >0.17</td>\n      <td id=\"T_776db_row2_col28\" class=\"data row2 col28\" >10,715.13</td>\n      <td id=\"T_776db_row2_col29\" class=\"data row2 col29\" >5,689.58</td>\n      <td id=\"T_776db_row2_col30\" class=\"data row2 col30\" >2.68</td>\n      <td id=\"T_776db_row2_col31\" class=\"data row2 col31\" >6.11</td>\n      <td id=\"T_776db_row2_col32\" class=\"data row2 col32\" >85,526.08</td>\n      <td id=\"T_776db_row2_col33\" class=\"data row2 col33\" >9.77</td>\n      <td id=\"T_776db_row2_col34\" class=\"data row2 col34\" >2.06</td>\n      <td id=\"T_776db_row2_col35\" class=\"data row2 col35\" >131,704,461.49</td>\n      <td id=\"T_776db_row2_col36\" class=\"data row2 col36\" >3.98</td>\n      <td id=\"T_776db_row2_col37\" class=\"data row2 col37\" >0.84</td>\n      <td id=\"T_776db_row2_col38\" class=\"data row2 col38\" >3.64</td>\n      <td id=\"T_776db_row2_col39\" class=\"data row2 col39\" >1.77</td>\n      <td id=\"T_776db_row2_col40\" class=\"data row2 col40\" >351,951.29</td>\n      <td id=\"T_776db_row2_col41\" class=\"data row2 col41\" >6,823,984.27</td>\n      <td id=\"T_776db_row2_col42\" class=\"data row2 col42\" >7,408,022.55</td>\n      <td id=\"T_776db_row2_col43\" class=\"data row2 col43\" >6.87</td>\n      <td id=\"T_776db_row2_col44\" class=\"data row2 col44\" >1,377.35</td>\n      <td id=\"T_776db_row2_col45\" class=\"data row2 col45\" >16,274,397.82</td>\n      <td id=\"T_776db_row2_col46\" class=\"data row2 col46\" >91,289,768.45</td>\n    </tr>\n    <tr>\n      <th id=\"T_776db_level0_row3\" class=\"row_heading level0 row3\" >min</th>\n      <td id=\"T_776db_row3_col0\" class=\"data row3 col0\" >11.40</td>\n      <td id=\"T_776db_row3_col1\" class=\"data row3 col1\" >18.20</td>\n      <td id=\"T_776db_row3_col2\" class=\"data row3 col2\" >4.70</td>\n      <td id=\"T_776db_row3_col3\" class=\"data row3 col3\" >20.60</td>\n      <td id=\"T_776db_row3_col4\" class=\"data row3 col4\" >83.30</td>\n      <td id=\"T_776db_row3_col5\" class=\"data row3 col5\" >30,039.00</td>\n      <td id=\"T_776db_row3_col6\" class=\"data row3 col6\" >2,354.00</td>\n      <td id=\"T_776db_row3_col7\" class=\"data row3 col7\" >29,521.00</td>\n      <td id=\"T_776db_row3_col8\" class=\"data row3 col8\" >51,353.00</td>\n      <td id=\"T_776db_row3_col9\" class=\"data row3 col9\" >62,427.00</td>\n      <td id=\"T_776db_row3_col10\" class=\"data row3 col10\" >5,070.00</td>\n      <td id=\"T_776db_row3_col11\" class=\"data row3 col11\" >19,344.00</td>\n      <td id=\"T_776db_row3_col12\" class=\"data row3 col12\" >53,042.00</td>\n      <td id=\"T_776db_row3_col13\" class=\"data row3 col13\" >0.30</td>\n      <td id=\"T_776db_row3_col14\" class=\"data row3 col14\" >0.80</td>\n      <td id=\"T_776db_row3_col15\" class=\"data row3 col15\" >0.60</td>\n      <td id=\"T_776db_row3_col16\" class=\"data row3 col16\" >1.70</td>\n      <td id=\"T_776db_row3_col17\" class=\"data row3 col17\" >0.00</td>\n      <td id=\"T_776db_row3_col18\" class=\"data row3 col18\" >1.30</td>\n      <td id=\"T_776db_row3_col19\" class=\"data row3 col19\" >25.50</td>\n      <td id=\"T_776db_row3_col20\" class=\"data row3 col20\" >21.70</td>\n      <td id=\"T_776db_row3_col21\" class=\"data row3 col21\" >41.60</td>\n      <td id=\"T_776db_row3_col22\" class=\"data row3 col22\" >230,101.00</td>\n      <td id=\"T_776db_row3_col23\" class=\"data row3 col23\" >71.50</td>\n      <td id=\"T_776db_row3_col24\" class=\"data row3 col24\" >83.80</td>\n      <td id=\"T_776db_row3_col25\" class=\"data row3 col25\" >280,291.00</td>\n      <td id=\"T_776db_row3_col26\" class=\"data row3 col26\" >119,000.00</td>\n      <td id=\"T_776db_row3_col27\" class=\"data row3 col27\" >2.30</td>\n      <td id=\"T_776db_row3_col28\" class=\"data row3 col28\" >45,081.00</td>\n      <td id=\"T_776db_row3_col29\" class=\"data row3 col29\" >24,369.00</td>\n      <td id=\"T_776db_row3_col30\" class=\"data row3 col30\" >7.30</td>\n      <td id=\"T_776db_row3_col31\" class=\"data row3 col31\" >1.70</td>\n      <td id=\"T_776db_row3_col32\" class=\"data row3 col32\" >61.05</td>\n      <td id=\"T_776db_row3_col33\" class=\"data row3 col33\" >2.60</td>\n      <td id=\"T_776db_row3_col34\" class=\"data row3 col34\" >80.50</td>\n      <td id=\"T_776db_row3_col35\" class=\"data row3 col35\" >309,832.00</td>\n      <td id=\"T_776db_row3_col36\" class=\"data row3 col36\" >17.20</td>\n      <td id=\"T_776db_row3_col37\" class=\"data row3 col37\" >47.90</td>\n      <td id=\"T_776db_row3_col38\" class=\"data row3 col38\" >3.50</td>\n      <td id=\"T_776db_row3_col39\" class=\"data row3 col39\" >6.40</td>\n      <td id=\"T_776db_row3_col40\" class=\"data row3 col40\" >26,156.00</td>\n      <td id=\"T_776db_row3_col41\" class=\"data row3 col41\" >563,626.00</td>\n      <td id=\"T_776db_row3_col42\" class=\"data row3 col42\" >576,851.00</td>\n      <td id=\"T_776db_row3_col43\" class=\"data row3 col43\" >-13.30</td>\n      <td id=\"T_776db_row3_col44\" class=\"data row3 col44\" >1.20</td>\n      <td id=\"T_776db_row3_col45\" class=\"data row3 col45\" >1,564,272.00</td>\n      <td id=\"T_776db_row3_col46\" class=\"data row3 col46\" >4,439,933.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_776db_level0_row4\" class=\"row_heading level0 row4\" >25%</th>\n      <td id=\"T_776db_row4_col0\" class=\"data row4 col0\" >16.10</td>\n      <td id=\"T_776db_row4_col1\" class=\"data row4 col1\" >21.05</td>\n      <td id=\"T_776db_row4_col2\" class=\"data row4 col2\" >5.70</td>\n      <td id=\"T_776db_row4_col3\" class=\"data row4 col3\" >27.85</td>\n      <td id=\"T_776db_row4_col4\" class=\"data row4 col4\" >87.30</td>\n      <td id=\"T_776db_row4_col5\" class=\"data row4 col5\" >73,924.00</td>\n      <td id=\"T_776db_row4_col6\" class=\"data row4 col6\" >14,722.00</td>\n      <td id=\"T_776db_row4_col7\" class=\"data row4 col7\" >126,135.00</td>\n      <td id=\"T_776db_row4_col8\" class=\"data row4 col8\" >120,076.50</td>\n      <td id=\"T_776db_row4_col9\" class=\"data row4 col9\" >143,106.00</td>\n      <td id=\"T_776db_row4_col10\" class=\"data row4 col10\" >14,892.50</td>\n      <td id=\"T_776db_row4_col11\" class=\"data row4 col11\" >44,787.00</td>\n      <td id=\"T_776db_row4_col12\" class=\"data row4 col12\" >121,633.00</td>\n      <td id=\"T_776db_row4_col13\" class=\"data row4 col13\" >0.50</td>\n      <td id=\"T_776db_row4_col14\" class=\"data row4 col14\" >1.80</td>\n      <td id=\"T_776db_row4_col15\" class=\"data row4 col15\" >3.65</td>\n      <td id=\"T_776db_row4_col16\" class=\"data row4 col16\" >5.30</td>\n      <td id=\"T_776db_row4_col17\" class=\"data row4 col17\" >0.10</td>\n      <td id=\"T_776db_row4_col18\" class=\"data row4 col18\" >2.10</td>\n      <td id=\"T_776db_row4_col19\" class=\"data row4 col19\" >71.25</td>\n      <td id=\"T_776db_row4_col20\" class=\"data row4 col20\" >57.40</td>\n      <td id=\"T_776db_row4_col21\" class=\"data row4 col21\" >64.10</td>\n      <td id=\"T_776db_row4_col22\" class=\"data row4 col22\" >681,296.50</td>\n      <td id=\"T_776db_row4_col23\" class=\"data row4 col23\" >80.70</td>\n      <td id=\"T_776db_row4_col24\" class=\"data row4 col24\" >88.80</td>\n      <td id=\"T_776db_row4_col25\" class=\"data row4 col25\" >801,166.00</td>\n      <td id=\"T_776db_row4_col26\" class=\"data row4 col26\" >159,750.00</td>\n      <td id=\"T_776db_row4_col27\" class=\"data row4 col27\" >2.46</td>\n      <td id=\"T_776db_row4_col28\" class=\"data row4 col28\" >55,560.50</td>\n      <td id=\"T_776db_row4_col29\" class=\"data row4 col29\" >30,276.50</td>\n      <td id=\"T_776db_row4_col30\" class=\"data row4 col30\" >10.10</td>\n      <td id=\"T_776db_row4_col31\" class=\"data row4 col31\" >4.75</td>\n      <td id=\"T_776db_row4_col32\" class=\"data row4 col32\" >33,334.51</td>\n      <td id=\"T_776db_row4_col33\" class=\"data row4 col33\" >7.30</td>\n      <td id=\"T_776db_row4_col34\" class=\"data row4 col34\" >83.95</td>\n      <td id=\"T_776db_row4_col35\" class=\"data row4 col35\" >24,553,072.00</td>\n      <td id=\"T_776db_row4_col36\" class=\"data row4 col36\" >22.25</td>\n      <td id=\"T_776db_row4_col37\" class=\"data row4 col37\" >50.20</td>\n      <td id=\"T_776db_row4_col38\" class=\"data row4 col38\" >7.30</td>\n      <td id=\"T_776db_row4_col39\" class=\"data row4 col39\" >7.85</td>\n      <td id=\"T_776db_row4_col40\" class=\"data row4 col40\" >116,811.50</td>\n      <td id=\"T_776db_row4_col41\" class=\"data row4 col41\" >1,696,961.50</td>\n      <td id=\"T_776db_row4_col42\" class=\"data row4 col42\" >1,816,411.00</td>\n      <td id=\"T_776db_row4_col43\" class=\"data row4 col43\" >1.95</td>\n      <td id=\"T_776db_row4_col44\" class=\"data row4 col44\" >45.80</td>\n      <td id=\"T_776db_row4_col45\" class=\"data row4 col45\" >4,171,798.50</td>\n      <td id=\"T_776db_row4_col46\" class=\"data row4 col46\" >23,908,598.50</td>\n    </tr>\n    <tr>\n      <th id=\"T_776db_level0_row5\" class=\"row_heading level0 row5\" >50%</th>\n      <td id=\"T_776db_row5_col0\" class=\"data row5 col0\" >16.90</td>\n      <td id=\"T_776db_row5_col1\" class=\"data row5 col1\" >22.10</td>\n      <td id=\"T_776db_row5_col2\" class=\"data row5 col2\" >6.00</td>\n      <td id=\"T_776db_row5_col3\" class=\"data row5 col3\" >31.30</td>\n      <td id=\"T_776db_row5_col4\" class=\"data row5 col4\" >90.20</td>\n      <td id=\"T_776db_row5_col5\" class=\"data row5 col5\" >187,845.00</td>\n      <td id=\"T_776db_row5_col6\" class=\"data row5 col6\" >61,252.00</td>\n      <td id=\"T_776db_row5_col7\" class=\"data row5 col7\" >276,269.00</td>\n      <td id=\"T_776db_row5_col8\" class=\"data row5 col8\" >288,790.00</td>\n      <td id=\"T_776db_row5_col9\" class=\"data row5 col9\" >339,305.00</td>\n      <td id=\"T_776db_row5_col10\" class=\"data row5 col10\" >36,273.00</td>\n      <td id=\"T_776db_row5_col11\" class=\"data row5 col11\" >123,015.00</td>\n      <td id=\"T_776db_row5_col12\" class=\"data row5 col12\" >302,653.00</td>\n      <td id=\"T_776db_row5_col13\" class=\"data row5 col13\" >0.70</td>\n      <td id=\"T_776db_row5_col14\" class=\"data row5 col14\" >3.00</td>\n      <td id=\"T_776db_row5_col15\" class=\"data row5 col15\" >8.50</td>\n      <td id=\"T_776db_row5_col16\" class=\"data row5 col16\" >9.80</td>\n      <td id=\"T_776db_row5_col17\" class=\"data row5 col17\" >0.10</td>\n      <td id=\"T_776db_row5_col18\" class=\"data row5 col18\" >2.40</td>\n      <td id=\"T_776db_row5_col19\" class=\"data row5 col19\" >80.60</td>\n      <td id=\"T_776db_row5_col20\" class=\"data row5 col20\" >71.10</td>\n      <td id=\"T_776db_row5_col21\" class=\"data row5 col21\" >66.30</td>\n      <td id=\"T_776db_row5_col22\" class=\"data row5 col22\" >1,734,618.00</td>\n      <td id=\"T_776db_row5_col23\" class=\"data row5 col23\" >82.50</td>\n      <td id=\"T_776db_row5_col24\" class=\"data row5 col24\" >89.90</td>\n      <td id=\"T_776db_row5_col25\" class=\"data row5 col25\" >2,006,358.00</td>\n      <td id=\"T_776db_row5_col26\" class=\"data row5 col26\" >194,500.00</td>\n      <td id=\"T_776db_row5_col27\" class=\"data row5 col27\" >2.52</td>\n      <td id=\"T_776db_row5_col28\" class=\"data row5 col28\" >61,439.00</td>\n      <td id=\"T_776db_row5_col29\" class=\"data row5 col29\" >32,176.00</td>\n      <td id=\"T_776db_row5_col30\" class=\"data row5 col30\" >11.80</td>\n      <td id=\"T_776db_row5_col31\" class=\"data row5 col31\" >7.20</td>\n      <td id=\"T_776db_row5_col32\" class=\"data row5 col32\" >53,624.76</td>\n      <td id=\"T_776db_row5_col33\" class=\"data row5 col33\" >11.80</td>\n      <td id=\"T_776db_row5_col34\" class=\"data row5 col34\" >85.30</td>\n      <td id=\"T_776db_row5_col35\" class=\"data row5 col35\" >81,927,799.00</td>\n      <td id=\"T_776db_row5_col36\" class=\"data row5 col36\" >24.80</td>\n      <td id=\"T_776db_row5_col37\" class=\"data row5 col37\" >50.70</td>\n      <td id=\"T_776db_row5_col38\" class=\"data row5 col38\" >9.30</td>\n      <td id=\"T_776db_row5_col39\" class=\"data row5 col39\" >8.90</td>\n      <td id=\"T_776db_row5_col40\" class=\"data row5 col40\" >270,775.00</td>\n      <td id=\"T_776db_row5_col41\" class=\"data row5 col41\" >4,339,367.00</td>\n      <td id=\"T_776db_row5_col42\" class=\"data row5 col42\" >4,505,836.00</td>\n      <td id=\"T_776db_row5_col43\" class=\"data row5 col43\" >4.10</td>\n      <td id=\"T_776db_row5_col44\" class=\"data row5 col44\" >101.20</td>\n      <td id=\"T_776db_row5_col45\" class=\"data row5 col45\" >9,542,068.00</td>\n      <td id=\"T_776db_row5_col46\" class=\"data row5 col46\" >54,869,978.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_776db_level0_row6\" class=\"row_heading level0 row6\" >75%</th>\n      <td id=\"T_776db_row6_col0\" class=\"data row6 col0\" >17.85</td>\n      <td id=\"T_776db_row6_col1\" class=\"data row6 col1\" >23.25</td>\n      <td id=\"T_776db_row6_col2\" class=\"data row6 col2\" >6.20</td>\n      <td id=\"T_776db_row6_col3\" class=\"data row6 col3\" >34.45</td>\n      <td id=\"T_776db_row6_col4\" class=\"data row6 col4\" >91.70</td>\n      <td id=\"T_776db_row6_col5\" class=\"data row6 col5\" >327,630.50</td>\n      <td id=\"T_776db_row6_col6\" class=\"data row6 col6\" >128,806.00</td>\n      <td id=\"T_776db_row6_col7\" class=\"data row6 col7\" >446,237.00</td>\n      <td id=\"T_776db_row6_col8\" class=\"data row6 col8\" >497,595.50</td>\n      <td id=\"T_776db_row6_col9\" class=\"data row6 col9\" >579,058.50</td>\n      <td id=\"T_776db_row6_col10\" class=\"data row6 col10\" >58,167.50</td>\n      <td id=\"T_776db_row6_col11\" class=\"data row6 col11\" >204,164.50</td>\n      <td id=\"T_776db_row6_col12\" class=\"data row6 col12\" >556,870.50</td>\n      <td id=\"T_776db_row6_col13\" class=\"data row6 col13\" >1.60</td>\n      <td id=\"T_776db_row6_col14\" class=\"data row6 col14\" >5.10</td>\n      <td id=\"T_776db_row6_col15\" class=\"data row6 col15\" >16.30</td>\n      <td id=\"T_776db_row6_col16\" class=\"data row6 col16\" >13.90</td>\n      <td id=\"T_776db_row6_col17\" class=\"data row6 col17\" >0.20</td>\n      <td id=\"T_776db_row6_col18\" class=\"data row6 col18\" >2.90</td>\n      <td id=\"T_776db_row6_col19\" class=\"data row6 col19\" >86.90</td>\n      <td id=\"T_776db_row6_col20\" class=\"data row6 col20\" >79.10</td>\n      <td id=\"T_776db_row6_col21\" class=\"data row6 col21\" >69.00</td>\n      <td id=\"T_776db_row6_col22\" class=\"data row6 col22\" >2,732,946.50</td>\n      <td id=\"T_776db_row6_col23\" class=\"data row6 col23\" >84.80</td>\n      <td id=\"T_776db_row6_col24\" class=\"data row6 col24\" >91.65</td>\n      <td id=\"T_776db_row6_col25\" class=\"data row6 col25\" >3,135,492.50</td>\n      <td id=\"T_776db_row6_col26\" class=\"data row6 col26\" >271,750.00</td>\n      <td id=\"T_776db_row6_col27\" class=\"data row6 col27\" >2.62</td>\n      <td id=\"T_776db_row6_col28\" class=\"data row6 col28\" >71,463.50</td>\n      <td id=\"T_776db_row6_col29\" class=\"data row6 col29\" >36,454.00</td>\n      <td id=\"T_776db_row6_col30\" class=\"data row6 col30\" >13.50</td>\n      <td id=\"T_776db_row6_col31\" class=\"data row6 col31\" >13.65</td>\n      <td id=\"T_776db_row6_col32\" class=\"data row6 col32\" >80,692.73</td>\n      <td id=\"T_776db_row6_col33\" class=\"data row6 col33\" >21.00</td>\n      <td id=\"T_776db_row6_col34\" class=\"data row6 col34\" >86.70</td>\n      <td id=\"T_776db_row6_col35\" class=\"data row6 col35\" >139,960,482.00</td>\n      <td id=\"T_776db_row6_col36\" class=\"data row6 col36\" >27.35</td>\n      <td id=\"T_776db_row6_col37\" class=\"data row6 col37\" >51.20</td>\n      <td id=\"T_776db_row6_col38\" class=\"data row6 col38\" >12.15</td>\n      <td id=\"T_776db_row6_col39\" class=\"data row6 col39\" >10.20</td>\n      <td id=\"T_776db_row6_col40\" class=\"data row6 col40\" >459,667.50</td>\n      <td id=\"T_776db_row6_col41\" class=\"data row6 col41\" >6,636,084.50</td>\n      <td id=\"T_776db_row6_col42\" class=\"data row6 col42\" >7,428,391.50</td>\n      <td id=\"T_776db_row6_col43\" class=\"data row6 col43\" >9.80</td>\n      <td id=\"T_776db_row6_col44\" class=\"data row6 col44\" >221.45</td>\n      <td id=\"T_776db_row6_col45\" class=\"data row6 col45\" >17,652,438.00</td>\n      <td id=\"T_776db_row6_col46\" class=\"data row6 col46\" >101,458,882.50</td>\n    </tr>\n    <tr>\n      <th id=\"T_776db_level0_row7\" class=\"row_heading level0 row7\" >max</th>\n      <td id=\"T_776db_row7_col0\" class=\"data row7 col0\" >21.20</td>\n      <td id=\"T_776db_row7_col1\" class=\"data row7 col1\" >29.00</td>\n      <td id=\"T_776db_row7_col2\" class=\"data row7 col2\" >7.70</td>\n      <td id=\"T_776db_row7_col3\" class=\"data row7 col3\" >58.50</td>\n      <td id=\"T_776db_row7_col4\" class=\"data row7 col4\" >93.60</td>\n      <td id=\"T_776db_row7_col5\" class=\"data row7 col5\" >1,852,580.00</td>\n      <td id=\"T_776db_row7_col6\" class=\"data row7 col6\" >1,619,857.00</td>\n      <td id=\"T_776db_row7_col7\" class=\"data row7 col7\" >1,819,107.00</td>\n      <td id=\"T_776db_row7_col8\" class=\"data row7 col8\" >3,176,341.00</td>\n      <td id=\"T_776db_row7_col9\" class=\"data row7 col9\" >3,548,449.00</td>\n      <td id=\"T_776db_row7_col10\" class=\"data row7 col10\" >252,377.00</td>\n      <td id=\"T_776db_row7_col11\" class=\"data row7 col11\" >1,320,085.00</td>\n      <td id=\"T_776db_row7_col12\" class=\"data row7 col12\" >3,453,769.00</td>\n      <td id=\"T_776db_row7_col13\" class=\"data row7 col13\" >15.60</td>\n      <td id=\"T_776db_row7_col14\" class=\"data row7 col14\" >37.60</td>\n      <td id=\"T_776db_row7_col15\" class=\"data row7 col15\" >46.00</td>\n      <td id=\"T_776db_row7_col16\" class=\"data row7 col16\" >49.30</td>\n      <td id=\"T_776db_row7_col17\" class=\"data row7 col17\" >10.10</td>\n      <td id=\"T_776db_row7_col18\" class=\"data row7 col18\" >24.20</td>\n      <td id=\"T_776db_row7_col19\" class=\"data row7 col19\" >94.40</td>\n      <td id=\"T_776db_row7_col20\" class=\"data row7 col20\" >93.00</td>\n      <td id=\"T_776db_row7_col21\" class=\"data row7 col21\" >73.20</td>\n      <td id=\"T_776db_row7_col22\" class=\"data row7 col22\" >13,044,266.00</td>\n      <td id=\"T_776db_row7_col23\" class=\"data row7 col23\" >88.30</td>\n      <td id=\"T_776db_row7_col24\" class=\"data row7 col24\" >95.30</td>\n      <td id=\"T_776db_row7_col25\" class=\"data row7 col25\" >14,366,336.00</td>\n      <td id=\"T_776db_row7_col26\" class=\"data row7 col26\" >615,300.00</td>\n      <td id=\"T_776db_row7_col27\" class=\"data row7 col27\" >3.12</td>\n      <td id=\"T_776db_row7_col28\" class=\"data row7 col28\" >86,420.00</td>\n      <td id=\"T_776db_row7_col29\" class=\"data row7 col29\" >56,147.00</td>\n      <td id=\"T_776db_row7_col30\" class=\"data row7 col30\" >19.60</td>\n      <td id=\"T_776db_row7_col31\" class=\"data row7 col31\" >26.80</td>\n      <td id=\"T_776db_row7_col32\" class=\"data row7 col32\" >570,640.95</td>\n      <td id=\"T_776db_row7_col33\" class=\"data row7 col33\" >44.20</td>\n      <td id=\"T_776db_row7_col34\" class=\"data row7 col34\" >89.80</td>\n      <td id=\"T_776db_row7_col35\" class=\"data row7 col35\" >702,603,073.00</td>\n      <td id=\"T_776db_row7_col36\" class=\"data row7 col36\" >33.60</td>\n      <td id=\"T_776db_row7_col37\" class=\"data row7 col37\" >52.60</td>\n      <td id=\"T_776db_row7_col38\" class=\"data row7 col38\" >20.80</td>\n      <td id=\"T_776db_row7_col39\" class=\"data row7 col39\" >14.00</td>\n      <td id=\"T_776db_row7_col40\" class=\"data row7 col40\" >1,574,531.00</td>\n      <td id=\"T_776db_row7_col41\" class=\"data row7 col41\" >37,253,956.00</td>\n      <td id=\"T_776db_row7_col42\" class=\"data row7 col42\" >39,538,223.00</td>\n      <td id=\"T_776db_row7_col43\" class=\"data row7 col43\" >17.30</td>\n      <td id=\"T_776db_row7_col44\" class=\"data row7 col44\" >9,856.50</td>\n      <td id=\"T_776db_row7_col45\" class=\"data row7 col45\" >90,830,372.00</td>\n      <td id=\"T_776db_row7_col46\" class=\"data row7 col46\" >481,800,461.00</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nThat's a pretty nice looking summary now!\n\n_Note: Do you see how we put that little pipeline in parentheses? This is so that we can separate operations on their own line, which can improve readability, and also let us add comments as needed._\n\nI want to make something clear. We haven't done anything to change the data frame that we imported.\n\n::: {#1eb98298 .cell execution_count=8}\n``` {.python .cell-code}\nstate_demographics.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>State</th>\n      <th>Population.Population Percent Change</th>\n      <th>Population.2014 Population</th>\n      <th>Population.2010 Population</th>\n      <th>Age.Percent Under 5 Years</th>\n      <th>Age.Percent Under 18 Years</th>\n      <th>Age.Percent 65 and Older</th>\n      <th>Miscellaneous.Percent Female</th>\n      <th>Ethnicities.White Alone</th>\n      <th>Ethnicities.Black Alone</th>\n      <th>...</th>\n      <th>Employment.Nonemployer Establishments</th>\n      <th>Employment.Firms.Total</th>\n      <th>Employment.Firms.Men-Owned</th>\n      <th>Employment.Firms.Women-Owned</th>\n      <th>Employment.Firms.Minority-Owned</th>\n      <th>Employment.Firms.Nonminority-Owned</th>\n      <th>Employment.Firms.Veteran-Owned</th>\n      <th>Employment.Firms.Nonveteran-Owned</th>\n      <th>Population.Population per Square Mile</th>\n      <th>Miscellaneous.Land Area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Connecticut</td>\n      <td>-10.2</td>\n      <td>3605944</td>\n      <td>3574097</td>\n      <td>5.1</td>\n      <td>20.4</td>\n      <td>17.7</td>\n      <td>51.2</td>\n      <td>79.7</td>\n      <td>12.2</td>\n      <td>...</td>\n      <td>286874</td>\n      <td>326693</td>\n      <td>187845</td>\n      <td>106678</td>\n      <td>56113</td>\n      <td>259614</td>\n      <td>31056</td>\n      <td>281182</td>\n      <td>738.1</td>\n      <td>4842.36</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Delaware</td>\n      <td>8.4</td>\n      <td>989948</td>\n      <td>897934</td>\n      <td>5.6</td>\n      <td>20.9</td>\n      <td>19.4</td>\n      <td>51.7</td>\n      <td>69.2</td>\n      <td>23.2</td>\n      <td>...</td>\n      <td>68623</td>\n      <td>73418</td>\n      <td>38328</td>\n      <td>23964</td>\n      <td>14440</td>\n      <td>54782</td>\n      <td>7206</td>\n      <td>60318</td>\n      <td>460.8</td>\n      <td>1948.54</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>District of Columbia</td>\n      <td>17.3</td>\n      <td>689545</td>\n      <td>601723</td>\n      <td>6.4</td>\n      <td>18.2</td>\n      <td>12.4</td>\n      <td>52.6</td>\n      <td>46.0</td>\n      <td>46.0</td>\n      <td>...</td>\n      <td>62583</td>\n      <td>63408</td>\n      <td>30237</td>\n      <td>27064</td>\n      <td>29983</td>\n      <td>29521</td>\n      <td>5070</td>\n      <td>54217</td>\n      <td>9856.5</td>\n      <td>61.05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Florida</td>\n      <td>14.2</td>\n      <td>21538187</td>\n      <td>18801310</td>\n      <td>5.3</td>\n      <td>19.7</td>\n      <td>20.9</td>\n      <td>51.1</td>\n      <td>77.3</td>\n      <td>16.9</td>\n      <td>...</td>\n      <td>2388050</td>\n      <td>2100187</td>\n      <td>1084885</td>\n      <td>807817</td>\n      <td>926112</td>\n      <td>1121749</td>\n      <td>185756</td>\n      <td>1846686</td>\n      <td>350.6</td>\n      <td>53624.76</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Georgia</td>\n      <td>9.6</td>\n      <td>10711908</td>\n      <td>9687653</td>\n      <td>6.2</td>\n      <td>23.6</td>\n      <td>14.3</td>\n      <td>51.4</td>\n      <td>60.2</td>\n      <td>32.6</td>\n      <td>...</td>\n      <td>955621</td>\n      <td>929864</td>\n      <td>480578</td>\n      <td>376506</td>\n      <td>371588</td>\n      <td>538893</td>\n      <td>96787</td>\n      <td>800585</td>\n      <td>168.4</td>\n      <td>57513.49</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 48 columns</p>\n</div>\n```\n:::\n:::\n\n\nAs you see, it's the same data frame we started with. All the functions we have used so far have returned new data frames. You will see this pattern a lot--many Pandas functions return new data rather modifying existing data.\n\n::: {#tip-07-why-summarize-data .callout-tip title=\"Stop & Think\" collapse=\"false\"}\nWhy is it a good idea to look at a summary of data that you imported?\n:::\n\n### Filtering Columns\n\nThis table has a lot of different kinds of data about state demographics. The nice thing is that each of the different categories is used as a prefix to the column name, e.g., data about income is prefixed with `Income`, data about population is prefixed with `Population`, and so on. We can leverage this labeling scheme to chop our data frame into more manageable chunks.\n\nWe can use the [filter()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.filter.html#pandas.DataFrame.filter) function to filter columns in a bunch of different ways. For now we will use the regular expression (regex) argument to specify that we want to match at the start of the column name. For example, getting all the data columns about ethnicities:\n\n::: {#4e1fcff8 .cell execution_count=9}\n``` {.python .cell-code}\n(\n    state_demographics\n    # Use set_index to convert the state column to the row names\n    .set_index(\"State\")\n    # Use filter() to keep columns matching the given pattern\n    .filter(regex=r\"^Ethnicities\")\n    # Only display the first 5 rows\n    .head()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Ethnicities.White Alone</th>\n      <th>Ethnicities.Black Alone</th>\n      <th>Ethnicities.American Indian and Alaska Native Alone</th>\n      <th>Ethnicities.Asian Alone</th>\n      <th>Ethnicities.Native Hawaiian and Other Pacific Islander Alone</th>\n      <th>Ethnicities.Two or More Races</th>\n      <th>Ethnicities.Hispanic or Latino</th>\n      <th>Ethnicities.White Alone, not Hispanic or Latino</th>\n    </tr>\n    <tr>\n      <th>State</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Connecticut</th>\n      <td>79.7</td>\n      <td>12.2</td>\n      <td>0.6</td>\n      <td>5.0</td>\n      <td>0.1</td>\n      <td>2.5</td>\n      <td>16.9</td>\n      <td>65.9</td>\n    </tr>\n    <tr>\n      <th>Delaware</th>\n      <td>69.2</td>\n      <td>23.2</td>\n      <td>0.7</td>\n      <td>4.1</td>\n      <td>0.1</td>\n      <td>2.7</td>\n      <td>9.6</td>\n      <td>61.7</td>\n    </tr>\n    <tr>\n      <th>District of Columbia</th>\n      <td>46.0</td>\n      <td>46.0</td>\n      <td>0.6</td>\n      <td>4.5</td>\n      <td>0.1</td>\n      <td>2.9</td>\n      <td>11.3</td>\n      <td>37.5</td>\n    </tr>\n    <tr>\n      <th>Florida</th>\n      <td>77.3</td>\n      <td>16.9</td>\n      <td>0.5</td>\n      <td>3.0</td>\n      <td>0.1</td>\n      <td>2.2</td>\n      <td>26.4</td>\n      <td>53.2</td>\n    </tr>\n    <tr>\n      <th>Georgia</th>\n      <td>60.2</td>\n      <td>32.6</td>\n      <td>0.5</td>\n      <td>4.4</td>\n      <td>0.1</td>\n      <td>2.2</td>\n      <td>9.9</td>\n      <td>52.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n_Note: If you need a refresher on regular expressions check out [Appendix 2 -- Regex](/chapters/A02_regex.qmd)._\n\nWe needed to use the `set_index()` here so that the state name would still be present on the resulting data frames.\n\nThis works for other categories as well. Here it is for `Income`:\n\n::: {#1a5ee556 .cell execution_count=10}\n``` {.python .cell-code}\nstate_demographics.set_index(\"State\").filter(regex=r\"^Income\").head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Income.Median Houseold Income</th>\n      <th>Income.Per Capita Income</th>\n      <th>Income.Persons Below Poverty Level</th>\n    </tr>\n    <tr>\n      <th>State</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Connecticut</th>\n      <td>78444</td>\n      <td>44496</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>Delaware</th>\n      <td>68287</td>\n      <td>35450</td>\n      <td>11.3</td>\n    </tr>\n    <tr>\n      <th>District of Columbia</th>\n      <td>86420</td>\n      <td>56147</td>\n      <td>13.5</td>\n    </tr>\n    <tr>\n      <th>Florida</th>\n      <td>55660</td>\n      <td>31619</td>\n      <td>12.7</td>\n    </tr>\n    <tr>\n      <th>Georgia</th>\n      <td>58700</td>\n      <td>31067</td>\n      <td>13.3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can pass these filtered tables to `describe()` and other functions as well:\n\n::: {#8852e221 .cell execution_count=11}\n``` {.python .cell-code}\nstate_demographics.set_index(\"State\").filter(regex=r\"^Income\").describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Income.Median Houseold Income</th>\n      <th>Income.Per Capita Income</th>\n      <th>Income.Persons Below Poverty Level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>51.000000</td>\n      <td>51.000000</td>\n      <td>51.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>63097.862745</td>\n      <td>33743.058824</td>\n      <td>12.170588</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>10715.134497</td>\n      <td>5689.577086</td>\n      <td>2.678006</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>45081.000000</td>\n      <td>24369.000000</td>\n      <td>7.300000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>55560.500000</td>\n      <td>30276.500000</td>\n      <td>10.100000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>61439.000000</td>\n      <td>32176.000000</td>\n      <td>11.800000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>71463.500000</td>\n      <td>36454.000000</td>\n      <td>13.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>86420.000000</td>\n      <td>56147.000000</td>\n      <td>19.600000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis is another way that we can start to get a feel for our data.\n\n::: {#tip-07-why-filter-columns .callout-tip title=\"Stop & Think\" collapse=\"false\"}\nWhy might filtering columns by category prefixes (like \"Population\" or \"Income\") be useful during exploratory data analysis?\n:::\n\n### Exploring Your Data\n\nNow that we have a basic idea of what our data looks like, we can start to explore it a bit more. The best place to start is to actually look at the data. Pandas gives you the ability to create basic charts without having to use a 3rd-party package. As long as you don't want anything too complex, it will be fine to start with.\n\n#### Basic Population Plots\n\nLet's start by plotting some basic state population info. We can use Panda's [plot()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot) function for this:\n\n::: {#2c0d8f96 .cell execution_count=12}\n``` {.python .cell-code}\n(\n    state_demographics\n    # Take only the columns that start with Population.201X, where X is some digit\n    # E.g., Population.2010, or Population.2014.\n    .filter(regex=r\"^Population\\.201\\d\")\n    # Draw a bar plot\n    .plot(kind=\"bar\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-13-output-1.png){}\n:::\n:::\n\n\nThat's not bad, but the axes are a bit weird. Let's adjust them. The simplest way to do that is to be more specific about which data we will need in our chart. Then, we can explicitly set the x and y axes.\n\n::: {#61689534 .cell execution_count=13}\n``` {.python .cell-code}\n# Make a list of the columns that we want to keep\ncolumns = [\"State\", \"Population.2010 Population\", \"Population.2014 Population\"]\n\n# Use the \"bracket notation\" to select only those columns specified in the list we just\n# created.\nplot_data = (\n    state_demographics[columns]\n    # Rename the population columns to something shorter.\n    # It will make the chart legends look nicer.\n    .rename(\n        # We want to rename columns.  The keys of this dictionary are the old column\n        # names, and the values are the new column names.\n        columns={\n            \"Population.2010 Population\": \"2010 Population\",\n            \"Population.2014 Population\": \"2014 Population\",\n        }\n    )\n)\n\n# Plot the data subset\nplot_data.plot(\n    # Make it a bar chart\n    kind=\"bar\",\n    # Put \"State\" on the x-axis\n    x=\"State\",\n    # And put both population columns on the y-axis\n    y=[\"2010 Population\", \"2014 Population\"],\n    figsize=(8, 3),\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-14-output-1.png){}\n:::\n:::\n\n\nNot bad! The plotting function was smart enough to put both population data series on the chart, and to include a nice legend so that we can tell them apart.\n\nAt least we have the State names on the x-axis now, but they are pretty smooshed together. There are a bunch of ways we could fix it:\n\n- Shrink the label size\n- Adjust the chart proportions\n- Use a horizontal bar chart (and adjust the proportions)\n\nShrinking the label size:\n\n::: {#2be55045 .cell execution_count=14}\n``` {.python .cell-code}\nplot_data.plot(\n    kind=\"bar\",\n    x=\"State\",\n    y=[\"2010 Population\", \"2014 Population\"],\n    fontsize=6,\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-15-output-1.png){}\n:::\n:::\n\n\nThat works, but now the labels are tiny, and it shrunk both the x and y axis labels. You can shrink just the x-axis tick labels, but to do so you need to \"eject\" out of the pandas API and drop down into [matplotlib](https://matplotlib.org/) code.\n\n::: {#a8667347 .cell execution_count=15}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Create your plot\nax = plot_data.plot(\n    kind=\"bar\",\n    x=\"State\",\n    y=[\"2010 Population\", \"2014 Population\"],\n)\n\n# Adjust only x-axis tick labels\n# 8 is the fontsize, adjust it as needed\nax.tick_params(axis=\"x\", labelsize=8)\n\n# Show the chart\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-16-output-1.png){}\n:::\n:::\n\n\n_Don't worry too much about the details of this. I just wanted to show you that the plots returned by Pandas are really matplotlib objects, and can be interacted with in the usual way when required._\n\nLet's adjust the figure proportions next:\n\n::: {#cd3e60c9 .cell execution_count=16}\n``` {.python .cell-code}\nplot_data.plot(\n    kind=\"bar\",\n    x=\"State\",\n    y=[\"2010 Population\", \"2014 Population\"],\n    # Set the width to 8 units, and the height to 3\n    figsize=(8, 3),\n    # Set the font size of all tick labels to 9\n    fontsize=9\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-17-output-1.png){}\n:::\n:::\n\n\nThat's fairly readable. Above, I mentioned how long data and plots tend to fit better on the screen both in your reports and when actively doing the analysis. So let's switch to a horizontal bar chart. That way, we can give the states a little more room on the plot.\n\n::: {#82d74951 .cell execution_count=17}\n``` {.python .cell-code}\nplot_data.plot(\n    # Draw a horizontal bar chart. Note the `h` at the end of `barh`.\n    kind=\"barh\",\n    x=\"State\",\n    y=[\"2010 Population\", \"2014 Population\"],\n    figsize=(5, 8),\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-18-output-1.png){}\n:::\n:::\n\n\n_Note: You might find it a little weird that we still specify `State` as the x values and `Population` as the `y` values, even thought the chart shows the on the opposite axis. Just roll with it :)_\n\nThat's looking pretty good now! You might think it is a little bit weird for the state names to be going in reverse alphabetical order as you go down the page. I suppose this is chosen because in \"normal\" math plots, the origin is 0, and the values \"increase\" as you move away from the origin. However, it just feels weird for it to do this when the y-axis is categorical rather than continuous. So let's reverse it.\n\n::: {#8ca30f8f .cell execution_count=18}\n``` {.python .cell-code}\n(\n    plot_data\n    # Reverse sort the rows based on the State column\n    .sort_values(\"State\", ascending=False).plot(\n        kind=\"barh\",\n        x=\"State\",\n        y=[\"2010 Population\", \"2014 Population\"],\n        figsize=(5, 8),\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-19-output-1.png){}\n:::\n:::\n\n\nOne last thing. Let's add an axis label to the x-axis. I know there is a legend there, but I think it is still good practice to label all axes in a plot.\n\n::: {#81797eaa .cell execution_count=19}\n``` {.python .cell-code}\n(\n    plot_data\n    # Reverse sort the rows based on the State column\n    .sort_values(\"State\", ascending=False).plot(\n        kind=\"barh\",\n        x=\"State\",\n        y=[\"2010 Population\", \"2014 Population\"],\n        figsize=(5, 8),\n        xlabel=\"Population\"\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-20-output-1.png){}\n:::\n:::\n\n\nThat's what I'm talking about! As you can see, with just a few lines of code, you can make totally reasonable looking plots.\n\nDepending on your use case, you might want to sort the data so that the bars are always decreasing. That way, it's easier for the viewer to look at overall trends, rather than being able to quickly pick out specific states.\n\nTo do this we will sort by population. However, we are plotting two different years on the chart, so we need to decide which way to sort it. Reasonable options might be:\n\n- Pick one of the years and sort by that one\n- Sort by the mean\n- Sort by the max\n\nAny of them could work depending on your situation, but let's keep it simple and sort by the 2014 population:\n\n::: {#57da9dc4 .cell execution_count=20}\n``` {.python .cell-code}\n(\n    plot_data\n    # Reverse sort the rows based on the State column\n    .sort_values(\"2014 Population\").plot(\n        kind=\"barh\",\n        x=\"State\",\n        y=[\"2010 Population\", \"2014 Population\"],\n        figsize=(5, 8),\n        xlabel=\"Population\",\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-21-output-1.png){}\n:::\n:::\n\n\n::: {#tip-07-why-nice-plots .callout-tip title=\"Stop & Think\" collapse=\"false\"}\nWhy might it be important to have clean, professional looking data visualizations, even during the exploratory data analysis phase of your project?\n:::\n\n#### Percent Population Change\n\nNotice any trends? One thing that we can kind of see is that there are some states that look like they had bigger population changes than other states. One of our data columns already tracks this: `Population.Population Percent Change`. Let's take a look at the basic plot. We will use a lot of the same options as we did in the last one.\n\n::: {#6c9bd33c .cell execution_count=21}\n``` {.python .cell-code}\nstate_demographics.plot(\n    kind=\"barh\",\n    x=\"State\",\n    y=\"Population.Population Percent Change\",\n    figsize=(5, 8),\n    xlabel=\"Population\",\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-22-output-1.png){}\n:::\n:::\n\n\nThis plot is pretty good, but we can do better with a bit more effort. Here's a couple things that will improve it:\n\n- Remove the legend since there is only one series to plot\n- Adjust the bar color so that population increase blue and decrease is orange\n- Sort states from most increase to most decrease\n\n::: {#a8a42bce .cell execution_count=22}\n``` {.python .cell-code}\nplot_data = state_demographics[\n    [\"State\", \"Population.Population Percent Change\"]\n].sort_values(\"Population.Population Percent Change\")\n\n# Create list with colors based on positive/negative values\ncolors = [\n    # Negative values will be orange, positive values will be blue\n    \"tab:orange\" if x < 0 else \"tab:blue\"\n    # Do this calculation for each value in the series that we want to plot.\n    for x in plot_data[\"Population.Population Percent Change\"]\n]\n\n\nplot_data.plot(\n    kind=\"barh\",\n    x=\"State\",\n    y=\"Population.Population Percent Change\",\n    figsize=(5, 8),\n    xlabel=\"Population Change (%)\",\n    # Specify the list of colors to use\n    color=colors,\n    # Remove the legend\n    legend=False,\n)\n# Put a gray line at x=0 to help guide the viewer's attention.\nplt.axvline(x=0, color=\"#666666\")\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-23-output-1.png){}\n:::\n:::\n\n\nTo adjust the colors, we had to create a list of colors the same length as the data that we wanted to plot. In this way, each row will be given its correct color.\n\n_Note: `tab:blue` and `tab:orange` are built-in colors in [matplotlib](https://matplotlib.org/stable/gallery/color/color_cycle_default.html#sphx-glr-gallery-color-color-cycle-default-py)._\n\n_Note: You can specify these labeled arguments in any order._\n\nThat's really not a bad plot! I wonder if the states with the biggest population changes were already some of the most populous states?\n\n::: {#5889b146 .cell execution_count=23}\n``` {.python .cell-code}\nstate_demographics.plot(\n    kind=\"scatter\",\n    x=\"Population.2010 Population\",\n    y=\"Population.Population Percent Change\",\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-24-output-1.png){}\n:::\n:::\n\n\nDoesn't look like a super strong trend there, but let's log the x scale as maybe orders of magnitude matter here.\n\n::: {#b26fb22a .cell execution_count=24}\n``` {.python .cell-code}\nstate_demographics.plot(\n    kind=\"scatter\",\n    x=\"Population.2010 Population\",\n    y=\"Population.Population Percent Change\",\n    # Log the x axis\n    logx=True,\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-25-output-1.png){}\n:::\n:::\n\n\nNope, nothing there.\n\n::: {#tip-07-log-scale-purpose .callout-tip title=\"Stop & Think\" collapse=\"false\"}\nWhen might you use a logarithmic scale on either axis of a plot, and what insights can this reveal that a linear scale might not?\n:::\n\nDo you think any of the state demographic data is correlated with the percent population change? To try and answer this question, we can calculate all the correlation values for the columns in the state demographics data frame.\n\n::: {#8d6cea83 .cell execution_count=25}\n``` {.python .cell-code}\n# Get the correlation between columns in the data frame\ncorrelation_matrix = state_demographics.corr(\n    # Restrict the calculation to only numeric columns\n    numeric_only=True\n)\n```\n:::\n\n\n::: {#tip-07-what-correlation-tells-us .callout-tip title=\"Stop & Think\" collapse=\"false\"}\nWhat can correlation values tell us during exploratory data analysis, and what are their limitations?\n:::\n\nNow that we have the correlation values, let's take a look at them. First, we need to make a data frame with the data in a nice format that makes it easy to plot the data.\n\n::: {#d22dc4f0 .cell execution_count=26}\n``` {.python .cell-code}\n# Display the correlations values between the percent population change and the other\n# variables.\nplot_data = (\n    # Select only the percent change column\n    correlation_matrix[[\"Population.Population Percent Change\"]]\n    # Then sort the rows based on their correlation to the percent population change\n    .sort_values(\"Population.Population Percent Change\")\n    # Remove the Population.Population Percent Change row from the results, since\n    # we don't care about the \"self-correlation\"\n    .drop(\"Population.Population Percent Change\")\n    # Convert the row names to a column called \"Variable\"\n    .reset_index(names=\"Variable\")\n    # Rename the 2nd column for a nicer looking chart\n    .rename(columns={\"Population.Population Percent Change\": \"Correlation\"})\n)\nplot_data\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Variable</th>\n      <th>Correlation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Miscellaneous.Living in Same House +1 Years</td>\n      <td>-0.690011</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Age.Percent 65 and Older</td>\n      <td>-0.423079</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Housing.Homeownership Rate</td>\n      <td>-0.343682</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Miscellaneous.Percent Under 66 Years With a Di...</td>\n      <td>-0.306390</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Ethnicities.White Alone, not Hispanic or Latino</td>\n      <td>-0.269663</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>Housing.Persons per Household</td>\n      <td>0.277861</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>Age.Percent Under 18 Years</td>\n      <td>0.323823</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>Miscellaneous.Percent Under 65 Years Without H...</td>\n      <td>0.330227</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Housing.Households with a computer</td>\n      <td>0.455228</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>Age.Percent Under 5 Years</td>\n      <td>0.459584</td>\n    </tr>\n  </tbody>\n</table>\n<p>46 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n_Note: earlier we used `drop()` to remove columns. Now you see that it can also be used to drop rows, depending on the arguments used. You will find Pandas has a lot of functions like this._\n\nNext, we can create a list of colors for the bars of the plot. We want to color variables with a positive correlation to the percent population change blue, and a negative correlation orange.\n\n::: {#e1ef9f96 .cell execution_count=27}\n``` {.python .cell-code}\n# Create list with colors based on positive/negative values\ncolors = [\n    # Negative values will be orange, positive values will be blue\n    \"tab:orange\" if x < 0 else \"tab:blue\"\n    # Do this calculation for each correlation value in the series.\n    for x in plot_data[\"Correlation\"]\n]\n```\n:::\n\n\nFinally, let's make the plot. The code will be very similar to the previous plots we have made.\n\n::: {#d96c7fac .cell execution_count=28}\n``` {.python .cell-code}\nplot_data.plot(\n    kind=\"barh\",\n    x=\"Variable\",\n    y=\"Correlation\",\n    figsize=(5, 10),\n    xlabel=\"Correlation with Percent Population Change\",\n    legend=False,\n    color=colors,\n)\nplt.axvline(x=0, color=\"#666666\")\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-29-output-1.png){}\n:::\n:::\n\n\nThat's nice! Do you see any interesting trends?\n\n- Age data\n  - Increasing proportion of young population is strongly correlated with positive population change\n  - Increasing proportion of elderly population is highly correlated with decreasing population.\n  - Makes sense...\n- Ethnicity data\n  - These are all positively correlated with population change: \"Hispanic or Latino\", \"Languages other than English at home\", \"Foreign Born\".\n  - In contrast, \"White Alone\" and \"White Alone, not Hispanic or Latino\" are negatively correlated with population change.\n  - Is this suggesting immigration is driving some of the population growth?\n- Education & Income data\n  - \"Households with a computer\", \"Households with internet\", \"Bachelor's Degree or Higher\" are positively correlated with population change\n  - \"Persons Below Poverty Level\" is negatively correlated with population change\n  - Maybe it's suggesting people are moving to more educated or prosperous areas?\n\nThese are all avenues that you might want to take a look at if this data was important to your research.\n\nAs you can see, there are a lot variables there and most of them have pretty weak correlation. This is a good time to show you how to filter rows based on some criteria of the data. Let's filter out any rows that have correlation values between -0.15 and 0.15. To do this, we can use [query()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query):\n\n::: {#c6db0e0a .cell execution_count=29}\n``` {.python .cell-code}\nplot_data_with_some_correlation = plot_data.query(\n    \"Correlation < -0.15 or Correlation > 0.15\"\n)\n```\n:::\n\n\nThe `query()` function is very cool and highly flexible and dynamic. We will see a few more examples of it later in the tutorial. For now, just know that you can access columns of your data frame and use them to filter rows in a natural looking way.\n\nOnce we have the filtered data, we can regenerate the color list, and plot the data.\n\n::: {#bcc5935c .cell execution_count=30}\n``` {.python .cell-code}\n# We need to redo the colors again.\ncolors = [\n    \"tab:orange\" if x < 0 else \"tab:blue\"\n    for x in plot_data_with_some_correlation[\"Correlation\"]\n]\n\nplot_data_with_some_correlation.plot(\n    kind=\"barh\",\n    x=\"Variable\",\n    y=\"Correlation\",\n    figsize=(5, 10),\n    xlabel=\"Correlation with Percent Population Change\",\n    legend=False,\n    color=colors,\n)\nplt.axvline(x=0, color=\"#666666\")\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-31-output-1.png){}\n:::\n:::\n\n\nIt's generally not a good idea to take correlation values at face value: it doesn't measure all types of dependencies and it can be tempting to assign causation to things that have high correlation. So for correlation, it's always a good idea to look at your data whenever possible. Let's do that now with some of the most highly correlated or anti-correlated variables. We are going to use [seaborn](https://seaborn.pydata.org/) for this, as it makes it super simple to compare multiple variables in a single plot. We can even put regression lines with confidence intervals on the plots by setting the `kind=\"reg\"` argument!\n\nHere is a plot containing some of the most highly correlated variables:\n\n::: {#bb4cd26e .cell execution_count=31}\n``` {.python .cell-code}\ncolumns = [\n    \"Population.Population Percent Change\",\n    \"Age.Percent Under 5 Years\",\n    \"Housing.Households with a computer\",\n    \"Ethnicities.Hispanic or Latino\",\n]\nsns.pairplot(\n    state_demographics[columns],\n    kind=\"reg\",\n    x_vars=columns[0],\n    y_vars=columns[1:],\n    height=4,\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-32-output-1.png){}\n:::\n:::\n\n\nAnd one with the most highly anti-correlated variables:\n\n::: {#da128549 .cell execution_count=32}\n``` {.python .cell-code}\ncolumns = [\n    \"Population.Population Percent Change\",\n    \"Ethnicities.White Alone, not Hispanic or Latino\",\n    \"Age.Percent 65 and Older\",\n    \"Miscellaneous.Living in Same House +1 Years\",\n]\nsns.pairplot(\n    state_demographics[columns],\n    kind=\"reg\",\n    x_vars=columns[0],\n    y_vars=columns[1:],\n    height=4,\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-33-output-1.png){}\n:::\n:::\n\n\nNeat, at least we have discovered a couple of variables that we may want to look into. One definite potential issue I see here is that the states that have dropped in population seem to be off on their own in all these plots. It would probably be a good idea to see if we are violating any major assumptions of the basic linear model with them, or at least see if they (or any other points) have too much leverage and are misleading us. But that is a topic for a different course!\n\nBefore we move on, let's do one more thing with correlation as it is so common: a correlation heatmap! We can use seaborn's [clustermap()](https://seaborn.pydata.org/generated/seaborn.clustermap.html) for this:\n\n::: {#fedf5eb9 .cell execution_count=33}\n``` {.python .cell-code}\nclustermap_plot = sns.clustermap(\n    correlation_matrix,\n    # Specify the complete linkage for calculating clusters\n    method=\"complete\",\n    # The relative space the dendrograms will occupy\n    dendrogram_ratio=0.05,\n    # Use the \"icefire\" diverging palette\n    cmap=\"icefire\",\n    # Make sure the min color value occurs at -1\n    vmin=-1,\n    # Make sure the max color value occurs at 1\n    vmax=1,\n    figsize=(12, 12),\n    # Remove the x-axis tick labels\n    xticklabels=True,\n    # Remove the y-axis tick labels\n    yticklabels=True,\n    # Set the options for the color palette legend\n    cbar_kws={\n        \"label\": \"Correlation\",  # Set the label for the color palette legend\n        \"location\": \"bottom\",  # Set the location of the color palette legend\n    },\n    # Set the location for the color palette legend\n    # This is for top left\n    # cbar_pos=(\n    #     0.03,  # Distance from the left\n    #     0.92,  # Distance from the bottom\n    #     0.10,  # Width\n    #     0.05,  # Height\n    # ),\n    cbar_pos=(\n        0.65,  # Distance from the left\n        0.20,  # Distance from the bottom\n        0.25,  # Width\n        0.14,  # Height\n    ),\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-34-output-1.png){}\n:::\n:::\n\n\nCool! There are a couple things to note about this:\n\n- One important consideration is setting the minimum and maximum values of your color palette. While you don't always need to adjust these parameters (and sometimes only need to set one or two of them), being aware of this option is important. Making these adjustments ensures the most informative part of your color palette corresponds to the most relevant range in your data.\n- For fine-tuning your colorbar, check out the `cbar_kws` parameter, which passes arguments directly to matplotlib's [colorbar()](https://matplotlib.org/stable/api/_as_gen/matplotlib.figure.Figure.colorbar.html) method. This pattern of documentation referral is something you'll encounter frequently in the Python ecosystem. Libraries will often direct you to another component's documentation for parameter details, especially when they're simply passing those arguments through to underlying functions.\n- Don't forget about customizing your clustering approach! The linkage type and distance metric can impact your hierarchical clustering results. The [SciPy documentation](https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.hierarchy.linkage.html#scipy.cluster.hierarchy.linkage) provides comprehensive details on these options, allowing you to select methods that best represent the relationships in your data.\n\n::: {#tip-07-good-color-palette .callout-tip title=\"Stop & Think\" collapse=\"false\"}\nWhy is it important to ensure that your color palettes represent the correct data? For example,\n\n- How would it change your interpretation if the center of the palette (the black part) was on 0.2 rather than zero?\n- How would it change your interpretation if the brightest blue was -0.2 but the brightest orange was 1.0?\n\n:::\n\nThere is a lot to unpack with this figure, but the most obvious thing that I see is that blob of bright orange in the bottom right. If you look at the data in those columns, you will see that they are numbers with real magnitude that will be pretty highly influenced by the number of people in the state. A lot of the other columns are not like this. Wouldn't it be interesting to take those counting-style numbers and normalize them by the state population? E.g., something like manufacturers shipments per 10k people. Let's do that now.\n\n::: {#3a211d00 .cell execution_count=34}\n``` {.python .cell-code}\n# Make a copy of the state demographics data\nnormalized_state_demographics = state_demographics.copy()\n\n# These are the columns that we want to divide by the population\ncolumns = [\n    \"Employment.Firms.Men-Owned\",\n    \"Employment.Firms.Minority-Owned\",\n    \"Employment.Firms.Nonminority-Owned\",\n    \"Employment.Firms.Nonveteran-Owned\",\n    \"Employment.Firms.Total\",\n    \"Employment.Firms.Veteran-Owned\",\n    \"Employment.Firms.Women-Owned\",\n    \"Employment.Nonemployer Establishments\",\n    \"Housing.Households\",\n    \"Housing.Housing Units\",\n    \"Miscellaneous.Manufacturers Shipments\",\n    \"Miscellaneous.Veterans\",\n    \"Sales.Accommodation and Food Services Sales\",\n    \"Sales.Retail Sales\",\n]\n\n# Loop through each of the columns\nfor column in columns:\n    # Normalize the data: X / Population * 10,000 people\n    normalized_data = (\n        normalized_state_demographics[column]\n        / state_demographics[\"Population.2010 Population\"]\n        * 10_000\n    )\n    # Replace the original column with the normalized column\n    normalized_state_demographics[column] = normalized_data\n```\n:::\n\n\nNow that we have normalized data, we can generate the correlation matrix and plot the heatmap.\n\n::: {#9830a836 .cell execution_count=35}\n``` {.python .cell-code}\n# Generate a correlation matrix of the numeric columns\ncorrelation_matrix = normalized_state_demographics.corr(numeric_only=True)\n\n# Draw the clustered heatmap\nclustermap_plot = sns.clustermap(\n    correlation_matrix,\n    # Specify the complete linkage for calculating clusters\n    method=\"complete\",\n    # The relative space the dendrograms will occupy\n    dendrogram_ratio=0.05,\n    # Use the \"icefire\" diverging palette\n    cmap=\"icefire\",\n    # Make sure the min color value occurs at -1\n    vmin=-1,\n    # Make sure the max color value occurs at 1\n    vmax=1,\n    figsize=(12, 12),\n    # Remove the x-axis tick labels\n    xticklabels=True,\n    # Remove the y-axis tick labels\n    yticklabels=True,\n    # Set the options for the color palette legend\n    cbar_kws={\n        \"label\": \"Correlation\",  # Set the label for the color palette legend\n        \"location\": \"bottom\",  # Set the location of the color palette legend\n    },\n    # Set the location for the color palette legend\n    cbar_pos=(\n        0.65,  # Distance from the left\n        0.20,  # Distance from the bottom\n        0.25,  # Width\n        0.14,  # Height\n    ),\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-36-output-1.png){}\n:::\n:::\n\n\nAfter \"normalizing out\" the effect of population on a bunch of the variables, we can see some trends that were a bit masked before. For example, we can now see some correlation between education, wealth, and income, as well as some potentially interesting trends around ethnicity and age.\n\n::: {#tip-07-why-correlation-heatmap .callout-tip title=\"Stop & Think\" collapse=\"false\"}\nWhat insights can a correlation heatmap with clustering provide that a simple correlation table cannot?\n:::\n\n### State Demographics Wrap-Up\n\nWe went over a lot of material in this section! I hope it gave you a sense of how exploratory data analysis can go using Pandas and Seaborn: you begin by exploring the data to get a sense of it, identify patterns and trends, and then dive deeper into those patterns to better understand the system you're analyzing.\n\n## Cancer data\n\nNow that you have a basic understanding of using Pandas for EDA, let's take a look at some public health data.\n\nWe're going to look at the [cancer data](https://corgis-edu.github.io/corgis/csv/cancer/) from CORGIS. This dataset contains information about cancer deaths between 2007 and 2013 in each state. Specifically, these are deaths from breast, lung, and colorectal cancer. In addition to the total death rate, the rates have also been broken down by age, race, and sex.\n\n### Basic Info\n\nTo start, we need to read the CSV file with the cancer data.\n\n::: {#d685b1f3 .cell execution_count=36}\n``` {.python .cell-code}\ncancer = pd.read_csv(\"../_data/cancer.csv\")\ncancer.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>State</th>\n      <th>Total.Rate</th>\n      <th>Total.Number</th>\n      <th>Total.Population</th>\n      <th>Rates.Age.&lt; 18</th>\n      <th>Rates.Age.18-45</th>\n      <th>Rates.Age.45-64</th>\n      <th>Rates.Age.&gt; 64</th>\n      <th>Rates.Age and Sex.Female.&lt; 18</th>\n      <th>Rates.Age and Sex.Male.&lt; 18</th>\n      <th>...</th>\n      <th>Types.Lung.Age and Sex.Male.45 - 64</th>\n      <th>Types.Lung.Age and Sex.Female.&gt; 64</th>\n      <th>Types.Lung.Age and Sex.Male.&gt; 64</th>\n      <th>Types.Lung.Race.White</th>\n      <th>Types.Lung.Race.White non-Hispanic</th>\n      <th>Types.Lung.Race.Black</th>\n      <th>Types.Lung.Race.Black non-Hispanic</th>\n      <th>Types.Lung.Race.Asian</th>\n      <th>Types.Lung.Race.Indigenous</th>\n      <th>Types.Lung.Race.Hispanic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alabama</td>\n      <td>214.2</td>\n      <td>71529.0</td>\n      <td>33387205.0</td>\n      <td>2.0</td>\n      <td>18.5</td>\n      <td>244.7</td>\n      <td>1017.8</td>\n      <td>2.0</td>\n      <td>2.1</td>\n      <td>...</td>\n      <td>102.9</td>\n      <td>221.7</td>\n      <td>457.4</td>\n      <td>59.9</td>\n      <td>60.4</td>\n      <td>52.6</td>\n      <td>52.8</td>\n      <td>23.0</td>\n      <td>22.9</td>\n      <td>14.8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alaska</td>\n      <td>128.1</td>\n      <td>6361.0</td>\n      <td>4966180.0</td>\n      <td>1.7</td>\n      <td>11.8</td>\n      <td>170.9</td>\n      <td>965.2</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>50.3</td>\n      <td>268.3</td>\n      <td>335.0</td>\n      <td>48.7</td>\n      <td>49.5</td>\n      <td>45.6</td>\n      <td>47.9</td>\n      <td>33.0</td>\n      <td>74.4</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arizona</td>\n      <td>165.6</td>\n      <td>74286.0</td>\n      <td>44845598.0</td>\n      <td>2.5</td>\n      <td>13.6</td>\n      <td>173.6</td>\n      <td>840.2</td>\n      <td>2.6</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>47.0</td>\n      <td>191.9</td>\n      <td>275.8</td>\n      <td>39.5</td>\n      <td>42.2</td>\n      <td>38.2</td>\n      <td>40.4</td>\n      <td>21.3</td>\n      <td>11.1</td>\n      <td>21.6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arkansas</td>\n      <td>223.9</td>\n      <td>45627.0</td>\n      <td>20382448.0</td>\n      <td>2.3</td>\n      <td>17.6</td>\n      <td>250.1</td>\n      <td>1048.3</td>\n      <td>2.6</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>106.5</td>\n      <td>248.7</td>\n      <td>484.7</td>\n      <td>63.4</td>\n      <td>64.2</td>\n      <td>62.9</td>\n      <td>63.0</td>\n      <td>18.1</td>\n      <td>16.2</td>\n      <td>14.6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>California</td>\n      <td>150.9</td>\n      <td>393980.0</td>\n      <td>261135696.0</td>\n      <td>2.6</td>\n      <td>13.7</td>\n      <td>163.7</td>\n      <td>902.4</td>\n      <td>2.4</td>\n      <td>2.8</td>\n      <td>...</td>\n      <td>36.8</td>\n      <td>192.5</td>\n      <td>269.0</td>\n      <td>37.2</td>\n      <td>42.6</td>\n      <td>46.5</td>\n      <td>48.6</td>\n      <td>25.8</td>\n      <td>18.4</td>\n      <td>18.3</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 75 columns</p>\n</div>\n```\n:::\n:::\n\n\nLike before, we will use `describe()` to get a basic overview of the numeric data columns.\n\n::: {#1219f66e .cell execution_count=37}\n``` {.python .cell-code}\ncancer.describe().style.format(precision=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_bb5f7\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_bb5f7_level0_col0\" class=\"col_heading level0 col0\" >Total.Rate</th>\n      <th id=\"T_bb5f7_level0_col1\" class=\"col_heading level0 col1\" >Total.Number</th>\n      <th id=\"T_bb5f7_level0_col2\" class=\"col_heading level0 col2\" >Total.Population</th>\n      <th id=\"T_bb5f7_level0_col3\" class=\"col_heading level0 col3\" >Rates.Age.< 18</th>\n      <th id=\"T_bb5f7_level0_col4\" class=\"col_heading level0 col4\" >Rates.Age.18-45</th>\n      <th id=\"T_bb5f7_level0_col5\" class=\"col_heading level0 col5\" >Rates.Age.45-64</th>\n      <th id=\"T_bb5f7_level0_col6\" class=\"col_heading level0 col6\" >Rates.Age.> 64</th>\n      <th id=\"T_bb5f7_level0_col7\" class=\"col_heading level0 col7\" >Rates.Age and Sex.Female.< 18</th>\n      <th id=\"T_bb5f7_level0_col8\" class=\"col_heading level0 col8\" >Rates.Age and Sex.Male.< 18</th>\n      <th id=\"T_bb5f7_level0_col9\" class=\"col_heading level0 col9\" >Rates.Age and Sex.Female.18 - 45</th>\n      <th id=\"T_bb5f7_level0_col10\" class=\"col_heading level0 col10\" >Rates.Age and Sex.Male.18 - 45</th>\n      <th id=\"T_bb5f7_level0_col11\" class=\"col_heading level0 col11\" >Rates.Age and Sex.Female.45 - 64</th>\n      <th id=\"T_bb5f7_level0_col12\" class=\"col_heading level0 col12\" >Rates.Age and Sex.Male.45 - 64</th>\n      <th id=\"T_bb5f7_level0_col13\" class=\"col_heading level0 col13\" >Rates.Age and Sex.Female.> 64</th>\n      <th id=\"T_bb5f7_level0_col14\" class=\"col_heading level0 col14\" >Rates.Age and Sex.Male.> 64</th>\n      <th id=\"T_bb5f7_level0_col15\" class=\"col_heading level0 col15\" >Rates.Race.White</th>\n      <th id=\"T_bb5f7_level0_col16\" class=\"col_heading level0 col16\" >Rates.Race.White non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col17\" class=\"col_heading level0 col17\" >Rates.Race.Black</th>\n      <th id=\"T_bb5f7_level0_col18\" class=\"col_heading level0 col18\" >Rates.Race.Asian</th>\n      <th id=\"T_bb5f7_level0_col19\" class=\"col_heading level0 col19\" >Rates.Race.Indigenous</th>\n      <th id=\"T_bb5f7_level0_col20\" class=\"col_heading level0 col20\" >Rates.Race and Sex.Female.White</th>\n      <th id=\"T_bb5f7_level0_col21\" class=\"col_heading level0 col21\" >Rates.Race and Sex.Female.White non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col22\" class=\"col_heading level0 col22\" >Rates.Race and Sex.Female.Black</th>\n      <th id=\"T_bb5f7_level0_col23\" class=\"col_heading level0 col23\" >Rates.Race and Sex.Female.Black non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col24\" class=\"col_heading level0 col24\" >Rates.Race and Sex.Female.Asian</th>\n      <th id=\"T_bb5f7_level0_col25\" class=\"col_heading level0 col25\" >Rates.Race and Sex.Female.Indigenous</th>\n      <th id=\"T_bb5f7_level0_col26\" class=\"col_heading level0 col26\" >Rates.Race and Sex.Male.White</th>\n      <th id=\"T_bb5f7_level0_col27\" class=\"col_heading level0 col27\" >Rates.Race and Sex.Male.White non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col28\" class=\"col_heading level0 col28\" >Rates.Race and Sex.Male.Black</th>\n      <th id=\"T_bb5f7_level0_col29\" class=\"col_heading level0 col29\" >Rates.Race and Sex.Male.Black non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col30\" class=\"col_heading level0 col30\" >Rates.Race and Sex.Male.Asian</th>\n      <th id=\"T_bb5f7_level0_col31\" class=\"col_heading level0 col31\" >Rates.Race and Sex.Male.Indigenous</th>\n      <th id=\"T_bb5f7_level0_col32\" class=\"col_heading level0 col32\" >Rates.Race.Hispanic</th>\n      <th id=\"T_bb5f7_level0_col33\" class=\"col_heading level0 col33\" >Rates.Race and Sex.Female.Hispanic</th>\n      <th id=\"T_bb5f7_level0_col34\" class=\"col_heading level0 col34\" >Rates.Race and Sex.Male.Hispanic</th>\n      <th id=\"T_bb5f7_level0_col35\" class=\"col_heading level0 col35\" >Types.Breast.Total</th>\n      <th id=\"T_bb5f7_level0_col36\" class=\"col_heading level0 col36\" >Types.Breast.Age.18 - 44</th>\n      <th id=\"T_bb5f7_level0_col37\" class=\"col_heading level0 col37\" >Types.Breast.Age.45 - 64</th>\n      <th id=\"T_bb5f7_level0_col38\" class=\"col_heading level0 col38\" >Types.Breast.Age.> 64</th>\n      <th id=\"T_bb5f7_level0_col39\" class=\"col_heading level0 col39\" >Types.Breast.Race.White</th>\n      <th id=\"T_bb5f7_level0_col40\" class=\"col_heading level0 col40\" >Types.Breast.Race.White non-Hispanic </th>\n      <th id=\"T_bb5f7_level0_col41\" class=\"col_heading level0 col41\" >Types.Breast.Race.Black</th>\n      <th id=\"T_bb5f7_level0_col42\" class=\"col_heading level0 col42\" >Types.Breast.Race.Black non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col43\" class=\"col_heading level0 col43\" >Types.Breast.Race.Asian</th>\n      <th id=\"T_bb5f7_level0_col44\" class=\"col_heading level0 col44\" >Types.Breast.Race.Indigenous</th>\n      <th id=\"T_bb5f7_level0_col45\" class=\"col_heading level0 col45\" >Types.Breast.Race.Hispanic</th>\n      <th id=\"T_bb5f7_level0_col46\" class=\"col_heading level0 col46\" >Types.Colorectal.Total</th>\n      <th id=\"T_bb5f7_level0_col47\" class=\"col_heading level0 col47\" >Types.Colorectal.Age and Sex.Female.18 - 44</th>\n      <th id=\"T_bb5f7_level0_col48\" class=\"col_heading level0 col48\" >Types.Colorectal.Age and Sex.Male.18 - 44</th>\n      <th id=\"T_bb5f7_level0_col49\" class=\"col_heading level0 col49\" >Types.Colorectal.Age and Sex.Female.45 - 64</th>\n      <th id=\"T_bb5f7_level0_col50\" class=\"col_heading level0 col50\" >Types.Colorectal.Age and Sex.Male.45 - 64</th>\n      <th id=\"T_bb5f7_level0_col51\" class=\"col_heading level0 col51\" >Types.Colorectal.Age and Sex.Female.> 64</th>\n      <th id=\"T_bb5f7_level0_col52\" class=\"col_heading level0 col52\" >Types.Colorectal.Age and Sex.Male.> 64</th>\n      <th id=\"T_bb5f7_level0_col53\" class=\"col_heading level0 col53\" >Types.Colorectal.Race.White</th>\n      <th id=\"T_bb5f7_level0_col54\" class=\"col_heading level0 col54\" >Types.Colorectal.Race.White non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col55\" class=\"col_heading level0 col55\" >Types.Colorectal.Race.Black</th>\n      <th id=\"T_bb5f7_level0_col56\" class=\"col_heading level0 col56\" >Types.Colorectal.Race.Black non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col57\" class=\"col_heading level0 col57\" >Types.Colorectal.Race.Asian</th>\n      <th id=\"T_bb5f7_level0_col58\" class=\"col_heading level0 col58\" >Types.Colorectal.Race.Indigenous</th>\n      <th id=\"T_bb5f7_level0_col59\" class=\"col_heading level0 col59\" >Types.Colorectal.Race.Hispanic</th>\n      <th id=\"T_bb5f7_level0_col60\" class=\"col_heading level0 col60\" >Types.Lung.Total</th>\n      <th id=\"T_bb5f7_level0_col61\" class=\"col_heading level0 col61\" >Types.Lung.Age and Sex.Female.18 - 44</th>\n      <th id=\"T_bb5f7_level0_col62\" class=\"col_heading level0 col62\" >Types.Lung.Age and Sex.Male.18 - 44</th>\n      <th id=\"T_bb5f7_level0_col63\" class=\"col_heading level0 col63\" >Types.Lung.Age and Sex.Female.45 - 64</th>\n      <th id=\"T_bb5f7_level0_col64\" class=\"col_heading level0 col64\" >Types.Lung.Age and Sex.Male.45 - 64</th>\n      <th id=\"T_bb5f7_level0_col65\" class=\"col_heading level0 col65\" >Types.Lung.Age and Sex.Female.> 64</th>\n      <th id=\"T_bb5f7_level0_col66\" class=\"col_heading level0 col66\" >Types.Lung.Age and Sex.Male.> 64</th>\n      <th id=\"T_bb5f7_level0_col67\" class=\"col_heading level0 col67\" >Types.Lung.Race.White</th>\n      <th id=\"T_bb5f7_level0_col68\" class=\"col_heading level0 col68\" >Types.Lung.Race.White non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col69\" class=\"col_heading level0 col69\" >Types.Lung.Race.Black</th>\n      <th id=\"T_bb5f7_level0_col70\" class=\"col_heading level0 col70\" >Types.Lung.Race.Black non-Hispanic</th>\n      <th id=\"T_bb5f7_level0_col71\" class=\"col_heading level0 col71\" >Types.Lung.Race.Asian</th>\n      <th id=\"T_bb5f7_level0_col72\" class=\"col_heading level0 col72\" >Types.Lung.Race.Indigenous</th>\n      <th id=\"T_bb5f7_level0_col73\" class=\"col_heading level0 col73\" >Types.Lung.Race.Hispanic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_bb5f7_level0_row0\" class=\"row_heading level0 row0\" >count</th>\n      <td id=\"T_bb5f7_row0_col0\" class=\"data row0 col0\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col1\" class=\"data row0 col1\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col2\" class=\"data row0 col2\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col3\" class=\"data row0 col3\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col4\" class=\"data row0 col4\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col5\" class=\"data row0 col5\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col6\" class=\"data row0 col6\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col7\" class=\"data row0 col7\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col8\" class=\"data row0 col8\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col9\" class=\"data row0 col9\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col10\" class=\"data row0 col10\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col11\" class=\"data row0 col11\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col12\" class=\"data row0 col12\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col13\" class=\"data row0 col13\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col14\" class=\"data row0 col14\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col15\" class=\"data row0 col15\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col16\" class=\"data row0 col16\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col17\" class=\"data row0 col17\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col18\" class=\"data row0 col18\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col19\" class=\"data row0 col19\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col20\" class=\"data row0 col20\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col21\" class=\"data row0 col21\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col22\" class=\"data row0 col22\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col23\" class=\"data row0 col23\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col24\" class=\"data row0 col24\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col25\" class=\"data row0 col25\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col26\" class=\"data row0 col26\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col27\" class=\"data row0 col27\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col28\" class=\"data row0 col28\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col29\" class=\"data row0 col29\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col30\" class=\"data row0 col30\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col31\" class=\"data row0 col31\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col32\" class=\"data row0 col32\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col33\" class=\"data row0 col33\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col34\" class=\"data row0 col34\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col35\" class=\"data row0 col35\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col36\" class=\"data row0 col36\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col37\" class=\"data row0 col37\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col38\" class=\"data row0 col38\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col39\" class=\"data row0 col39\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col40\" class=\"data row0 col40\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col41\" class=\"data row0 col41\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col42\" class=\"data row0 col42\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col43\" class=\"data row0 col43\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col44\" class=\"data row0 col44\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col45\" class=\"data row0 col45\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col46\" class=\"data row0 col46\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col47\" class=\"data row0 col47\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col48\" class=\"data row0 col48\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col49\" class=\"data row0 col49\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col50\" class=\"data row0 col50\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col51\" class=\"data row0 col51\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col52\" class=\"data row0 col52\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col53\" class=\"data row0 col53\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col54\" class=\"data row0 col54\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col55\" class=\"data row0 col55\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col56\" class=\"data row0 col56\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col57\" class=\"data row0 col57\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col58\" class=\"data row0 col58\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col59\" class=\"data row0 col59\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col60\" class=\"data row0 col60\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col61\" class=\"data row0 col61\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col62\" class=\"data row0 col62\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col63\" class=\"data row0 col63\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col64\" class=\"data row0 col64\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col65\" class=\"data row0 col65\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col66\" class=\"data row0 col66\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col67\" class=\"data row0 col67\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col68\" class=\"data row0 col68\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col69\" class=\"data row0 col69\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col70\" class=\"data row0 col70\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col71\" class=\"data row0 col71\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col72\" class=\"data row0 col72\" >51.0</td>\n      <td id=\"T_bb5f7_row0_col73\" class=\"data row0 col73\" >51.0</td>\n    </tr>\n    <tr>\n      <th id=\"T_bb5f7_level0_row1\" class=\"row_heading level0 row1\" >mean</th>\n      <td id=\"T_bb5f7_row1_col0\" class=\"data row1 col0\" >190.7</td>\n      <td id=\"T_bb5f7_row1_col1\" class=\"data row1 col1\" >78723.7</td>\n      <td id=\"T_bb5f7_row1_col2\" class=\"data row1 col2\" >42401510.5</td>\n      <td id=\"T_bb5f7_row1_col3\" class=\"data row1 col3\" >2.1</td>\n      <td id=\"T_bb5f7_row1_col4\" class=\"data row1 col4\" >14.8</td>\n      <td id=\"T_bb5f7_row1_col5\" class=\"data row1 col5\" >197.6</td>\n      <td id=\"T_bb5f7_row1_col6\" class=\"data row1 col6\" >980.9</td>\n      <td id=\"T_bb5f7_row1_col7\" class=\"data row1 col7\" >1.7</td>\n      <td id=\"T_bb5f7_row1_col8\" class=\"data row1 col8\" >2.0</td>\n      <td id=\"T_bb5f7_row1_col9\" class=\"data row1 col9\" >16.0</td>\n      <td id=\"T_bb5f7_row1_col10\" class=\"data row1 col10\" >13.5</td>\n      <td id=\"T_bb5f7_row1_col11\" class=\"data row1 col11\" >177.8</td>\n      <td id=\"T_bb5f7_row1_col12\" class=\"data row1 col12\" >218.3</td>\n      <td id=\"T_bb5f7_row1_col13\" class=\"data row1 col13\" >826.7</td>\n      <td id=\"T_bb5f7_row1_col14\" class=\"data row1 col14\" >1181.8</td>\n      <td id=\"T_bb5f7_row1_col15\" class=\"data row1 col15\" >171.0</td>\n      <td id=\"T_bb5f7_row1_col16\" class=\"data row1 col16\" >173.2</td>\n      <td id=\"T_bb5f7_row1_col17\" class=\"data row1 col17\" >182.8</td>\n      <td id=\"T_bb5f7_row1_col18\" class=\"data row1 col18\" >99.0</td>\n      <td id=\"T_bb5f7_row1_col19\" class=\"data row1 col19\" >111.1</td>\n      <td id=\"T_bb5f7_row1_col20\" class=\"data row1 col20\" >145.6</td>\n      <td id=\"T_bb5f7_row1_col21\" class=\"data row1 col21\" >147.7</td>\n      <td id=\"T_bb5f7_row1_col22\" class=\"data row1 col22\" >142.7</td>\n      <td id=\"T_bb5f7_row1_col23\" class=\"data row1 col23\" >146.6</td>\n      <td id=\"T_bb5f7_row1_col24\" class=\"data row1 col24\" >85.0</td>\n      <td id=\"T_bb5f7_row1_col25\" class=\"data row1 col25\" >88.7</td>\n      <td id=\"T_bb5f7_row1_col26\" class=\"data row1 col26\" >206.4</td>\n      <td id=\"T_bb5f7_row1_col27\" class=\"data row1 col27\" >208.7</td>\n      <td id=\"T_bb5f7_row1_col28\" class=\"data row1 col28\" >222.9</td>\n      <td id=\"T_bb5f7_row1_col29\" class=\"data row1 col29\" >228.2</td>\n      <td id=\"T_bb5f7_row1_col30\" class=\"data row1 col30\" >107.2</td>\n      <td id=\"T_bb5f7_row1_col31\" class=\"data row1 col31\" >129.6</td>\n      <td id=\"T_bb5f7_row1_col32\" class=\"data row1 col32\" >98.2</td>\n      <td id=\"T_bb5f7_row1_col33\" class=\"data row1 col33\" >82.2</td>\n      <td id=\"T_bb5f7_row1_col34\" class=\"data row1 col34\" >115.5</td>\n      <td id=\"T_bb5f7_row1_col35\" class=\"data row1 col35\" >26.0</td>\n      <td id=\"T_bb5f7_row1_col36\" class=\"data row1 col36\" >4.0</td>\n      <td id=\"T_bb5f7_row1_col37\" class=\"data row1 col37\" >34.9</td>\n      <td id=\"T_bb5f7_row1_col38\" class=\"data row1 col38\" >102.3</td>\n      <td id=\"T_bb5f7_row1_col39\" class=\"data row1 col39\" >21.2</td>\n      <td id=\"T_bb5f7_row1_col40\" class=\"data row1 col40\" >21.6</td>\n      <td id=\"T_bb5f7_row1_col41\" class=\"data row1 col41\" >22.6</td>\n      <td id=\"T_bb5f7_row1_col42\" class=\"data row1 col42\" >23.2</td>\n      <td id=\"T_bb5f7_row1_col43\" class=\"data row1 col43\" >6.0</td>\n      <td id=\"T_bb5f7_row1_col44\" class=\"data row1 col44\" >5.0</td>\n      <td id=\"T_bb5f7_row1_col45\" class=\"data row1 col45\" >8.6</td>\n      <td id=\"T_bb5f7_row1_col46\" class=\"data row1 col46\" >17.5</td>\n      <td id=\"T_bb5f7_row1_col47\" class=\"data row1 col47\" >1.1</td>\n      <td id=\"T_bb5f7_row1_col48\" class=\"data row1 col48\" >1.5</td>\n      <td id=\"T_bb5f7_row1_col49\" class=\"data row1 col49\" >14.7</td>\n      <td id=\"T_bb5f7_row1_col50\" class=\"data row1 col50\" >21.4</td>\n      <td id=\"T_bb5f7_row1_col51\" class=\"data row1 col51\" >81.8</td>\n      <td id=\"T_bb5f7_row1_col52\" class=\"data row1 col52\" >101.5</td>\n      <td id=\"T_bb5f7_row1_col53\" class=\"data row1 col53\" >15.2</td>\n      <td id=\"T_bb5f7_row1_col54\" class=\"data row1 col54\" >15.4</td>\n      <td id=\"T_bb5f7_row1_col55\" class=\"data row1 col55\" >17.0</td>\n      <td id=\"T_bb5f7_row1_col56\" class=\"data row1 col56\" >17.4</td>\n      <td id=\"T_bb5f7_row1_col57\" class=\"data row1 col57\" >7.0</td>\n      <td id=\"T_bb5f7_row1_col58\" class=\"data row1 col58\" >6.9</td>\n      <td id=\"T_bb5f7_row1_col59\" class=\"data row1 col59\" >8.2</td>\n      <td id=\"T_bb5f7_row1_col60\" class=\"data row1 col60\" >53.2</td>\n      <td id=\"T_bb5f7_row1_col61\" class=\"data row1 col61\" >1.3</td>\n      <td id=\"T_bb5f7_row1_col62\" class=\"data row1 col62\" >1.4</td>\n      <td id=\"T_bb5f7_row1_col63\" class=\"data row1 col63\" >45.6</td>\n      <td id=\"T_bb5f7_row1_col64\" class=\"data row1 col64\" >64.8</td>\n      <td id=\"T_bb5f7_row1_col65\" class=\"data row1 col65\" >224.7</td>\n      <td id=\"T_bb5f7_row1_col66\" class=\"data row1 col66\" >355.0</td>\n      <td id=\"T_bb5f7_row1_col67\" class=\"data row1 col67\" >48.2</td>\n      <td id=\"T_bb5f7_row1_col68\" class=\"data row1 col68\" >49.3</td>\n      <td id=\"T_bb5f7_row1_col69\" class=\"data row1 col69\" >44.1</td>\n      <td id=\"T_bb5f7_row1_col70\" class=\"data row1 col70\" >44.5</td>\n      <td id=\"T_bb5f7_row1_col71\" class=\"data row1 col71\" >19.3</td>\n      <td id=\"T_bb5f7_row1_col72\" class=\"data row1 col72\" >27.3</td>\n      <td id=\"T_bb5f7_row1_col73\" class=\"data row1 col73\" >16.2</td>\n    </tr>\n    <tr>\n      <th id=\"T_bb5f7_level0_row2\" class=\"row_heading level0 row2\" >std</th>\n      <td id=\"T_bb5f7_row2_col0\" class=\"data row2 col0\" >28.6</td>\n      <td id=\"T_bb5f7_row2_col1\" class=\"data row2 col1\" >80861.3</td>\n      <td id=\"T_bb5f7_row2_col2\" class=\"data row2 col2\" >47842444.3</td>\n      <td id=\"T_bb5f7_row2_col3\" class=\"data row2 col3\" >0.5</td>\n      <td id=\"T_bb5f7_row2_col4\" class=\"data row2 col4\" >2.2</td>\n      <td id=\"T_bb5f7_row2_col5\" class=\"data row2 col5\" >31.3</td>\n      <td id=\"T_bb5f7_row2_col6\" class=\"data row2 col6\" >75.2</td>\n      <td id=\"T_bb5f7_row2_col7\" class=\"data row2 col7\" >0.8</td>\n      <td id=\"T_bb5f7_row2_col8\" class=\"data row2 col8\" >0.9</td>\n      <td id=\"T_bb5f7_row2_col9\" class=\"data row2 col9\" >2.5</td>\n      <td id=\"T_bb5f7_row2_col10\" class=\"data row2 col10\" >2.0</td>\n      <td id=\"T_bb5f7_row2_col11\" class=\"data row2 col11\" >23.0</td>\n      <td id=\"T_bb5f7_row2_col12\" class=\"data row2 col12\" >41.0</td>\n      <td id=\"T_bb5f7_row2_col13\" class=\"data row2 col13\" >65.4</td>\n      <td id=\"T_bb5f7_row2_col14\" class=\"data row2 col14\" >105.2</td>\n      <td id=\"T_bb5f7_row2_col15\" class=\"data row2 col15\" >15.0</td>\n      <td id=\"T_bb5f7_row2_col16\" class=\"data row2 col16\" >15.0</td>\n      <td id=\"T_bb5f7_row2_col17\" class=\"data row2 col17\" >48.7</td>\n      <td id=\"T_bb5f7_row2_col18\" class=\"data row2 col18\" >21.6</td>\n      <td id=\"T_bb5f7_row2_col19\" class=\"data row2 col19\" >68.3</td>\n      <td id=\"T_bb5f7_row2_col20\" class=\"data row2 col20\" >11.4</td>\n      <td id=\"T_bb5f7_row2_col21\" class=\"data row2 col21\" >11.5</td>\n      <td id=\"T_bb5f7_row2_col22\" class=\"data row2 col22\" >58.1</td>\n      <td id=\"T_bb5f7_row2_col23\" class=\"data row2 col23\" >58.2</td>\n      <td id=\"T_bb5f7_row2_col24\" class=\"data row2 col24\" >23.2</td>\n      <td id=\"T_bb5f7_row2_col25\" class=\"data row2 col25\" >61.7</td>\n      <td id=\"T_bb5f7_row2_col26\" class=\"data row2 col26\" >21.5</td>\n      <td id=\"T_bb5f7_row2_col27\" class=\"data row2 col27\" >21.7</td>\n      <td id=\"T_bb5f7_row2_col28\" class=\"data row2 col28\" >83.5</td>\n      <td id=\"T_bb5f7_row2_col29\" class=\"data row2 col29\" >83.1</td>\n      <td id=\"T_bb5f7_row2_col30\" class=\"data row2 col30\" >41.7</td>\n      <td id=\"T_bb5f7_row2_col31\" class=\"data row2 col31\" >90.6</td>\n      <td id=\"T_bb5f7_row2_col32\" class=\"data row2 col32\" >24.1</td>\n      <td id=\"T_bb5f7_row2_col33\" class=\"data row2 col33\" >24.5</td>\n      <td id=\"T_bb5f7_row2_col34\" class=\"data row2 col34\" >36.2</td>\n      <td id=\"T_bb5f7_row2_col35\" class=\"data row2 col35\" >3.1</td>\n      <td id=\"T_bb5f7_row2_col36\" class=\"data row2 col36\" >0.9</td>\n      <td id=\"T_bb5f7_row2_col37\" class=\"data row2 col37\" >4.9</td>\n      <td id=\"T_bb5f7_row2_col38\" class=\"data row2 col38\" >9.4</td>\n      <td id=\"T_bb5f7_row2_col39\" class=\"data row2 col39\" >1.2</td>\n      <td id=\"T_bb5f7_row2_col40\" class=\"data row2 col40\" >1.5</td>\n      <td id=\"T_bb5f7_row2_col41\" class=\"data row2 col41\" >12.5</td>\n      <td id=\"T_bb5f7_row2_col42\" class=\"data row2 col42\" >12.7</td>\n      <td id=\"T_bb5f7_row2_col43\" class=\"data row2 col43\" >5.5</td>\n      <td id=\"T_bb5f7_row2_col44\" class=\"data row2 col44\" >8.1</td>\n      <td id=\"T_bb5f7_row2_col45\" class=\"data row2 col45\" >5.8</td>\n      <td id=\"T_bb5f7_row2_col46\" class=\"data row2 col46\" >2.7</td>\n      <td id=\"T_bb5f7_row2_col47\" class=\"data row2 col47\" >0.6</td>\n      <td id=\"T_bb5f7_row2_col48\" class=\"data row2 col48\" >0.7</td>\n      <td id=\"T_bb5f7_row2_col49\" class=\"data row2 col49\" >2.6</td>\n      <td id=\"T_bb5f7_row2_col50\" class=\"data row2 col50\" >4.2</td>\n      <td id=\"T_bb5f7_row2_col51\" class=\"data row2 col51\" >9.5</td>\n      <td id=\"T_bb5f7_row2_col52\" class=\"data row2 col52\" >10.9</td>\n      <td id=\"T_bb5f7_row2_col53\" class=\"data row2 col53\" >1.7</td>\n      <td id=\"T_bb5f7_row2_col54\" class=\"data row2 col54\" >1.8</td>\n      <td id=\"T_bb5f7_row2_col55\" class=\"data row2 col55\" >9.2</td>\n      <td id=\"T_bb5f7_row2_col56\" class=\"data row2 col56\" >9.3</td>\n      <td id=\"T_bb5f7_row2_col57\" class=\"data row2 col57\" >5.4</td>\n      <td id=\"T_bb5f7_row2_col58\" class=\"data row2 col58\" >9.9</td>\n      <td id=\"T_bb5f7_row2_col59\" class=\"data row2 col59\" >5.1</td>\n      <td id=\"T_bb5f7_row2_col60\" class=\"data row2 col60\" >12.6</td>\n      <td id=\"T_bb5f7_row2_col61\" class=\"data row2 col61\" >0.8</td>\n      <td id=\"T_bb5f7_row2_col62\" class=\"data row2 col62\" >0.8</td>\n      <td id=\"T_bb5f7_row2_col63\" class=\"data row2 col63\" >11.2</td>\n      <td id=\"T_bb5f7_row2_col64\" class=\"data row2 col64\" >21.3</td>\n      <td id=\"T_bb5f7_row2_col65\" class=\"data row2 col65\" >33.3</td>\n      <td id=\"T_bb5f7_row2_col66\" class=\"data row2 col66\" >69.9</td>\n      <td id=\"T_bb5f7_row2_col67\" class=\"data row2 col67\" >9.4</td>\n      <td id=\"T_bb5f7_row2_col68\" class=\"data row2 col68\" >9.3</td>\n      <td id=\"T_bb5f7_row2_col69\" class=\"data row2 col69\" >20.5</td>\n      <td id=\"T_bb5f7_row2_col70\" class=\"data row2 col70\" >21.4</td>\n      <td id=\"T_bb5f7_row2_col71\" class=\"data row2 col71\" >10.4</td>\n      <td id=\"T_bb5f7_row2_col72\" class=\"data row2 col72\" >26.4</td>\n      <td id=\"T_bb5f7_row2_col73\" class=\"data row2 col73\" >8.0</td>\n    </tr>\n    <tr>\n      <th id=\"T_bb5f7_level0_row3\" class=\"row_heading level0 row3\" >min</th>\n      <td id=\"T_bb5f7_row3_col0\" class=\"data row3 col0\" >98.5</td>\n      <td id=\"T_bb5f7_row3_col1\" class=\"data row3 col1\" >6361.0</td>\n      <td id=\"T_bb5f7_row3_col2\" class=\"data row3 col2\" >3931624.0</td>\n      <td id=\"T_bb5f7_row3_col3\" class=\"data row3 col3\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col4\" class=\"data row3 col4\" >10.0</td>\n      <td id=\"T_bb5f7_row3_col5\" class=\"data row3 col5\" >132.3</td>\n      <td id=\"T_bb5f7_row3_col6\" class=\"data row3 col6\" >735.8</td>\n      <td id=\"T_bb5f7_row3_col7\" class=\"data row3 col7\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col8\" class=\"data row3 col8\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col9\" class=\"data row3 col9\" >10.3</td>\n      <td id=\"T_bb5f7_row3_col10\" class=\"data row3 col10\" >9.8</td>\n      <td id=\"T_bb5f7_row3_col11\" class=\"data row3 col11\" >126.1</td>\n      <td id=\"T_bb5f7_row3_col12\" class=\"data row3 col12\" >138.5</td>\n      <td id=\"T_bb5f7_row3_col13\" class=\"data row3 col13\" >611.6</td>\n      <td id=\"T_bb5f7_row3_col14\" class=\"data row3 col14\" >884.9</td>\n      <td id=\"T_bb5f7_row3_col15\" class=\"data row3 col15\" >127.8</td>\n      <td id=\"T_bb5f7_row3_col16\" class=\"data row3 col16\" >129.1</td>\n      <td id=\"T_bb5f7_row3_col17\" class=\"data row3 col17\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col18\" class=\"data row3 col18\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col19\" class=\"data row3 col19\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col20\" class=\"data row3 col20\" >109.9</td>\n      <td id=\"T_bb5f7_row3_col21\" class=\"data row3 col21\" >110.5</td>\n      <td id=\"T_bb5f7_row3_col22\" class=\"data row3 col22\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col23\" class=\"data row3 col23\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col24\" class=\"data row3 col24\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col25\" class=\"data row3 col25\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col26\" class=\"data row3 col26\" >145.1</td>\n      <td id=\"T_bb5f7_row3_col27\" class=\"data row3 col27\" >146.2</td>\n      <td id=\"T_bb5f7_row3_col28\" class=\"data row3 col28\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col29\" class=\"data row3 col29\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col30\" class=\"data row3 col30\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col31\" class=\"data row3 col31\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col32\" class=\"data row3 col32\" >39.5</td>\n      <td id=\"T_bb5f7_row3_col33\" class=\"data row3 col33\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col34\" class=\"data row3 col34\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col35\" class=\"data row3 col35\" >17.4</td>\n      <td id=\"T_bb5f7_row3_col36\" class=\"data row3 col36\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col37\" class=\"data row3 col37\" >27.8</td>\n      <td id=\"T_bb5f7_row3_col38\" class=\"data row3 col38\" >62.3</td>\n      <td id=\"T_bb5f7_row3_col39\" class=\"data row3 col39\" >17.5</td>\n      <td id=\"T_bb5f7_row3_col40\" class=\"data row3 col40\" >18.2</td>\n      <td id=\"T_bb5f7_row3_col41\" class=\"data row3 col41\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col42\" class=\"data row3 col42\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col43\" class=\"data row3 col43\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col44\" class=\"data row3 col44\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col45\" class=\"data row3 col45\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col46\" class=\"data row3 col46\" >9.0</td>\n      <td id=\"T_bb5f7_row3_col47\" class=\"data row3 col47\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col48\" class=\"data row3 col48\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col49\" class=\"data row3 col49\" >10.1</td>\n      <td id=\"T_bb5f7_row3_col50\" class=\"data row3 col50\" >14.5</td>\n      <td id=\"T_bb5f7_row3_col51\" class=\"data row3 col51\" >59.7</td>\n      <td id=\"T_bb5f7_row3_col52\" class=\"data row3 col52\" >72.4</td>\n      <td id=\"T_bb5f7_row3_col53\" class=\"data row3 col53\" >10.0</td>\n      <td id=\"T_bb5f7_row3_col54\" class=\"data row3 col54\" >9.8</td>\n      <td id=\"T_bb5f7_row3_col55\" class=\"data row3 col55\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col56\" class=\"data row3 col56\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col57\" class=\"data row3 col57\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col58\" class=\"data row3 col58\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col59\" class=\"data row3 col59\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col60\" class=\"data row3 col60\" >15.6</td>\n      <td id=\"T_bb5f7_row3_col61\" class=\"data row3 col61\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col62\" class=\"data row3 col62\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col63\" class=\"data row3 col63\" >18.7</td>\n      <td id=\"T_bb5f7_row3_col64\" class=\"data row3 col64\" >26.0</td>\n      <td id=\"T_bb5f7_row3_col65\" class=\"data row3 col65\" >92.7</td>\n      <td id=\"T_bb5f7_row3_col66\" class=\"data row3 col66\" >153.2</td>\n      <td id=\"T_bb5f7_row3_col67\" class=\"data row3 col67\" >20.4</td>\n      <td id=\"T_bb5f7_row3_col68\" class=\"data row3 col68\" >20.6</td>\n      <td id=\"T_bb5f7_row3_col69\" class=\"data row3 col69\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col70\" class=\"data row3 col70\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col71\" class=\"data row3 col71\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col72\" class=\"data row3 col72\" >0.0</td>\n      <td id=\"T_bb5f7_row3_col73\" class=\"data row3 col73\" >0.0</td>\n    </tr>\n    <tr>\n      <th id=\"T_bb5f7_level0_row4\" class=\"row_heading level0 row4\" >25%</th>\n      <td id=\"T_bb5f7_row4_col0\" class=\"data row4 col0\" >176.5</td>\n      <td id=\"T_bb5f7_row4_col1\" class=\"data row4 col1\" >20631.0</td>\n      <td id=\"T_bb5f7_row4_col2\" class=\"data row4 col2\" >11869909.5</td>\n      <td id=\"T_bb5f7_row4_col3\" class=\"data row4 col3\" >2.0</td>\n      <td id=\"T_bb5f7_row4_col4\" class=\"data row4 col4\" >13.4</td>\n      <td id=\"T_bb5f7_row4_col5\" class=\"data row4 col5\" >175.0</td>\n      <td id=\"T_bb5f7_row4_col6\" class=\"data row4 col6\" >943.5</td>\n      <td id=\"T_bb5f7_row4_col7\" class=\"data row4 col7\" >1.8</td>\n      <td id=\"T_bb5f7_row4_col8\" class=\"data row4 col8\" >2.0</td>\n      <td id=\"T_bb5f7_row4_col9\" class=\"data row4 col9\" >14.1</td>\n      <td id=\"T_bb5f7_row4_col10\" class=\"data row4 col10\" >12.4</td>\n      <td id=\"T_bb5f7_row4_col11\" class=\"data row4 col11\" >162.9</td>\n      <td id=\"T_bb5f7_row4_col12\" class=\"data row4 col12\" >187.9</td>\n      <td id=\"T_bb5f7_row4_col13\" class=\"data row4 col13\" >803.5</td>\n      <td id=\"T_bb5f7_row4_col14\" class=\"data row4 col14\" >1112.8</td>\n      <td id=\"T_bb5f7_row4_col15\" class=\"data row4 col15\" >162.8</td>\n      <td id=\"T_bb5f7_row4_col16\" class=\"data row4 col16\" >165.7</td>\n      <td id=\"T_bb5f7_row4_col17\" class=\"data row4 col17\" >162.6</td>\n      <td id=\"T_bb5f7_row4_col18\" class=\"data row4 col18\" >90.7</td>\n      <td id=\"T_bb5f7_row4_col19\" class=\"data row4 col19\" >58.0</td>\n      <td id=\"T_bb5f7_row4_col20\" class=\"data row4 col20\" >140.4</td>\n      <td id=\"T_bb5f7_row4_col21\" class=\"data row4 col21\" >143.6</td>\n      <td id=\"T_bb5f7_row4_col22\" class=\"data row4 col22\" >135.6</td>\n      <td id=\"T_bb5f7_row4_col23\" class=\"data row4 col23\" >146.3</td>\n      <td id=\"T_bb5f7_row4_col24\" class=\"data row4 col24\" >79.5</td>\n      <td id=\"T_bb5f7_row4_col25\" class=\"data row4 col25\" >43.7</td>\n      <td id=\"T_bb5f7_row4_col26\" class=\"data row4 col26\" >195.4</td>\n      <td id=\"T_bb5f7_row4_col27\" class=\"data row4 col27\" >197.0</td>\n      <td id=\"T_bb5f7_row4_col28\" class=\"data row4 col28\" >200.1</td>\n      <td id=\"T_bb5f7_row4_col29\" class=\"data row4 col29\" >216.6</td>\n      <td id=\"T_bb5f7_row4_col30\" class=\"data row4 col30\" >96.4</td>\n      <td id=\"T_bb5f7_row4_col31\" class=\"data row4 col31\" >66.6</td>\n      <td id=\"T_bb5f7_row4_col32\" class=\"data row4 col32\" >82.4</td>\n      <td id=\"T_bb5f7_row4_col33\" class=\"data row4 col33\" >72.5</td>\n      <td id=\"T_bb5f7_row4_col34\" class=\"data row4 col34\" >91.5</td>\n      <td id=\"T_bb5f7_row4_col35\" class=\"data row4 col35\" >24.5</td>\n      <td id=\"T_bb5f7_row4_col36\" class=\"data row4 col36\" >3.5</td>\n      <td id=\"T_bb5f7_row4_col37\" class=\"data row4 col37\" >31.2</td>\n      <td id=\"T_bb5f7_row4_col38\" class=\"data row4 col38\" >98.7</td>\n      <td id=\"T_bb5f7_row4_col39\" class=\"data row4 col39\" >20.4</td>\n      <td id=\"T_bb5f7_row4_col40\" class=\"data row4 col40\" >20.8</td>\n      <td id=\"T_bb5f7_row4_col41\" class=\"data row4 col41\" >21.1</td>\n      <td id=\"T_bb5f7_row4_col42\" class=\"data row4 col42\" >23.6</td>\n      <td id=\"T_bb5f7_row4_col43\" class=\"data row4 col43\" >0.0</td>\n      <td id=\"T_bb5f7_row4_col44\" class=\"data row4 col44\" >0.0</td>\n      <td id=\"T_bb5f7_row4_col45\" class=\"data row4 col45\" >0.0</td>\n      <td id=\"T_bb5f7_row4_col46\" class=\"data row4 col46\" >16.1</td>\n      <td id=\"T_bb5f7_row4_col47\" class=\"data row4 col47\" >1.0</td>\n      <td id=\"T_bb5f7_row4_col48\" class=\"data row4 col48\" >1.4</td>\n      <td id=\"T_bb5f7_row4_col49\" class=\"data row4 col49\" >13.2</td>\n      <td id=\"T_bb5f7_row4_col50\" class=\"data row4 col50\" >18.2</td>\n      <td id=\"T_bb5f7_row4_col51\" class=\"data row4 col51\" >74.5</td>\n      <td id=\"T_bb5f7_row4_col52\" class=\"data row4 col52\" >93.3</td>\n      <td id=\"T_bb5f7_row4_col53\" class=\"data row4 col53\" >14.3</td>\n      <td id=\"T_bb5f7_row4_col54\" class=\"data row4 col54\" >14.5</td>\n      <td id=\"T_bb5f7_row4_col55\" class=\"data row4 col55\" >15.1</td>\n      <td id=\"T_bb5f7_row4_col56\" class=\"data row4 col56\" >16.4</td>\n      <td id=\"T_bb5f7_row4_col57\" class=\"data row4 col57\" >0.0</td>\n      <td id=\"T_bb5f7_row4_col58\" class=\"data row4 col58\" >0.0</td>\n      <td id=\"T_bb5f7_row4_col59\" class=\"data row4 col59\" >5.9</td>\n      <td id=\"T_bb5f7_row4_col60\" class=\"data row4 col60\" >46.5</td>\n      <td id=\"T_bb5f7_row4_col61\" class=\"data row4 col61\" >0.9</td>\n      <td id=\"T_bb5f7_row4_col62\" class=\"data row4 col62\" >0.9</td>\n      <td id=\"T_bb5f7_row4_col63\" class=\"data row4 col63\" >38.8</td>\n      <td id=\"T_bb5f7_row4_col64\" class=\"data row4 col64\" >49.0</td>\n      <td id=\"T_bb5f7_row4_col65\" class=\"data row4 col65\" >209.6</td>\n      <td id=\"T_bb5f7_row4_col66\" class=\"data row4 col66\" >313.3</td>\n      <td id=\"T_bb5f7_row4_col67\" class=\"data row4 col67\" >42.8</td>\n      <td id=\"T_bb5f7_row4_col68\" class=\"data row4 col68\" >43.7</td>\n      <td id=\"T_bb5f7_row4_col69\" class=\"data row4 col69\" >38.2</td>\n      <td id=\"T_bb5f7_row4_col70\" class=\"data row4 col70\" >40.0</td>\n      <td id=\"T_bb5f7_row4_col71\" class=\"data row4 col71\" >18.4</td>\n      <td id=\"T_bb5f7_row4_col72\" class=\"data row4 col72\" >4.5</td>\n      <td id=\"T_bb5f7_row4_col73\" class=\"data row4 col73\" >13.7</td>\n    </tr>\n    <tr>\n      <th id=\"T_bb5f7_level0_row5\" class=\"row_heading level0 row5\" >50%</th>\n      <td id=\"T_bb5f7_row5_col0\" class=\"data row5 col0\" >196.1</td>\n      <td id=\"T_bb5f7_row5_col1\" class=\"data row5 col1\" >54930.0</td>\n      <td id=\"T_bb5f7_row5_col2\" class=\"data row5 col2\" >30348057.0</td>\n      <td id=\"T_bb5f7_row5_col3\" class=\"data row5 col3\" >2.2</td>\n      <td id=\"T_bb5f7_row5_col4\" class=\"data row5 col4\" >14.6</td>\n      <td id=\"T_bb5f7_row5_col5\" class=\"data row5 col5\" >189.3</td>\n      <td id=\"T_bb5f7_row5_col6\" class=\"data row5 col6\" >999.6</td>\n      <td id=\"T_bb5f7_row5_col7\" class=\"data row5 col7\" >2.0</td>\n      <td id=\"T_bb5f7_row5_col8\" class=\"data row5 col8\" >2.3</td>\n      <td id=\"T_bb5f7_row5_col9\" class=\"data row5 col9\" >16.0</td>\n      <td id=\"T_bb5f7_row5_col10\" class=\"data row5 col10\" >13.4</td>\n      <td id=\"T_bb5f7_row5_col11\" class=\"data row5 col11\" >172.2</td>\n      <td id=\"T_bb5f7_row5_col12\" class=\"data row5 col12\" >208.3</td>\n      <td id=\"T_bb5f7_row5_col13\" class=\"data row5 col13\" >845.5</td>\n      <td id=\"T_bb5f7_row5_col14\" class=\"data row5 col14\" >1195.0</td>\n      <td id=\"T_bb5f7_row5_col15\" class=\"data row5 col15\" >171.3</td>\n      <td id=\"T_bb5f7_row5_col16\" class=\"data row5 col16\" >173.9</td>\n      <td id=\"T_bb5f7_row5_col17\" class=\"data row5 col17\" >194.4</td>\n      <td id=\"T_bb5f7_row5_col18\" class=\"data row5 col18\" >97.6</td>\n      <td id=\"T_bb5f7_row5_col19\" class=\"data row5 col19\" >102.2</td>\n      <td id=\"T_bb5f7_row5_col20\" class=\"data row5 col20\" >146.2</td>\n      <td id=\"T_bb5f7_row5_col21\" class=\"data row5 col21\" >149.9</td>\n      <td id=\"T_bb5f7_row5_col22\" class=\"data row5 col22\" >161.7</td>\n      <td id=\"T_bb5f7_row5_col23\" class=\"data row5 col23\" >165.6</td>\n      <td id=\"T_bb5f7_row5_col24\" class=\"data row5 col24\" >85.6</td>\n      <td id=\"T_bb5f7_row5_col25\" class=\"data row5 col25\" >78.7</td>\n      <td id=\"T_bb5f7_row5_col26\" class=\"data row5 col26\" >205.4</td>\n      <td id=\"T_bb5f7_row5_col27\" class=\"data row5 col27\" >207.8</td>\n      <td id=\"T_bb5f7_row5_col28\" class=\"data row5 col28\" >246.2</td>\n      <td id=\"T_bb5f7_row5_col29\" class=\"data row5 col29\" >252.7</td>\n      <td id=\"T_bb5f7_row5_col30\" class=\"data row5 col30\" >112.5</td>\n      <td id=\"T_bb5f7_row5_col31\" class=\"data row5 col31\" >114.2</td>\n      <td id=\"T_bb5f7_row5_col32\" class=\"data row5 col32\" >98.0</td>\n      <td id=\"T_bb5f7_row5_col33\" class=\"data row5 col33\" >84.8</td>\n      <td id=\"T_bb5f7_row5_col34\" class=\"data row5 col34\" >119.4</td>\n      <td id=\"T_bb5f7_row5_col35\" class=\"data row5 col35\" >26.6</td>\n      <td id=\"T_bb5f7_row5_col36\" class=\"data row5 col36\" >4.2</td>\n      <td id=\"T_bb5f7_row5_col37\" class=\"data row5 col37\" >34.6</td>\n      <td id=\"T_bb5f7_row5_col38\" class=\"data row5 col38\" >102.2</td>\n      <td id=\"T_bb5f7_row5_col39\" class=\"data row5 col39\" >21.1</td>\n      <td id=\"T_bb5f7_row5_col40\" class=\"data row5 col40\" >21.4</td>\n      <td id=\"T_bb5f7_row5_col41\" class=\"data row5 col41\" >27.4</td>\n      <td id=\"T_bb5f7_row5_col42\" class=\"data row5 col42\" >28.4</td>\n      <td id=\"T_bb5f7_row5_col43\" class=\"data row5 col43\" >8.5</td>\n      <td id=\"T_bb5f7_row5_col44\" class=\"data row5 col44\" >0.0</td>\n      <td id=\"T_bb5f7_row5_col45\" class=\"data row5 col45\" >10.5</td>\n      <td id=\"T_bb5f7_row5_col46\" class=\"data row5 col46\" >17.7</td>\n      <td id=\"T_bb5f7_row5_col47\" class=\"data row5 col47\" >1.3</td>\n      <td id=\"T_bb5f7_row5_col48\" class=\"data row5 col48\" >1.7</td>\n      <td id=\"T_bb5f7_row5_col49\" class=\"data row5 col49\" >14.3</td>\n      <td id=\"T_bb5f7_row5_col50\" class=\"data row5 col50\" >21.0</td>\n      <td id=\"T_bb5f7_row5_col51\" class=\"data row5 col51\" >82.4</td>\n      <td id=\"T_bb5f7_row5_col52\" class=\"data row5 col52\" >102.1</td>\n      <td id=\"T_bb5f7_row5_col53\" class=\"data row5 col53\" >15.2</td>\n      <td id=\"T_bb5f7_row5_col54\" class=\"data row5 col54\" >15.2</td>\n      <td id=\"T_bb5f7_row5_col55\" class=\"data row5 col55\" >21.2</td>\n      <td id=\"T_bb5f7_row5_col56\" class=\"data row5 col56\" >21.5</td>\n      <td id=\"T_bb5f7_row5_col57\" class=\"data row5 col57\" >9.1</td>\n      <td id=\"T_bb5f7_row5_col58\" class=\"data row5 col58\" >0.0</td>\n      <td id=\"T_bb5f7_row5_col59\" class=\"data row5 col59\" >9.0</td>\n      <td id=\"T_bb5f7_row5_col60\" class=\"data row5 col60\" >52.4</td>\n      <td id=\"T_bb5f7_row5_col61\" class=\"data row5 col61\" >1.4</td>\n      <td id=\"T_bb5f7_row5_col62\" class=\"data row5 col62\" >1.4</td>\n      <td id=\"T_bb5f7_row5_col63\" class=\"data row5 col63\" >45.7</td>\n      <td id=\"T_bb5f7_row5_col64\" class=\"data row5 col64\" >59.7</td>\n      <td id=\"T_bb5f7_row5_col65\" class=\"data row5 col65\" >225.8</td>\n      <td id=\"T_bb5f7_row5_col66\" class=\"data row5 col66\" >342.6</td>\n      <td id=\"T_bb5f7_row5_col67\" class=\"data row5 col67\" >48.1</td>\n      <td id=\"T_bb5f7_row5_col68\" class=\"data row5 col68\" >48.8</td>\n      <td id=\"T_bb5f7_row5_col69\" class=\"data row5 col69\" >47.0</td>\n      <td id=\"T_bb5f7_row5_col70\" class=\"data row5 col70\" >48.6</td>\n      <td id=\"T_bb5f7_row5_col71\" class=\"data row5 col71\" >22.2</td>\n      <td id=\"T_bb5f7_row5_col72\" class=\"data row5 col72\" >20.9</td>\n      <td id=\"T_bb5f7_row5_col73\" class=\"data row5 col73\" >18.1</td>\n    </tr>\n    <tr>\n      <th id=\"T_bb5f7_level0_row6\" class=\"row_heading level0 row6\" >75%</th>\n      <td id=\"T_bb5f7_row6_col0\" class=\"data row6 col0\" >210.8</td>\n      <td id=\"T_bb5f7_row6_col1\" class=\"data row6 col1\" >93328.0</td>\n      <td id=\"T_bb5f7_row6_col2\" class=\"data row6 col2\" >46503256.0</td>\n      <td id=\"T_bb5f7_row6_col3\" class=\"data row6 col3\" >2.4</td>\n      <td id=\"T_bb5f7_row6_col4\" class=\"data row6 col4\" >16.2</td>\n      <td id=\"T_bb5f7_row6_col5\" class=\"data row6 col5\" >217.8</td>\n      <td id=\"T_bb5f7_row6_col6\" class=\"data row6 col6\" >1031.4</td>\n      <td id=\"T_bb5f7_row6_col7\" class=\"data row6 col7\" >2.2</td>\n      <td id=\"T_bb5f7_row6_col8\" class=\"data row6 col8\" >2.5</td>\n      <td id=\"T_bb5f7_row6_col9\" class=\"data row6 col9\" >17.7</td>\n      <td id=\"T_bb5f7_row6_col10\" class=\"data row6 col10\" >14.4</td>\n      <td id=\"T_bb5f7_row6_col11\" class=\"data row6 col11\" >193.3</td>\n      <td id=\"T_bb5f7_row6_col12\" class=\"data row6 col12\" >243.3</td>\n      <td id=\"T_bb5f7_row6_col13\" class=\"data row6 col13\" >871.1</td>\n      <td id=\"T_bb5f7_row6_col14\" class=\"data row6 col14\" >1257.8</td>\n      <td id=\"T_bb5f7_row6_col15\" class=\"data row6 col15\" >180.2</td>\n      <td id=\"T_bb5f7_row6_col16\" class=\"data row6 col16\" >183.4</td>\n      <td id=\"T_bb5f7_row6_col17\" class=\"data row6 col17\" >220.8</td>\n      <td id=\"T_bb5f7_row6_col18\" class=\"data row6 col18\" >112.7</td>\n      <td id=\"T_bb5f7_row6_col19\" class=\"data row6 col19\" >162.1</td>\n      <td id=\"T_bb5f7_row6_col20\" class=\"data row6 col20\" >152.4</td>\n      <td id=\"T_bb5f7_row6_col21\" class=\"data row6 col21\" >155.2</td>\n      <td id=\"T_bb5f7_row6_col22\" class=\"data row6 col22\" >181.7</td>\n      <td id=\"T_bb5f7_row6_col23\" class=\"data row6 col23\" >182.8</td>\n      <td id=\"T_bb5f7_row6_col24\" class=\"data row6 col24\" >94.8</td>\n      <td id=\"T_bb5f7_row6_col25\" class=\"data row6 col25\" >127.7</td>\n      <td id=\"T_bb5f7_row6_col26\" class=\"data row6 col26\" >218.1</td>\n      <td id=\"T_bb5f7_row6_col27\" class=\"data row6 col27\" >220.2</td>\n      <td id=\"T_bb5f7_row6_col28\" class=\"data row6 col28\" >278.7</td>\n      <td id=\"T_bb5f7_row6_col29\" class=\"data row6 col29\" >282.1</td>\n      <td id=\"T_bb5f7_row6_col30\" class=\"data row6 col30\" >129.1</td>\n      <td id=\"T_bb5f7_row6_col31\" class=\"data row6 col31\" >198.4</td>\n      <td id=\"T_bb5f7_row6_col32\" class=\"data row6 col32\" >112.2</td>\n      <td id=\"T_bb5f7_row6_col33\" class=\"data row6 col33\" >95.5</td>\n      <td id=\"T_bb5f7_row6_col34\" class=\"data row6 col34\" >136.9</td>\n      <td id=\"T_bb5f7_row6_col35\" class=\"data row6 col35\" >27.6</td>\n      <td id=\"T_bb5f7_row6_col36\" class=\"data row6 col36\" >4.7</td>\n      <td id=\"T_bb5f7_row6_col37\" class=\"data row6 col37\" >37.7</td>\n      <td id=\"T_bb5f7_row6_col38\" class=\"data row6 col38\" >107.8</td>\n      <td id=\"T_bb5f7_row6_col39\" class=\"data row6 col39\" >22.1</td>\n      <td id=\"T_bb5f7_row6_col40\" class=\"data row6 col40\" >22.2</td>\n      <td id=\"T_bb5f7_row6_col41\" class=\"data row6 col41\" >31.1</td>\n      <td id=\"T_bb5f7_row6_col42\" class=\"data row6 col42\" >31.9</td>\n      <td id=\"T_bb5f7_row6_col43\" class=\"data row6 col43\" >10.7</td>\n      <td id=\"T_bb5f7_row6_col44\" class=\"data row6 col44\" >10.6</td>\n      <td id=\"T_bb5f7_row6_col45\" class=\"data row6 col45\" >12.2</td>\n      <td id=\"T_bb5f7_row6_col46\" class=\"data row6 col46\" >19.4</td>\n      <td id=\"T_bb5f7_row6_col47\" class=\"data row6 col47\" >1.5</td>\n      <td id=\"T_bb5f7_row6_col48\" class=\"data row6 col48\" >1.9</td>\n      <td id=\"T_bb5f7_row6_col49\" class=\"data row6 col49\" >15.3</td>\n      <td id=\"T_bb5f7_row6_col50\" class=\"data row6 col50\" >23.5</td>\n      <td id=\"T_bb5f7_row6_col51\" class=\"data row6 col51\" >88.7</td>\n      <td id=\"T_bb5f7_row6_col52\" class=\"data row6 col52\" >110.7</td>\n      <td id=\"T_bb5f7_row6_col53\" class=\"data row6 col53\" >16.6</td>\n      <td id=\"T_bb5f7_row6_col54\" class=\"data row6 col54\" >16.7</td>\n      <td id=\"T_bb5f7_row6_col55\" class=\"data row6 col55\" >23.2</td>\n      <td id=\"T_bb5f7_row6_col56\" class=\"data row6 col56\" >23.5</td>\n      <td id=\"T_bb5f7_row6_col57\" class=\"data row6 col57\" >10.6</td>\n      <td id=\"T_bb5f7_row6_col58\" class=\"data row6 col58\" >13.9</td>\n      <td id=\"T_bb5f7_row6_col59\" class=\"data row6 col59\" >11.6</td>\n      <td id=\"T_bb5f7_row6_col60\" class=\"data row6 col60\" >61.8</td>\n      <td id=\"T_bb5f7_row6_col61\" class=\"data row6 col61\" >1.8</td>\n      <td id=\"T_bb5f7_row6_col62\" class=\"data row6 col62\" >1.8</td>\n      <td id=\"T_bb5f7_row6_col63\" class=\"data row6 col63\" >53.4</td>\n      <td id=\"T_bb5f7_row6_col64\" class=\"data row6 col64\" >77.6</td>\n      <td id=\"T_bb5f7_row6_col65\" class=\"data row6 col65\" >248.2</td>\n      <td id=\"T_bb5f7_row6_col66\" class=\"data row6 col66\" >391.0</td>\n      <td id=\"T_bb5f7_row6_col67\" class=\"data row6 col67\" >54.5</td>\n      <td id=\"T_bb5f7_row6_col68\" class=\"data row6 col68\" >55.0</td>\n      <td id=\"T_bb5f7_row6_col69\" class=\"data row6 col69\" >60.0</td>\n      <td id=\"T_bb5f7_row6_col70\" class=\"data row6 col70\" >60.3</td>\n      <td id=\"T_bb5f7_row6_col71\" class=\"data row6 col71\" >25.5</td>\n      <td id=\"T_bb5f7_row6_col72\" class=\"data row6 col72\" >44.2</td>\n      <td id=\"T_bb5f7_row6_col73\" class=\"data row6 col73\" >20.4</td>\n    </tr>\n    <tr>\n      <th id=\"T_bb5f7_level0_row7\" class=\"row_heading level0 row7\" >max</th>\n      <td id=\"T_bb5f7_row7_col0\" class=\"data row7 col0\" >254.6</td>\n      <td id=\"T_bb5f7_row7_col1\" class=\"data row7 col1\" >393980.0</td>\n      <td id=\"T_bb5f7_row7_col2\" class=\"data row7 col2\" >261135696.0</td>\n      <td id=\"T_bb5f7_row7_col3\" class=\"data row7 col3\" >2.7</td>\n      <td id=\"T_bb5f7_row7_col4\" class=\"data row7 col4\" >20.3</td>\n      <td id=\"T_bb5f7_row7_col5\" class=\"data row7 col5\" >263.9</td>\n      <td id=\"T_bb5f7_row7_col6\" class=\"data row7 col6\" >1110.2</td>\n      <td id=\"T_bb5f7_row7_col7\" class=\"data row7 col7\" >2.9</td>\n      <td id=\"T_bb5f7_row7_col8\" class=\"data row7 col8\" >3.2</td>\n      <td id=\"T_bb5f7_row7_col9\" class=\"data row7 col9\" >22.8</td>\n      <td id=\"T_bb5f7_row7_col10\" class=\"data row7 col10\" >19.0</td>\n      <td id=\"T_bb5f7_row7_col11\" class=\"data row7 col11\" >233.2</td>\n      <td id=\"T_bb5f7_row7_col12\" class=\"data row7 col12\" >310.0</td>\n      <td id=\"T_bb5f7_row7_col13\" class=\"data row7 col13\" >916.2</td>\n      <td id=\"T_bb5f7_row7_col14\" class=\"data row7 col14\" >1372.7</td>\n      <td id=\"T_bb5f7_row7_col15\" class=\"data row7 col15\" >204.9</td>\n      <td id=\"T_bb5f7_row7_col16\" class=\"data row7 col16\" >205.9</td>\n      <td id=\"T_bb5f7_row7_col17\" class=\"data row7 col17\" >235.1</td>\n      <td id=\"T_bb5f7_row7_col18\" class=\"data row7 col18\" >149.0</td>\n      <td id=\"T_bb5f7_row7_col19\" class=\"data row7 col19\" >248.0</td>\n      <td id=\"T_bb5f7_row7_col20\" class=\"data row7 col20\" >170.5</td>\n      <td id=\"T_bb5f7_row7_col21\" class=\"data row7 col21\" >171.2</td>\n      <td id=\"T_bb5f7_row7_col22\" class=\"data row7 col22\" >195.6</td>\n      <td id=\"T_bb5f7_row7_col23\" class=\"data row7 col23\" >198.5</td>\n      <td id=\"T_bb5f7_row7_col24\" class=\"data row7 col24\" >130.3</td>\n      <td id=\"T_bb5f7_row7_col25\" class=\"data row7 col25\" >219.4</td>\n      <td id=\"T_bb5f7_row7_col26\" class=\"data row7 col26\" >253.6</td>\n      <td id=\"T_bb5f7_row7_col27\" class=\"data row7 col27\" >255.1</td>\n      <td id=\"T_bb5f7_row7_col28\" class=\"data row7 col28\" >319.5</td>\n      <td id=\"T_bb5f7_row7_col29\" class=\"data row7 col29\" >321.2</td>\n      <td id=\"T_bb5f7_row7_col30\" class=\"data row7 col30\" >172.2</td>\n      <td id=\"T_bb5f7_row7_col31\" class=\"data row7 col31\" >303.3</td>\n      <td id=\"T_bb5f7_row7_col32\" class=\"data row7 col32\" >168.5</td>\n      <td id=\"T_bb5f7_row7_col33\" class=\"data row7 col33\" >140.8</td>\n      <td id=\"T_bb5f7_row7_col34\" class=\"data row7 col34\" >202.3</td>\n      <td id=\"T_bb5f7_row7_col35\" class=\"data row7 col35\" >31.8</td>\n      <td id=\"T_bb5f7_row7_col36\" class=\"data row7 col36\" >5.6</td>\n      <td id=\"T_bb5f7_row7_col37\" class=\"data row7 col37\" >56.6</td>\n      <td id=\"T_bb5f7_row7_col38\" class=\"data row7 col38\" >129.6</td>\n      <td id=\"T_bb5f7_row7_col39\" class=\"data row7 col39\" >24.0</td>\n      <td id=\"T_bb5f7_row7_col40\" class=\"data row7 col40\" >25.5</td>\n      <td id=\"T_bb5f7_row7_col41\" class=\"data row7 col41\" >34.7</td>\n      <td id=\"T_bb5f7_row7_col42\" class=\"data row7 col42\" >35.0</td>\n      <td id=\"T_bb5f7_row7_col43\" class=\"data row7 col43\" >15.8</td>\n      <td id=\"T_bb5f7_row7_col44\" class=\"data row7 col44\" >27.4</td>\n      <td id=\"T_bb5f7_row7_col45\" class=\"data row7 col45\" >18.2</td>\n      <td id=\"T_bb5f7_row7_col46\" class=\"data row7 col46\" >24.4</td>\n      <td id=\"T_bb5f7_row7_col47\" class=\"data row7 col47\" >2.0</td>\n      <td id=\"T_bb5f7_row7_col48\" class=\"data row7 col48\" >3.0</td>\n      <td id=\"T_bb5f7_row7_col49\" class=\"data row7 col49\" >21.9</td>\n      <td id=\"T_bb5f7_row7_col50\" class=\"data row7 col50\" >34.1</td>\n      <td id=\"T_bb5f7_row7_col51\" class=\"data row7 col51\" >99.8</td>\n      <td id=\"T_bb5f7_row7_col52\" class=\"data row7 col52\" >124.6</td>\n      <td id=\"T_bb5f7_row7_col53\" class=\"data row7 col53\" >19.1</td>\n      <td id=\"T_bb5f7_row7_col54\" class=\"data row7 col54\" >19.2</td>\n      <td id=\"T_bb5f7_row7_col55\" class=\"data row7 col55\" >26.7</td>\n      <td id=\"T_bb5f7_row7_col56\" class=\"data row7 col56\" >27.2</td>\n      <td id=\"T_bb5f7_row7_col57\" class=\"data row7 col57\" >18.0</td>\n      <td id=\"T_bb5f7_row7_col58\" class=\"data row7 col58\" >34.7</td>\n      <td id=\"T_bb5f7_row7_col59\" class=\"data row7 col59\" >18.0</td>\n      <td id=\"T_bb5f7_row7_col60\" class=\"data row7 col60\" >81.3</td>\n      <td id=\"T_bb5f7_row7_col61\" class=\"data row7 col61\" >2.9</td>\n      <td id=\"T_bb5f7_row7_col62\" class=\"data row7 col62\" >3.1</td>\n      <td id=\"T_bb5f7_row7_col63\" class=\"data row7 col63\" >77.1</td>\n      <td id=\"T_bb5f7_row7_col64\" class=\"data row7 col64\" >112.6</td>\n      <td id=\"T_bb5f7_row7_col65\" class=\"data row7 col65\" >298.3</td>\n      <td id=\"T_bb5f7_row7_col66\" class=\"data row7 col66\" >519.1</td>\n      <td id=\"T_bb5f7_row7_col67\" class=\"data row7 col67\" >71.5</td>\n      <td id=\"T_bb5f7_row7_col68\" class=\"data row7 col68\" >71.9</td>\n      <td id=\"T_bb5f7_row7_col69\" class=\"data row7 col69\" >73.2</td>\n      <td id=\"T_bb5f7_row7_col70\" class=\"data row7 col70\" >73.6</td>\n      <td id=\"T_bb5f7_row7_col71\" class=\"data row7 col71\" >33.9</td>\n      <td id=\"T_bb5f7_row7_col72\" class=\"data row7 col72\" >87.5</td>\n      <td id=\"T_bb5f7_row7_col73\" class=\"data row7 col73\" >35.2</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n### Effect of Population\n\nIn the state demographics data, we saw a strong dependency between some of the variables and state population. We would also expect there to be a pretty strong dependency between the total number of cancer deaths and the total state population. Let's see if that is the case:\n\n::: {#3f7d3139 .cell execution_count=38}\n``` {.python .cell-code}\ncancer.plot(\n    kind=\"scatter\",\n    x=\"Total.Population\",\n    y=\"Total.Number\",\n    loglog=True,\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-39-output-1.png){}\n:::\n:::\n\n\nJust to make it super clear, let's do the same plot, but this time use the rate of cancer deaths per 100k people rather than the raw totals. (I bet you can guess how it will look!)\n\n::: {#01225ea8 .cell execution_count=39}\n``` {.python .cell-code}\ncancer.plot(\n    kind=\"scatter\",\n    x=\"Total.Population\",\n    y=\"Total.Rate\",\n    logx=True,\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-40-output-1.png){}\n:::\n:::\n\n\nBecause of this, we will use the rates per 100k people rather than total numbers for this section.\n\n### Comparing States\n\nLet's see if there are any high-level differences between individual states and rates of cancer deaths.\n\n::: {#60180631 .cell execution_count=40}\n``` {.python .cell-code}\n(\n    cancer\n    # Sort the values by the rate of cancer deaths\n    .sort_values(\"Total.Rate\").plot(\n        # Make a horizontal bar chart\n        kind=\"barh\",\n        x=\"State\",\n        y=\"Total.Rate\",\n        # Adjust the figure size so the labels print nicely\n        figsize=(5, 8),\n        # Give an informative x-axis label\n        xlabel=\"Cancer Rate (per 100k people)\",\n        # Don't bother with the legend as we only have one data series to plot\n        legend=False,\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-41-output-1.png){}\n:::\n:::\n\n\nThere is about a 2.5 times difference between the state with the highest rate of cancer deaths (West Virginia) as compared to the state with the lowest (Utah).\n\nLet's make a boxplot to see the spread of the data.\n\n::: {#a26ac306 .cell execution_count=41}\n``` {.python .cell-code}\ncancer.plot(kind=\"box\", y=\"Total.Rate\")\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-42-output-1.png){}\n:::\n:::\n\n\nCool, so we see some variation in the rate of cancer deaths across states. Let's try and find out if there are any variables in the state demographics data that are correlated with death rates for different types of cancer.\n\n### Cancer Deaths and Demographics\n\nThis dataset has data for three types of cancer, breast cancer, colorectal cancer, and lung cancer, so we will want to pull out those columns.\n\n::: {#c00ad3ee .cell execution_count=42}\n``` {.python .cell-code}\ncancer_death_rates = cancer[\n    [\"State\", \"Types.Breast.Total\", \"Types.Colorectal.Total\", \"Types.Lung.Total\"]\n]\ncancer_death_rates.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>State</th>\n      <th>Types.Breast.Total</th>\n      <th>Types.Colorectal.Total</th>\n      <th>Types.Lung.Total</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alabama</td>\n      <td>27.4</td>\n      <td>19.4</td>\n      <td>66.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alaska</td>\n      <td>17.8</td>\n      <td>11.9</td>\n      <td>36.6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arizona</td>\n      <td>23.3</td>\n      <td>14.9</td>\n      <td>42.3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arkansas</td>\n      <td>27.9</td>\n      <td>21.2</td>\n      <td>73.3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>California</td>\n      <td>23.0</td>\n      <td>14.0</td>\n      <td>34.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe want to include the normalized state demographic data in with the cancer data, but we don't want all the columns. Earlier, we saw that we can use `filter()` to select columns using regular expressions. We will do that again here to select only the categories of variables that we are interested in.\n\n::: {#f757f2ae .cell execution_count=43}\n``` {.python .cell-code}\n# Create a filtered version of normalized_state_demographics data frame containing:\n# - State column\n# - Columns starting with \"Age\"\n# - Columns starting with \"Education\"\n# - Columns starting with \"Ethnicities\"\n# - Columns starting with \"Housing\"\n# - Columns starting with \"Income\"\n# This uses regex patterns with filter() to select columns,\n# then combines them using pd.concat()\nfiltered_normalized_state_demographics = pd.concat(\n    [\n        normalized_state_demographics.filter([\"State\"]),\n        normalized_state_demographics.filter(regex=r\"^Age\"),\n        normalized_state_demographics.filter(regex=r\"^Education\"),\n        normalized_state_demographics.filter(regex=r\"^Ethnicities\"),\n        normalized_state_demographics.filter(regex=r\"^Housing\"),\n        normalized_state_demographics.filter(regex=r\"^Income\"),\n    ],\n    axis=\"columns\",\n)\nfiltered_normalized_state_demographics.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>State</th>\n      <th>Age.Percent Under 5 Years</th>\n      <th>Age.Percent Under 18 Years</th>\n      <th>Age.Percent 65 and Older</th>\n      <th>Education.High School or Higher</th>\n      <th>Education.Bachelor's Degree or Higher</th>\n      <th>Ethnicities.White Alone</th>\n      <th>Ethnicities.Black Alone</th>\n      <th>Ethnicities.American Indian and Alaska Native Alone</th>\n      <th>Ethnicities.Asian Alone</th>\n      <th>...</th>\n      <th>Housing.Housing Units</th>\n      <th>Housing.Homeownership Rate</th>\n      <th>Housing.Median Value of Owner-Occupied Units</th>\n      <th>Housing.Households</th>\n      <th>Housing.Persons per Household</th>\n      <th>Housing.Households with a computer</th>\n      <th>Housing.Households with a Internet</th>\n      <th>Income.Median Houseold Income</th>\n      <th>Income.Per Capita Income</th>\n      <th>Income.Persons Below Poverty Level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Connecticut</td>\n      <td>5.1</td>\n      <td>20.4</td>\n      <td>17.7</td>\n      <td>90.6</td>\n      <td>39.3</td>\n      <td>79.7</td>\n      <td>12.2</td>\n      <td>0.6</td>\n      <td>5.0</td>\n      <td>...</td>\n      <td>4266.789625</td>\n      <td>66.1</td>\n      <td>275400</td>\n      <td>3835.223275</td>\n      <td>2.53</td>\n      <td>90.8</td>\n      <td>85.5</td>\n      <td>78444</td>\n      <td>44496</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Delaware</td>\n      <td>5.6</td>\n      <td>20.9</td>\n      <td>19.4</td>\n      <td>90.0</td>\n      <td>32.0</td>\n      <td>69.2</td>\n      <td>23.2</td>\n      <td>0.7</td>\n      <td>4.1</td>\n      <td>...</td>\n      <td>4942.245198</td>\n      <td>71.2</td>\n      <td>251100</td>\n      <td>4046.199387</td>\n      <td>2.57</td>\n      <td>91.6</td>\n      <td>85.0</td>\n      <td>68287</td>\n      <td>35450</td>\n      <td>11.3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>District of Columbia</td>\n      <td>6.4</td>\n      <td>18.2</td>\n      <td>12.4</td>\n      <td>90.9</td>\n      <td>58.5</td>\n      <td>46.0</td>\n      <td>46.0</td>\n      <td>0.6</td>\n      <td>4.5</td>\n      <td>...</td>\n      <td>5364.478340</td>\n      <td>41.6</td>\n      <td>601500</td>\n      <td>4726.194611</td>\n      <td>2.30</td>\n      <td>91.8</td>\n      <td>82.6</td>\n      <td>86420</td>\n      <td>56147</td>\n      <td>13.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Florida</td>\n      <td>5.3</td>\n      <td>19.7</td>\n      <td>20.9</td>\n      <td>88.2</td>\n      <td>29.9</td>\n      <td>77.3</td>\n      <td>16.9</td>\n      <td>0.5</td>\n      <td>3.0</td>\n      <td>...</td>\n      <td>5145.217009</td>\n      <td>65.4</td>\n      <td>215300</td>\n      <td>4114.772322</td>\n      <td>2.65</td>\n      <td>91.5</td>\n      <td>83.0</td>\n      <td>55660</td>\n      <td>31619</td>\n      <td>12.7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Georgia</td>\n      <td>6.2</td>\n      <td>23.6</td>\n      <td>14.3</td>\n      <td>87.1</td>\n      <td>31.3</td>\n      <td>60.2</td>\n      <td>32.6</td>\n      <td>0.5</td>\n      <td>4.4</td>\n      <td>...</td>\n      <td>4519.558039</td>\n      <td>63.3</td>\n      <td>176000</td>\n      <td>3879.988270</td>\n      <td>2.70</td>\n      <td>90.2</td>\n      <td>81.3</td>\n      <td>58700</td>\n      <td>31067</td>\n      <td>13.3</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 24 columns</p>\n</div>\n```\n:::\n:::\n\n\nNow, we can merge the data:\n\n::: {#f6da01ae .cell execution_count=44}\n``` {.python .cell-code}\ncancer_demographics = cancer_death_rates.merge(\n    filtered_normalized_state_demographics, on=\"State\", how=\"inner\"\n)\ncancer_demographics.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>State</th>\n      <th>Types.Breast.Total</th>\n      <th>Types.Colorectal.Total</th>\n      <th>Types.Lung.Total</th>\n      <th>Age.Percent Under 5 Years</th>\n      <th>Age.Percent Under 18 Years</th>\n      <th>Age.Percent 65 and Older</th>\n      <th>Education.High School or Higher</th>\n      <th>Education.Bachelor's Degree or Higher</th>\n      <th>Ethnicities.White Alone</th>\n      <th>...</th>\n      <th>Housing.Housing Units</th>\n      <th>Housing.Homeownership Rate</th>\n      <th>Housing.Median Value of Owner-Occupied Units</th>\n      <th>Housing.Households</th>\n      <th>Housing.Persons per Household</th>\n      <th>Housing.Households with a computer</th>\n      <th>Housing.Households with a Internet</th>\n      <th>Income.Median Houseold Income</th>\n      <th>Income.Per Capita Income</th>\n      <th>Income.Persons Below Poverty Level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alabama</td>\n      <td>27.4</td>\n      <td>19.4</td>\n      <td>66.4</td>\n      <td>6.0</td>\n      <td>22.2</td>\n      <td>17.3</td>\n      <td>86.2</td>\n      <td>25.5</td>\n      <td>69.1</td>\n      <td>...</td>\n      <td>4780.278660</td>\n      <td>68.8</td>\n      <td>142700</td>\n      <td>3907.941778</td>\n      <td>2.55</td>\n      <td>85.5</td>\n      <td>76.4</td>\n      <td>50536</td>\n      <td>27928</td>\n      <td>15.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alaska</td>\n      <td>17.8</td>\n      <td>11.9</td>\n      <td>36.6</td>\n      <td>7.0</td>\n      <td>24.6</td>\n      <td>12.5</td>\n      <td>92.8</td>\n      <td>29.6</td>\n      <td>65.3</td>\n      <td>...</td>\n      <td>4503.520686</td>\n      <td>64.3</td>\n      <td>270400</td>\n      <td>3567.092960</td>\n      <td>2.80</td>\n      <td>94.1</td>\n      <td>85.5</td>\n      <td>77640</td>\n      <td>36787</td>\n      <td>10.1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arizona</td>\n      <td>23.3</td>\n      <td>14.9</td>\n      <td>42.3</td>\n      <td>5.9</td>\n      <td>22.5</td>\n      <td>18.0</td>\n      <td>87.1</td>\n      <td>29.5</td>\n      <td>82.6</td>\n      <td>...</td>\n      <td>4812.222809</td>\n      <td>64.4</td>\n      <td>225500</td>\n      <td>4022.623845</td>\n      <td>2.68</td>\n      <td>91.7</td>\n      <td>84.1</td>\n      <td>58945</td>\n      <td>30694</td>\n      <td>13.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arkansas</td>\n      <td>27.9</td>\n      <td>21.2</td>\n      <td>73.3</td>\n      <td>6.2</td>\n      <td>23.2</td>\n      <td>17.4</td>\n      <td>86.6</td>\n      <td>23.0</td>\n      <td>79.0</td>\n      <td>...</td>\n      <td>4763.950838</td>\n      <td>65.6</td>\n      <td>127800</td>\n      <td>3971.548583</td>\n      <td>2.52</td>\n      <td>86.2</td>\n      <td>73.0</td>\n      <td>47597</td>\n      <td>26577</td>\n      <td>16.2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>California</td>\n      <td>23.0</td>\n      <td>14.0</td>\n      <td>34.5</td>\n      <td>6.0</td>\n      <td>22.5</td>\n      <td>14.8</td>\n      <td>83.3</td>\n      <td>33.9</td>\n      <td>71.9</td>\n      <td>...</td>\n      <td>3856.324950</td>\n      <td>54.8</td>\n      <td>505000</td>\n      <td>3501.444518</td>\n      <td>2.95</td>\n      <td>93.0</td>\n      <td>86.7</td>\n      <td>75235</td>\n      <td>36955</td>\n      <td>11.8</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 27 columns</p>\n</div>\n```\n:::\n:::\n\n\nLet's do another correlation matrix:\n\n::: {#b0cf6a2e .cell execution_count=45}\n``` {.python .cell-code}\ncancer_demographics_full_correlation_matrix = cancer_demographics.corr(\n    numeric_only=True\n)\ncancer_demographics_full_correlation_matrix\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Types.Breast.Total</th>\n      <th>Types.Colorectal.Total</th>\n      <th>Types.Lung.Total</th>\n      <th>Age.Percent Under 5 Years</th>\n      <th>Age.Percent Under 18 Years</th>\n      <th>Age.Percent 65 and Older</th>\n      <th>Education.High School or Higher</th>\n      <th>Education.Bachelor's Degree or Higher</th>\n      <th>Ethnicities.White Alone</th>\n      <th>Ethnicities.Black Alone</th>\n      <th>...</th>\n      <th>Housing.Housing Units</th>\n      <th>Housing.Homeownership Rate</th>\n      <th>Housing.Median Value of Owner-Occupied Units</th>\n      <th>Housing.Households</th>\n      <th>Housing.Persons per Household</th>\n      <th>Housing.Households with a computer</th>\n      <th>Housing.Households with a Internet</th>\n      <th>Income.Median Houseold Income</th>\n      <th>Income.Per Capita Income</th>\n      <th>Income.Persons Below Poverty Level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Types.Breast.Total</th>\n      <td>1.000000</td>\n      <td>0.820604</td>\n      <td>0.738585</td>\n      <td>-0.388781</td>\n      <td>-0.498962</td>\n      <td>0.451119</td>\n      <td>-0.131677</td>\n      <td>-0.019331</td>\n      <td>0.051875</td>\n      <td>0.419682</td>\n      <td>...</td>\n      <td>0.262656</td>\n      <td>0.042882</td>\n      <td>-0.288228</td>\n      <td>0.375702</td>\n      <td>-0.654101</td>\n      <td>-0.541995</td>\n      <td>-0.398493</td>\n      <td>-0.275447</td>\n      <td>0.054492</td>\n      <td>0.331260</td>\n    </tr>\n    <tr>\n      <th>Types.Colorectal.Total</th>\n      <td>0.820604</td>\n      <td>1.000000</td>\n      <td>0.861898</td>\n      <td>-0.314083</td>\n      <td>-0.381218</td>\n      <td>0.600918</td>\n      <td>-0.158118</td>\n      <td>-0.361382</td>\n      <td>0.097213</td>\n      <td>0.156050</td>\n      <td>...</td>\n      <td>0.280906</td>\n      <td>0.186077</td>\n      <td>-0.418381</td>\n      <td>0.264358</td>\n      <td>-0.618531</td>\n      <td>-0.753502</td>\n      <td>-0.612936</td>\n      <td>-0.502661</td>\n      <td>-0.269516</td>\n      <td>0.443643</td>\n    </tr>\n    <tr>\n      <th>Types.Lung.Total</th>\n      <td>0.738585</td>\n      <td>0.861898</td>\n      <td>1.000000</td>\n      <td>-0.435992</td>\n      <td>-0.411047</td>\n      <td>0.609561</td>\n      <td>-0.216806</td>\n      <td>-0.437903</td>\n      <td>0.146942</td>\n      <td>0.188569</td>\n      <td>...</td>\n      <td>0.303359</td>\n      <td>0.331816</td>\n      <td>-0.530434</td>\n      <td>0.203042</td>\n      <td>-0.571173</td>\n      <td>-0.706384</td>\n      <td>-0.577125</td>\n      <td>-0.574831</td>\n      <td>-0.363581</td>\n      <td>0.450317</td>\n    </tr>\n    <tr>\n      <th>Age.Percent Under 5 Years</th>\n      <td>-0.388781</td>\n      <td>-0.314083</td>\n      <td>-0.435992</td>\n      <td>1.000000</td>\n      <td>0.879837</td>\n      <td>-0.753746</td>\n      <td>-0.070116</td>\n      <td>-0.171279</td>\n      <td>-0.169575</td>\n      <td>0.064308</td>\n      <td>...</td>\n      <td>-0.205294</td>\n      <td>-0.165581</td>\n      <td>-0.069280</td>\n      <td>-0.084758</td>\n      <td>0.401366</td>\n      <td>0.095203</td>\n      <td>-0.098394</td>\n      <td>-0.037176</td>\n      <td>-0.190507</td>\n      <td>0.113660</td>\n    </tr>\n    <tr>\n      <th>Age.Percent Under 18 Years</th>\n      <td>-0.498962</td>\n      <td>-0.381218</td>\n      <td>-0.411047</td>\n      <td>0.879837</td>\n      <td>1.000000</td>\n      <td>-0.617604</td>\n      <td>-0.128687</td>\n      <td>-0.408223</td>\n      <td>0.064120</td>\n      <td>-0.122481</td>\n      <td>...</td>\n      <td>-0.343985</td>\n      <td>0.172119</td>\n      <td>-0.309091</td>\n      <td>-0.300107</td>\n      <td>0.515735</td>\n      <td>0.062107</td>\n      <td>-0.115255</td>\n      <td>-0.207411</td>\n      <td>-0.458687</td>\n      <td>0.107673</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Housing.Households with a computer</th>\n      <td>-0.541995</td>\n      <td>-0.753502</td>\n      <td>-0.706384</td>\n      <td>0.095203</td>\n      <td>0.062107</td>\n      <td>-0.364809</td>\n      <td>0.471508</td>\n      <td>0.575901</td>\n      <td>-0.000697</td>\n      <td>-0.280283</td>\n      <td>...</td>\n      <td>-0.127756</td>\n      <td>-0.264749</td>\n      <td>0.589177</td>\n      <td>-0.010558</td>\n      <td>0.370020</td>\n      <td>1.000000</td>\n      <td>0.923669</td>\n      <td>0.749979</td>\n      <td>0.565945</td>\n      <td>-0.791368</td>\n    </tr>\n    <tr>\n      <th>Housing.Households with a Internet</th>\n      <td>-0.398493</td>\n      <td>-0.612936</td>\n      <td>-0.577125</td>\n      <td>-0.098394</td>\n      <td>-0.115255</td>\n      <td>-0.201042</td>\n      <td>0.516615</td>\n      <td>0.637379</td>\n      <td>0.045414</td>\n      <td>-0.323449</td>\n      <td>...</td>\n      <td>-0.215326</td>\n      <td>-0.206746</td>\n      <td>0.602584</td>\n      <td>-0.039747</td>\n      <td>0.257074</td>\n      <td>0.923669</td>\n      <td>1.000000</td>\n      <td>0.820815</td>\n      <td>0.656077</td>\n      <td>-0.878474</td>\n    </tr>\n    <tr>\n      <th>Income.Median Houseold Income</th>\n      <td>-0.275447</td>\n      <td>-0.502661</td>\n      <td>-0.574831</td>\n      <td>-0.037176</td>\n      <td>-0.207411</td>\n      <td>-0.332490</td>\n      <td>0.433715</td>\n      <td>0.825304</td>\n      <td>-0.311793</td>\n      <td>-0.017949</td>\n      <td>...</td>\n      <td>-0.301793</td>\n      <td>-0.429184</td>\n      <td>0.799816</td>\n      <td>-0.114904</td>\n      <td>0.247522</td>\n      <td>0.749979</td>\n      <td>0.820815</td>\n      <td>1.000000</td>\n      <td>0.895940</td>\n      <td>-0.755590</td>\n    </tr>\n    <tr>\n      <th>Income.Per Capita Income</th>\n      <td>0.054492</td>\n      <td>-0.269516</td>\n      <td>-0.363581</td>\n      <td>-0.190507</td>\n      <td>-0.458687</td>\n      <td>-0.233495</td>\n      <td>0.384923</td>\n      <td>0.925678</td>\n      <td>-0.274597</td>\n      <td>0.169388</td>\n      <td>...</td>\n      <td>-0.059754</td>\n      <td>-0.547328</td>\n      <td>0.734335</td>\n      <td>0.185974</td>\n      <td>-0.099105</td>\n      <td>0.565945</td>\n      <td>0.656077</td>\n      <td>0.895940</td>\n      <td>1.000000</td>\n      <td>-0.586132</td>\n    </tr>\n    <tr>\n      <th>Income.Persons Below Poverty Level</th>\n      <td>0.331260</td>\n      <td>0.443643</td>\n      <td>0.450317</td>\n      <td>0.113660</td>\n      <td>0.107673</td>\n      <td>0.068212</td>\n      <td>-0.743634</td>\n      <td>-0.566515</td>\n      <td>-0.176359</td>\n      <td>0.434675</td>\n      <td>...</td>\n      <td>0.074541</td>\n      <td>-0.024846</td>\n      <td>-0.435180</td>\n      <td>-0.057847</td>\n      <td>-0.051614</td>\n      <td>-0.791368</td>\n      <td>-0.878474</td>\n      <td>-0.755590</td>\n      <td>-0.586132</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>26 rows × 26 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis will give every variable against all other variables, but in this case we don't want to plot all that. We just want to see the correlation of the state demographic data to the cancer death data, and not the state demographic data with itself again.\n\nSo, let's filter out the rows and columns that we don't need.\n\n::: {#8bdb8a31 .cell execution_count=46}\n``` {.python .cell-code}\ncancer_columns = [\"Types.Breast.Total\", \"Types.Colorectal.Total\", \"Types.Lung.Total\"]\ncancer_demographics_correlation_matrix = cancer_demographics_full_correlation_matrix[\n    cancer_columns\n].drop(cancer_columns, axis=\"rows\")\ncancer_demographics_correlation_matrix\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Types.Breast.Total</th>\n      <th>Types.Colorectal.Total</th>\n      <th>Types.Lung.Total</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Age.Percent Under 5 Years</th>\n      <td>-0.388781</td>\n      <td>-0.314083</td>\n      <td>-0.435992</td>\n    </tr>\n    <tr>\n      <th>Age.Percent Under 18 Years</th>\n      <td>-0.498962</td>\n      <td>-0.381218</td>\n      <td>-0.411047</td>\n    </tr>\n    <tr>\n      <th>Age.Percent 65 and Older</th>\n      <td>0.451119</td>\n      <td>0.600918</td>\n      <td>0.609561</td>\n    </tr>\n    <tr>\n      <th>Education.High School or Higher</th>\n      <td>-0.131677</td>\n      <td>-0.158118</td>\n      <td>-0.216806</td>\n    </tr>\n    <tr>\n      <th>Education.Bachelor's Degree or Higher</th>\n      <td>-0.019331</td>\n      <td>-0.361382</td>\n      <td>-0.437903</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Housing.Households with a computer</th>\n      <td>-0.541995</td>\n      <td>-0.753502</td>\n      <td>-0.706384</td>\n    </tr>\n    <tr>\n      <th>Housing.Households with a Internet</th>\n      <td>-0.398493</td>\n      <td>-0.612936</td>\n      <td>-0.577125</td>\n    </tr>\n    <tr>\n      <th>Income.Median Houseold Income</th>\n      <td>-0.275447</td>\n      <td>-0.502661</td>\n      <td>-0.574831</td>\n    </tr>\n    <tr>\n      <th>Income.Per Capita Income</th>\n      <td>0.054492</td>\n      <td>-0.269516</td>\n      <td>-0.363581</td>\n    </tr>\n    <tr>\n      <th>Income.Persons Below Poverty Level</th>\n      <td>0.331260</td>\n      <td>0.443643</td>\n      <td>0.450317</td>\n    </tr>\n  </tbody>\n</table>\n<p>23 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nAnd now we can generate another heatmap.\n\n::: {#076a2ed0 .cell execution_count=47}\n``` {.python .cell-code}\nsns.clustermap(\n    cancer_demographics_correlation_matrix,\n    # Specify the complete linkage for calculating clusters\n    method=\"complete\",\n    # The relative space the dendrograms will occupy\n    dendrogram_ratio=0.15,\n    # Use the \"icefire\" diverging palette\n    cmap=\"icefire\",\n    # Make sure the min color value occurs at -1\n    vmin=-1,\n    # Make sure the max color value occurs at 1\n    vmax=1,\n    # figsize=(12, 12),\n    # Remove the x-axis tick labels\n    xticklabels=True,\n    # Remove the y-axis tick labels\n    yticklabels=True,\n    # Set the options for the color palette legend\n    cbar_kws={\n        \"label\": \"Correlation\",  # Set the label for the color palette legend\n        \"location\": \"bottom\",  # Set the location of the color palette legend\n    },\n    # Set the location for the color palette legend\n    # This is for top left\n    cbar_pos=(\n        0.03,  # Distance from the left\n        0.92,  # Distance from the bottom\n        0.10,  # Width\n        0.05,  # Height\n    ),\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-48-output-1.png){}\n:::\n:::\n\n\nWe can definitely see some patterns emerging. The groups most highly correlated with cancer deaths were people 65 and older, followed by people below the poverty line. In contrast, groups that were least correlated with cancer deaths included those who lived in households with a computer and fewer people per household.\n\nThere are also some interesting patterns related to ethnicity. For example, there is almost no correlation between ethnicity and colorectal or lung cancer death for Pacific Islanders, but a negative correlation for breast cancer. Meanwhile, there is a higher correlation between breast cancer deaths and ethnicity for Black people than for colorectal or lung cancer, which are both close to zero.\n\nThese patterns bring up some interesting questions. Are Pacific Islanders less likely to develop breast cancer than Black people? Or do the two groups tend to develop different types of breast cancer? Or are there social determinants or biases in healthcare that make breast cancer more deadly for Black people?\n\nExploratory data analysis, as you've seen, will show trends, but it is up to scientists and other domain experts to interpret the data and to determine causes.\n\n### Cancer Data Wrap-Up\n\nIn this section we learned some tricks about how to combine multiple datasets, and how to look for interesting data trends by including more metadata into our analysis.\n\nYou may have noticed that there are a lot more variables in the cancer dataset. You could definitely imagine doing a lot more with this data!\n\n## Public Health Data\n\nLet's check out some public health data next. This data is a bit different in that it has data for the states over many years, and it includes multiple diseases. This makes it a neat resource to learn a few more Pandas tricks!\n\n### Basics\n\nWe start by importing the data.\n\n::: {#2a988a0b .cell execution_count=48}\n``` {.python .cell-code}\ndisease = pd.read_csv(\"../_data/health.csv\")\ndisease.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>disease</th>\n      <th>increase</th>\n      <th>loc</th>\n      <th>number</th>\n      <th>population</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>MEASLES</td>\n      <td>334.99</td>\n      <td>ALABAMA</td>\n      <td>8843</td>\n      <td>2640000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>MEASLES</td>\n      <td>200.75</td>\n      <td>ARIZONA</td>\n      <td>847</td>\n      <td>422000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MEASLES</td>\n      <td>481.77</td>\n      <td>ARKANSAS</td>\n      <td>8899</td>\n      <td>1847000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>MEASLES</td>\n      <td>69.22</td>\n      <td>CALIFORNIA</td>\n      <td>3698</td>\n      <td>5344000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>MEASLES</td>\n      <td>206.98</td>\n      <td>COLORADO</td>\n      <td>2099</td>\n      <td>1014000</td>\n      <td>1928</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe first thing I want to do is clean it up a little bit. I like columns to use title case and to avoid abbreviations that aren't in common usage. Additionally, the other datasets we looked at didn't have entries in all caps, so I would like to fix that as well.\n\n::: {#da1e6a51 .cell execution_count=49}\n``` {.python .cell-code}\ndisease = (\n    # Start with the disease DataFrame\n    disease\n    # Rename the columns to more readable format with capital letters\n    .rename(\n        columns={\n            # Change 'disease' to 'Disease'\n            \"disease\": \"Disease\",\n            # Change 'increase' to 'Increase'\n            \"increase\": \"Increase\",\n            # Change 'loc' to 'State'\n            \"loc\": \"State\",\n            # Change 'number' to 'Cases'\n            \"number\": \"Cases\",\n            # Change 'population' as 'Population'\n            \"population\": \"Population\",\n            # Change 'year' to 'Year'\n            \"year\": \"Year\",\n        }\n    )\n    # Use assign() to create or modify columns without modifying the original\n    # DataFrame\n    .assign(\n        # Convert the Disease column text to title case\n        # (first letter of each word capitalized)\n        Disease=lambda df: df[\"Disease\"].str.title(),\n        # Convert the State column text to title case\n        # (first letter of each word capitalized)\n        State=lambda df: df[\"State\"].str.title(),\n    )\n)\ndisease\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Disease</th>\n      <th>Increase</th>\n      <th>State</th>\n      <th>Cases</th>\n      <th>Population</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Measles</td>\n      <td>334.99</td>\n      <td>Alabama</td>\n      <td>8843</td>\n      <td>2640000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Measles</td>\n      <td>200.75</td>\n      <td>Arizona</td>\n      <td>847</td>\n      <td>422000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Measles</td>\n      <td>481.77</td>\n      <td>Arkansas</td>\n      <td>8899</td>\n      <td>1847000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Measles</td>\n      <td>69.22</td>\n      <td>California</td>\n      <td>3698</td>\n      <td>5344000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Measles</td>\n      <td>206.98</td>\n      <td>Colorado</td>\n      <td>2099</td>\n      <td>1014000</td>\n      <td>1928</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>14260</th>\n      <td>Pertussis</td>\n      <td>2.06</td>\n      <td>Virginia</td>\n      <td>171</td>\n      <td>8096604</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>14261</th>\n      <td>Pertussis</td>\n      <td>10.68</td>\n      <td>Washington</td>\n      <td>731</td>\n      <td>6830038</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>14262</th>\n      <td>Pertussis</td>\n      <td>1.99</td>\n      <td>West Virginia</td>\n      <td>37</td>\n      <td>1855364</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>14263</th>\n      <td>Pertussis</td>\n      <td>6.20</td>\n      <td>Wisconsin</td>\n      <td>351</td>\n      <td>5711767</td>\n      <td>2011</td>\n    </tr>\n    <tr>\n      <th>14264</th>\n      <td>Pertussis</td>\n      <td>1.25</td>\n      <td>Wyoming</td>\n      <td>7</td>\n      <td>568158</td>\n      <td>2011</td>\n    </tr>\n  </tbody>\n</table>\n<p>14265 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe use the method chaining style again: each method returns a DataFrame that the next method operates on.\n\nThat `lambda` usage in `assign()` might be a bit obscure. Let's break it down.\n\n```python\n.assign(\n    Disease=lambda df: df[\"Disease\"].str.title()\n)\n```\n\n- `Disease` will be the column that holds the result of the evaluation of the `lambda` function\n- `lambda df:`\n  - This creates a small anonymous function that takes a `DataFrame` named `df` as input.\n  - Which data frame? Well, it's the data frame that we are currently working on. If that is too mind-bending, just roll with it for now.\n- `df[\"Disease\"]` selects just the Disease column from the data frame `df`\n- `.str.title()` is a Pandas string method that converts text to \"Title Case\" (capitalizes the first letter of each word).\n\nSo when you see `Disease=lambda df: df[\"Disease\"].str.title()` in the `assign()` method, it means \"create a new Disease column by taking the values from the existing Disease column and converting each value to title case.\"\n\n_Note: Pandas has a special way of working with string data. To learn more, check out the [working with text data](https://pandas.pydata.org/docs/user_guide/text.html) docs._\n\n### Disease Rates\n\nSimilar to the other datasets, we will want to look at disease rates and not raw numbers since we don't want the state population to influence our results. This time, let's modify the existing data frame directly. We could have used `assign()` again, but I want to give you a little variety, in case you see something similar in the wild.\n\n::: {#36f0299d .cell execution_count=50}\n``` {.python .cell-code}\ndisease[\"CasesPer100k\"] = disease[\"Cases\"] / disease[\"Population\"] * 100_000\ndisease.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Disease</th>\n      <th>Increase</th>\n      <th>State</th>\n      <th>Cases</th>\n      <th>Population</th>\n      <th>Year</th>\n      <th>CasesPer100k</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Measles</td>\n      <td>334.99</td>\n      <td>Alabama</td>\n      <td>8843</td>\n      <td>2640000</td>\n      <td>1928</td>\n      <td>334.962121</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Measles</td>\n      <td>200.75</td>\n      <td>Arizona</td>\n      <td>847</td>\n      <td>422000</td>\n      <td>1928</td>\n      <td>200.710900</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Measles</td>\n      <td>481.77</td>\n      <td>Arkansas</td>\n      <td>8899</td>\n      <td>1847000</td>\n      <td>1928</td>\n      <td>481.808338</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Measles</td>\n      <td>69.22</td>\n      <td>California</td>\n      <td>3698</td>\n      <td>5344000</td>\n      <td>1928</td>\n      <td>69.199102</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Measles</td>\n      <td>206.98</td>\n      <td>Colorado</td>\n      <td>2099</td>\n      <td>1014000</td>\n      <td>1928</td>\n      <td>207.001972</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSome of these columns are no longer needed, so let's drop them.\n\n::: {#49cd8eed .cell execution_count=51}\n``` {.python .cell-code}\ndisease = disease.drop(columns=[\"Increase\", \"Population\"])\ndisease\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Disease</th>\n      <th>State</th>\n      <th>Cases</th>\n      <th>Year</th>\n      <th>CasesPer100k</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Measles</td>\n      <td>Alabama</td>\n      <td>8843</td>\n      <td>1928</td>\n      <td>334.962121</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Measles</td>\n      <td>Arizona</td>\n      <td>847</td>\n      <td>1928</td>\n      <td>200.710900</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Measles</td>\n      <td>Arkansas</td>\n      <td>8899</td>\n      <td>1928</td>\n      <td>481.808338</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Measles</td>\n      <td>California</td>\n      <td>3698</td>\n      <td>1928</td>\n      <td>69.199102</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Measles</td>\n      <td>Colorado</td>\n      <td>2099</td>\n      <td>1928</td>\n      <td>207.001972</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>14260</th>\n      <td>Pertussis</td>\n      <td>Virginia</td>\n      <td>171</td>\n      <td>2011</td>\n      <td>2.111997</td>\n    </tr>\n    <tr>\n      <th>14261</th>\n      <td>Pertussis</td>\n      <td>Washington</td>\n      <td>731</td>\n      <td>2011</td>\n      <td>10.702722</td>\n    </tr>\n    <tr>\n      <th>14262</th>\n      <td>Pertussis</td>\n      <td>West Virginia</td>\n      <td>37</td>\n      <td>2011</td>\n      <td>1.994218</td>\n    </tr>\n    <tr>\n      <th>14263</th>\n      <td>Pertussis</td>\n      <td>Wisconsin</td>\n      <td>351</td>\n      <td>2011</td>\n      <td>6.145209</td>\n    </tr>\n    <tr>\n      <th>14264</th>\n      <td>Pertussis</td>\n      <td>Wyoming</td>\n      <td>7</td>\n      <td>2011</td>\n      <td>1.232052</td>\n    </tr>\n  </tbody>\n</table>\n<p>14265 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Grouping Data\n\nNow that we have cleaned things up a little, let's summarize the data.\n\n::: {#c61cfd82 .cell execution_count=52}\n``` {.python .cell-code}\ndisease.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cases</th>\n      <th>Year</th>\n      <th>CasesPer100k</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>14265.000000</td>\n      <td>14265.000000</td>\n      <td>14265.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1680.833719</td>\n      <td>1969.932983</td>\n      <td>57.365462</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6219.396618</td>\n      <td>23.050123</td>\n      <td>165.211789</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>1928.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>17.000000</td>\n      <td>1948.000000</td>\n      <td>0.718467</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>109.000000</td>\n      <td>1973.000000</td>\n      <td>3.928048</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>677.000000</td>\n      <td>1989.000000</td>\n      <td>25.368169</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>132342.000000</td>\n      <td>2011.000000</td>\n      <td>2974.789916</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHuh, that really didn't give us useful information did it? The way this data is structured means that multiple columns are needed to identify unique observations. In this case a single observation is uniquely identified by a combination of state-year-disease. When we use describe, or other summarizing methods which we will see in a bit, we will first need to group the observations by subsets of the columns that uniquely identify them.\n\nFor example, to see averages for diseases per year across all states, we would group by `Year` and `Disease`:\n\n::: {#589f063f .cell execution_count=53}\n``` {.python .cell-code}\ndisease.groupby(by=[\"Year\", \"Disease\"]).describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">Cases</th>\n      <th colspan=\"8\" halign=\"left\">CasesPer100k</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>Year</th>\n      <th>Disease</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">1928</th>\n      <th>Measles</th>\n      <td>47.0</td>\n      <td>10283.765957</td>\n      <td>16529.355868</td>\n      <td>0.0</td>\n      <td>1236.50</td>\n      <td>3698.0</td>\n      <td>8656.50</td>\n      <td>75391.0</td>\n      <td>47.0</td>\n      <td>360.119785</td>\n      <td>355.941940</td>\n      <td>0.000000</td>\n      <td>130.758467</td>\n      <td>256.223176</td>\n      <td>508.753856</td>\n      <td>1823.718365</td>\n    </tr>\n    <tr>\n      <th>Polio</th>\n      <td>48.0</td>\n      <td>99.083333</td>\n      <td>155.322154</td>\n      <td>6.0</td>\n      <td>24.00</td>\n      <td>45.0</td>\n      <td>89.75</td>\n      <td>947.0</td>\n      <td>48.0</td>\n      <td>4.816878</td>\n      <td>4.951962</td>\n      <td>0.413365</td>\n      <td>1.563007</td>\n      <td>2.666954</td>\n      <td>6.917508</td>\n      <td>20.760799</td>\n    </tr>\n    <tr>\n      <th>Smallpox</th>\n      <td>49.0</td>\n      <td>744.285714</td>\n      <td>924.561878</td>\n      <td>0.0</td>\n      <td>83.00</td>\n      <td>341.0</td>\n      <td>1285.00</td>\n      <td>3917.0</td>\n      <td>49.0</td>\n      <td>41.261417</td>\n      <td>49.954931</td>\n      <td>0.000000</td>\n      <td>2.793296</td>\n      <td>18.525449</td>\n      <td>73.181818</td>\n      <td>204.166667</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">1929</th>\n      <th>Measles</th>\n      <td>46.0</td>\n      <td>7370.891304</td>\n      <td>11334.755452</td>\n      <td>211.0</td>\n      <td>1102.50</td>\n      <td>2164.5</td>\n      <td>7100.75</td>\n      <td>47605.0</td>\n      <td>46.0</td>\n      <td>262.191202</td>\n      <td>233.787770</td>\n      <td>12.133410</td>\n      <td>73.116765</td>\n      <td>182.629793</td>\n      <td>370.208359</td>\n      <td>1016.530334</td>\n    </tr>\n    <tr>\n      <th>Polio</th>\n      <td>48.0</td>\n      <td>57.208333</td>\n      <td>91.662879</td>\n      <td>3.0</td>\n      <td>9.00</td>\n      <td>20.5</td>\n      <td>63.25</td>\n      <td>530.0</td>\n      <td>48.0</td>\n      <td>2.040845</td>\n      <td>1.718013</td>\n      <td>0.215983</td>\n      <td>0.839060</td>\n      <td>1.532462</td>\n      <td>2.824737</td>\n      <td>9.938144</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <th>Pertussis</th>\n      <td>51.0</td>\n      <td>175.294118</td>\n      <td>208.747244</td>\n      <td>1.0</td>\n      <td>54.50</td>\n      <td>109.0</td>\n      <td>194.00</td>\n      <td>1081.0</td>\n      <td>51.0</td>\n      <td>3.254531</td>\n      <td>2.049602</td>\n      <td>0.166762</td>\n      <td>1.685645</td>\n      <td>2.778082</td>\n      <td>4.144554</td>\n      <td>10.021862</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">2010</th>\n      <th>Hepatitis A</th>\n      <td>50.0</td>\n      <td>81.200000</td>\n      <td>396.252599</td>\n      <td>0.0</td>\n      <td>4.75</td>\n      <td>12.5</td>\n      <td>30.50</td>\n      <td>2815.0</td>\n      <td>50.0</td>\n      <td>0.667417</td>\n      <td>1.991235</td>\n      <td>0.000000</td>\n      <td>0.244203</td>\n      <td>0.397353</td>\n      <td>0.514911</td>\n      <td>14.378582</td>\n    </tr>\n    <tr>\n      <th>Pertussis</th>\n      <td>51.0</td>\n      <td>276.705882</td>\n      <td>373.632830</td>\n      <td>6.0</td>\n      <td>43.00</td>\n      <td>132.0</td>\n      <td>326.00</td>\n      <td>1810.0</td>\n      <td>51.0</td>\n      <td>4.811068</td>\n      <td>4.255464</td>\n      <td>0.095149</td>\n      <td>1.927061</td>\n      <td>3.394460</td>\n      <td>5.986279</td>\n      <td>20.872745</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">2011</th>\n      <th>Hepatitis A</th>\n      <td>48.0</td>\n      <td>22.958333</td>\n      <td>34.008108</td>\n      <td>0.0</td>\n      <td>4.00</td>\n      <td>8.5</td>\n      <td>28.00</td>\n      <td>176.0</td>\n      <td>48.0</td>\n      <td>0.289574</td>\n      <td>0.169517</td>\n      <td>0.000000</td>\n      <td>0.168690</td>\n      <td>0.278355</td>\n      <td>0.404930</td>\n      <td>0.798173</td>\n    </tr>\n    <tr>\n      <th>Pertussis</th>\n      <td>51.0</td>\n      <td>217.647059</td>\n      <td>261.697522</td>\n      <td>5.0</td>\n      <td>46.50</td>\n      <td>111.0</td>\n      <td>275.00</td>\n      <td>1145.0</td>\n      <td>51.0</td>\n      <td>4.099466</td>\n      <td>3.043221</td>\n      <td>0.306022</td>\n      <td>1.679363</td>\n      <td>3.037787</td>\n      <td>6.325108</td>\n      <td>11.821290</td>\n    </tr>\n  </tbody>\n</table>\n<p>315 rows × 16 columns</p>\n</div>\n```\n:::\n:::\n\n\nOr, to see averages for diseases per state across all years, we would group by `State` and `Disease`:\n\n::: {#b56a915c .cell execution_count=54}\n``` {.python .cell-code}\ndisease.groupby(by=[\"State\", \"Disease\"]).describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">Cases</th>\n      <th colspan=\"5\" halign=\"left\">Year</th>\n      <th colspan=\"8\" halign=\"left\">CasesPer100k</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>...</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>State</th>\n      <th>Disease</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">Alabama</th>\n      <th>Hepatitis A</th>\n      <td>46.0</td>\n      <td>136.913043</td>\n      <td>130.868182</td>\n      <td>6.0</td>\n      <td>35.50</td>\n      <td>73.5</td>\n      <td>216.50</td>\n      <td>467.0</td>\n      <td>46.0</td>\n      <td>1988.500000</td>\n      <td>...</td>\n      <td>1999.75</td>\n      <td>2011.0</td>\n      <td>46.0</td>\n      <td>3.648793</td>\n      <td>3.729064</td>\n      <td>0.132973</td>\n      <td>0.860860</td>\n      <td>1.717768</td>\n      <td>5.708617</td>\n      <td>12.877434</td>\n    </tr>\n    <tr>\n      <th>Measles</th>\n      <td>66.0</td>\n      <td>3175.484848</td>\n      <td>4196.365912</td>\n      <td>0.0</td>\n      <td>23.50</td>\n      <td>1774.0</td>\n      <td>3784.75</td>\n      <td>18118.0</td>\n      <td>66.0</td>\n      <td>1961.166667</td>\n      <td>...</td>\n      <td>1977.75</td>\n      <td>2002.0</td>\n      <td>66.0</td>\n      <td>107.593367</td>\n      <td>143.192331</td>\n      <td>0.000000</td>\n      <td>0.600964</td>\n      <td>53.786844</td>\n      <td>129.980033</td>\n      <td>590.279330</td>\n    </tr>\n    <tr>\n      <th>Mumps</th>\n      <td>34.0</td>\n      <td>185.735294</td>\n      <td>285.659185</td>\n      <td>1.0</td>\n      <td>7.25</td>\n      <td>19.0</td>\n      <td>363.75</td>\n      <td>1025.0</td>\n      <td>34.0</td>\n      <td>1984.529412</td>\n      <td>...</td>\n      <td>1992.75</td>\n      <td>2002.0</td>\n      <td>34.0</td>\n      <td>5.102450</td>\n      <td>7.967464</td>\n      <td>0.025053</td>\n      <td>0.167004</td>\n      <td>0.476587</td>\n      <td>9.596426</td>\n      <td>28.959711</td>\n    </tr>\n    <tr>\n      <th>Pertussis</th>\n      <td>55.0</td>\n      <td>464.163636</td>\n      <td>679.201295</td>\n      <td>1.0</td>\n      <td>24.00</td>\n      <td>65.0</td>\n      <td>996.50</td>\n      <td>2249.0</td>\n      <td>55.0</td>\n      <td>1977.654545</td>\n      <td>...</td>\n      <td>1997.50</td>\n      <td>2011.0</td>\n      <td>55.0</td>\n      <td>15.573160</td>\n      <td>23.568290</td>\n      <td>0.025173</td>\n      <td>0.587737</td>\n      <td>1.552425</td>\n      <td>33.401600</td>\n      <td>76.444596</td>\n    </tr>\n    <tr>\n      <th>Polio</th>\n      <td>39.0</td>\n      <td>155.230769</td>\n      <td>186.117176</td>\n      <td>0.0</td>\n      <td>50.50</td>\n      <td>67.0</td>\n      <td>188.50</td>\n      <td>796.0</td>\n      <td>39.0</td>\n      <td>1947.076923</td>\n      <td>...</td>\n      <td>1956.50</td>\n      <td>1968.0</td>\n      <td>39.0</td>\n      <td>5.265726</td>\n      <td>6.262218</td>\n      <td>0.000000</td>\n      <td>1.685470</td>\n      <td>2.348485</td>\n      <td>6.273355</td>\n      <td>27.429359</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">Wyoming</th>\n      <th>Mumps</th>\n      <td>28.0</td>\n      <td>61.750000</td>\n      <td>142.390861</td>\n      <td>0.0</td>\n      <td>2.00</td>\n      <td>3.5</td>\n      <td>7.25</td>\n      <td>436.0</td>\n      <td>28.0</td>\n      <td>1983.821429</td>\n      <td>...</td>\n      <td>1992.25</td>\n      <td>2001.0</td>\n      <td>28.0</td>\n      <td>17.632509</td>\n      <td>41.088007</td>\n      <td>0.000000</td>\n      <td>0.402704</td>\n      <td>0.726743</td>\n      <td>1.753256</td>\n      <td>123.148148</td>\n    </tr>\n    <tr>\n      <th>Pertussis</th>\n      <td>50.0</td>\n      <td>98.660000</td>\n      <td>148.652534</td>\n      <td>0.0</td>\n      <td>4.00</td>\n      <td>12.0</td>\n      <td>154.50</td>\n      <td>559.0</td>\n      <td>50.0</td>\n      <td>1977.120000</td>\n      <td>...</td>\n      <td>1998.75</td>\n      <td>2011.0</td>\n      <td>50.0</td>\n      <td>36.635964</td>\n      <td>58.913155</td>\n      <td>0.000000</td>\n      <td>0.846719</td>\n      <td>2.319264</td>\n      <td>55.790924</td>\n      <td>227.235772</td>\n    </tr>\n    <tr>\n      <th>Polio</th>\n      <td>36.0</td>\n      <td>41.805556</td>\n      <td>60.885757</td>\n      <td>1.0</td>\n      <td>6.75</td>\n      <td>19.0</td>\n      <td>42.00</td>\n      <td>273.0</td>\n      <td>36.0</td>\n      <td>1945.527778</td>\n      <td>...</td>\n      <td>1954.25</td>\n      <td>1964.0</td>\n      <td>36.0</td>\n      <td>15.125636</td>\n      <td>20.958616</td>\n      <td>0.296736</td>\n      <td>2.869318</td>\n      <td>6.709717</td>\n      <td>15.650277</td>\n      <td>93.174061</td>\n    </tr>\n    <tr>\n      <th>Rubella</th>\n      <td>21.0</td>\n      <td>66.714286</td>\n      <td>191.147624</td>\n      <td>1.0</td>\n      <td>2.00</td>\n      <td>6.0</td>\n      <td>12.00</td>\n      <td>861.0</td>\n      <td>21.0</td>\n      <td>1978.095238</td>\n      <td>...</td>\n      <td>1984.00</td>\n      <td>1995.0</td>\n      <td>21.0</td>\n      <td>19.367791</td>\n      <td>55.357490</td>\n      <td>0.203371</td>\n      <td>0.440929</td>\n      <td>1.242236</td>\n      <td>2.547296</td>\n      <td>247.880350</td>\n    </tr>\n    <tr>\n      <th>Smallpox</th>\n      <td>24.0</td>\n      <td>74.250000</td>\n      <td>105.328162</td>\n      <td>1.0</td>\n      <td>2.00</td>\n      <td>9.5</td>\n      <td>119.00</td>\n      <td>334.0</td>\n      <td>24.0</td>\n      <td>1939.625000</td>\n      <td>...</td>\n      <td>1945.25</td>\n      <td>1952.0</td>\n      <td>24.0</td>\n      <td>31.957904</td>\n      <td>45.915825</td>\n      <td>0.341297</td>\n      <td>0.779701</td>\n      <td>3.886957</td>\n      <td>50.388562</td>\n      <td>149.775785</td>\n    </tr>\n  </tbody>\n</table>\n<p>355 rows × 24 columns</p>\n</div>\n```\n:::\n:::\n\n\nAnd so on, with any combination required.\n\n_Note: We didn't show it here, but you can also group by single columns, too._\n\nYou may have noticed that there is too much data to really get a sense of it in the interactive Quarto prompt. The quickest way around this is to use the [to_clipboard()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard) method, and then paste the data into your favorite spreadsheet program and you can get a better look.\n\n::: {#d42457b4 .cell execution_count=55}\n``` {.python .cell-code}\ndisease.groupby(by=[\"State\", \"Disease\"]).describe().to_clipboard()\n```\n:::\n\n\nThe `to_clipboard()` function can be very handy!\n\n### Plotting the Data\n\nHaving gotten ourselves acquainted with the data, we should make some plots! Let's see how common the diseases were across all states and all years for which we have data.\n\n::: {#228d13c3 .cell execution_count=56}\n``` {.python .cell-code}\n(\n    # Select only the columns we need for this chart\n    disease[[\"Disease\", \"Cases\"]]\n    # Group the data by disease\n    .groupby(by=\"Disease\")\n    # Take the sum of the cases\n    .agg({\"Cases\": \"sum\"})\n    # The groupby() operation will make Disease the row names,\n    # but we want them as a column.\n    .reset_index(\"Disease\")\n    # Sort the rows by number of cases\n    .sort_values(\"Cases\", ascending=False)\n    # Plot the data\n    .plot(\n        # Do a bar chart\n        kind=\"bar\",\n        # The x-axis is disease name\n        x=\"Disease\",\n        # The y-axis is the number of cases\n        y=\"Cases\",\n        # We want to log transform the y-axis\n        logy=True,\n        # Drop the legend since we only have a single series of data to plot\n        legend=False,\n        # Give the y-axis a label\n        ylabel=\"Cases\",\n    )\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-57-output-1.png){}\n:::\n:::\n\n\nMeasles is by far the most common disease in the dataset. Let's see if the prevalence of different diseases changes over time.\n\n::: {#06857199 .cell execution_count=57}\n``` {.python .cell-code}\nplot_data = (\n    disease[[\"Disease\", \"Year\", \"Cases\"]]\n    .groupby(by=[\"Disease\", \"Year\"])\n    .agg({\"Cases\": \"sum\"})\n    .reset_index([\"Disease\", \"Year\"])\n)\n\nplot_data.plot(\n    kind=\"line\",\n    x=\"Year\",\n    y=\"Cases\",\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-58-output-1.png){}\n:::\n:::\n\n\nOops! That's not what we want. Pandas uses [matplotlib](https://matplotlib.org/) under the hood, and by default, it works more naturally with a slightly different data format. For reference, here is the data we just tried to plot:\n\n::: {#5591b629 .cell execution_count=58}\n``` {.python .cell-code}\nplot_data\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Disease</th>\n      <th>Year</th>\n      <th>Cases</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Hepatitis A</td>\n      <td>1966</td>\n      <td>32416</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Hepatitis A</td>\n      <td>1967</td>\n      <td>38280</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Hepatitis A</td>\n      <td>1968</td>\n      <td>45204</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Hepatitis A</td>\n      <td>1969</td>\n      <td>46012</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Hepatitis A</td>\n      <td>1970</td>\n      <td>55188</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>310</th>\n      <td>Smallpox</td>\n      <td>1948</td>\n      <td>446</td>\n    </tr>\n    <tr>\n      <th>311</th>\n      <td>Smallpox</td>\n      <td>1949</td>\n      <td>67</td>\n    </tr>\n    <tr>\n      <th>312</th>\n      <td>Smallpox</td>\n      <td>1950</td>\n      <td>42</td>\n    </tr>\n    <tr>\n      <th>313</th>\n      <td>Smallpox</td>\n      <td>1951</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>314</th>\n      <td>Smallpox</td>\n      <td>1952</td>\n      <td>16</td>\n    </tr>\n  </tbody>\n</table>\n<p>315 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nLet's adjust the format to one that works better for the plotting function:\n\n::: {#4a8c2d4b .cell execution_count=59}\n``` {.python .cell-code}\nplot_data = (\n    # Select the columns we need\n    disease[[\"Disease\", \"Year\", \"Cases\"]]\n    # Group by disease-year pairs\n    .groupby(by=[\"Disease\", \"Year\"])\n    # Get the sum of the cases across the grouping variables\n    .agg({\"Cases\": \"sum\"})\n    # Convert the row names back to columns\n    .reset_index([\"Disease\", \"Year\"])\n    # Pivot! (See below for an explanation)\n    .pivot(\n        # Set the Year column to be the row index of the resulting table\n        index=\"Year\",\n        # Take the new columns from the unique values in the Disease column\n        columns=\"Disease\",\n        # Take the values for the new columns from the data in the Cases column\n        values=\"Cases\",\n    )\n    # Pivoting sets Year as the row names, so convert it back to a column\n    .reset_index(\"Year\")\n)\n\n# Don't worry about this--it's just to make the data print in a nicer way.\nplot_data.columns.name = None\n\nplot_data\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Hepatitis A</th>\n      <th>Measles</th>\n      <th>Mumps</th>\n      <th>Pertussis</th>\n      <th>Polio</th>\n      <th>Rubella</th>\n      <th>Smallpox</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1928</td>\n      <td>NaN</td>\n      <td>483337.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4756.0</td>\n      <td>NaN</td>\n      <td>36470.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1929</td>\n      <td>NaN</td>\n      <td>339061.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2746.0</td>\n      <td>NaN</td>\n      <td>38389.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1930</td>\n      <td>NaN</td>\n      <td>384597.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>8964.0</td>\n      <td>NaN</td>\n      <td>45728.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1931</td>\n      <td>NaN</td>\n      <td>438435.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>15743.0</td>\n      <td>NaN</td>\n      <td>28708.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1932</td>\n      <td>NaN</td>\n      <td>390114.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3829.0</td>\n      <td>NaN</td>\n      <td>10740.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>2007</td>\n      <td>2243.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6999.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>2008</td>\n      <td>2030.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6754.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>2009</td>\n      <td>1580.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>8940.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>2010</td>\n      <td>4060.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>14112.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>2011</td>\n      <td>1102.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>11100.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>84 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\nAs you can see, we've taken the original data and made it wider. _(If you're familiar with R's [Tidyverse](https://www.tidyverse.org/), you may recognize this operation as taking [tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html) and turning into so-called \"messy\" data.)_\n\nThe only new thing here is the [pivot()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot) function. Pivoting data can be a little tricky to get used to. The basic operation is taking unique values from a column and using each of those unique values to create a new column. (It's actually more flexible than that, but that's the general idea.)\n\nIn this case, we want to make new columns from the unique values in the `Disease` column (e.g., Measles, Mumps, and Rubella). The values of those new columns will be taken from the `Cases` column.\n\nNow we can plot it!\n\n::: {#64a53a76 .cell execution_count=60}\n``` {.python .cell-code}\ndisease_by_year_plot = plot_data.plot(\n    # We want a line chart\n    kind=\"line\",\n    # Put Year on the x-axis\n    # (The y-axis is set implicitly as the other columns)\n    x=\"Year\",\n    # Log transform the y-axis\n    logy=True,\n    # Give the y-axis a label\n    ylabel=\"Cases\",\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-61-output-1.png){}\n:::\n:::\n\n\nWhat do you notice about this data? Let me list out some of the questions/observations that might come to mind when first looking at this plot:\n\n- Why do many of the diseases have sharp declines and eventually drop out of the plot after a while?\n- Why is there a gap in the Pertussis (whooping cough) data?\n- Why is Pertussis the only one that has been on a steady increase since the 1970s?\n- What's with the big spike in measles cases in the 1980s?\n- Why don't all the diseases have data going back to the earliest years in the dataset?\n- Are there any state-by-state trends, or do they mainly follow the national trends?\n- Hang on, these are all diseases that we have good vaccination programs for....\n\n_Note: The corgis page with this data doesn't provide much info, but I think it's fairly safe to assume that when there are no cases reported for a given disease in a given year, that probably means there were no observed cases of that disease in that year._\n\nOnce you get to that last point, a lot of the other questions are probably pretty easy to explain! Let's see if the introduction of the vaccine for these diseases corresponds with the decline in cases.\n\nThe polio vaccine was tested in 1954 and introduced in 1955 by Jonas Salk, becoming a significant breakthrough in the fight against polio. Let's draw a little vertical dashed line at the year 1955 and see what it looks like.\n\n::: {#9f1e22b9 .cell execution_count=61}\n``` {.python .cell-code}\nplot_data.plot(kind=\"line\", x=\"Year\", logy=True, ylabel=\"Cases\")\n# Draw a gray, dashed, vertical line at year 1955\nplt.axvline(x=1955, color=\"#999999\", linestyle=\"--\")\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-62-output-1.png){}\n:::\n:::\n\n\nYep! As you might have guessed, the polio cases really start a sharp decline after the introduction of the vaccine.\n\nWhat about smallpox? The history of smallpox vaccination is a bit more circuitous than polio, but two key dates I found were 1939, which saw the start of egg-based smallpox vaccine production by the Texas Department of Health, and 1948, which was when they began to be used in vaccination campaigns (see Wikipedia's [Smallpox vaccine](https://en.wikipedia.org/wiki/Smallpox_vaccine) article). So let's draw the plot again with those two dates highlighted.\n\n::: {#1635dab6 .cell execution_count=62}\n``` {.python .cell-code}\nplot_data.plot(kind=\"line\", x=\"Year\", logy=True, ylabel=\"Cases\")\nplt.axvline(x=1939, color=\"#999999\", linestyle=\"--\")\nplt.axvline(x=1948, color=\"#999999\", linestyle=\"--\")\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-63-output-1.png){}\n:::\n:::\n\n\nAgain, that sharp decline we see lines up pretty well with those key dates in the history of the smallpox vaccination program.\n\nSo, we have now gotten a pretty solid working hypothesis that the drop offs in cases for these diseases are probably due to the introduction of vaccination programs! But what about the interesting variability shown in the measles and pertussis data? I will leave that as an exercise for the reader....\n\n### Public Health Data Wrap-Up\n\nBy examining public health data, we've gained experience working with time series data. We've also seen how the patterns we observe in this data can help direct our research questions and approaches.\n\n## Pandas Tour\n\nTo wrap up, let's summarize everything by giving you a \"little\" reference that you can use for guidance.\n\nFor this, we can use the classic coffee data.\n\n::: {#2f2b8745 .cell execution_count=63}\n``` {.python .cell-code}\ncoffee = pd.read_csv(\"../_data/coffee_small.csv\")\ncoffee\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Creating Data Frames\n\nThere are a ton of ways to create data frames in Pandas. (E.g., check out the docs for [DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame) and the pages linked from that page.) However, to keep it simple, we will stick with [read_csv()](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas.read_csv) and creating data frames from Python dictionaries.\n\nReading from a CSV file:\n\n```python\ndf = read_csv(\"/path/to/data.csv\")\n```\n\nUsing a dictionary to specify columns:\n\n::: {#f53636d3 .cell execution_count=64}\n``` {.python .cell-code}\ndf = pd.DataFrame(\n    {\n        \"Gene\": [\"gene_1\", \"gene_2\", \"gene_3\"],\n        \"Sequence\": [\"ACTG\", \"AAGT\", \"GGCT\"],\n        \"Sample\": [\"Sample 1\", \"Sample 2\", \"Sample 2\"],\n    }\n)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gene</th>\n      <th>Sequence</th>\n      <th>Sample</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>gene_1</td>\n      <td>ACTG</td>\n      <td>Sample 1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>gene_2</td>\n      <td>AAGT</td>\n      <td>Sample 2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>gene_3</td>\n      <td>GGCT</td>\n      <td>Sample 2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Subsetting and Filtering Rows and Columns\n\n#### Selecting Columns\n\nTo get individual columns, use the bracket notation.\n\n::: {#e69b5600 .cell execution_count=65}\n``` {.python .cell-code}\ncoffee[\"Country\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n0       Colombia\n1       Colombia\n2       Colombia\n3       Colombia\n4       Colombia\n         ...    \n410    Guatemala\n411    Guatemala\n412    Guatemala\n413       Mexico\n414       Mexico\nName: Country, Length: 415, dtype: object\n```\n:::\n:::\n\n\nTo select multiple columns, use the bracket notation, but pass in a list of column names rather than a single value.\n\n::: {#7735486c .cell execution_count=66}\n``` {.python .cell-code}\ncoffee[[\"Country\", \"Year\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nIt is often a good idea to save the columns that you want to get in a list, and pass that instead. This can help keep things clear and neat, especially if you have a ton of columns that you're selecting. Additionally, it can be useful if you build up the list of columns to subset programmatically.\n\n::: {#8f519449 .cell execution_count=67}\n``` {.python .cell-code}\ncolumns = [\"Country\", \"Year\"]\ncoffee[columns]\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\nSometimes, you may only want a single row, but you want the output to be a `DataFrame` rather than a `Series`.\n\n::: {#1171c85a .cell execution_count=68}\n``` {.python .cell-code}\ncoffee[[\"Country\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\nSometimes you want to select columns based on patterns. For example, to take all the columns that start with `Score`, we can use `filter()`:\n\n::: {#85790460 .cell execution_count=69}\n``` {.python .cell-code}\ncoffee.filter(regex=r\"^Score\")\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nThat is using a regular expression (regex) to specify matching any column whose name starts with `Score`. (If you need an introduction to regular expressions see [Appendix 2 -- Regex](/chapters/A02_regex.qmd).)\n\nYou can also use a substring matching version:\n\n::: {#40d0a6a2 .cell execution_count=70}\n``` {.python .cell-code}\ncoffee.filter(like=\"Score\")\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n#### Filtering Data\n\nA common operation is to keep or reject rows of data based on their values in certain columns. For example, to keep study participants aged 65 and over, or to reject any counties with median income greater than $35,000. We can do this using `query()`.\n\nHere are some examples with the coffee data.\n\nSelect rows where the country is Mexico:\n\n::: {#4ce4c0f3 .cell execution_count=71}\n``` {.python .cell-code}\ncoffee.query(\"Country == 'Mexico'\")\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>74</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.25</td>\n      <td>8.17</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>75</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.83</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>7.58</td>\n      <td>7.67</td>\n      <td>7.92</td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.00</td>\n      <td>7.92</td>\n      <td>7.42</td>\n      <td>8.08</td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>381</th>\n      <td>Mexico</td>\n      <td>2014</td>\n      <td>7.58</td>\n      <td>7.75</td>\n      <td>7.42</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>382</th>\n      <td>Mexico</td>\n      <td>2014</td>\n      <td>7.08</td>\n      <td>7.08</td>\n      <td>6.92</td>\n      <td>7.08</td>\n    </tr>\n    <tr>\n      <th>383</th>\n      <td>Mexico</td>\n      <td>2014</td>\n      <td>6.92</td>\n      <td>7.00</td>\n      <td>6.83</td>\n      <td>6.92</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>195 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nSelect rows where the country is Colombia and the year is 2014:\n\n::: {#6763f8bc .cell execution_count=72}\n``` {.python .cell-code}\ncoffee.query(\"Country == 'Colombia' and Year == 2014\")\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>327</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.92</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.92</td>\n    </tr>\n    <tr>\n      <th>328</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.92</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>329</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>330</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.67</td>\n      <td>7.67</td>\n      <td>7.50</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>331</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.83</td>\n      <td>7.75</td>\n      <td>7.58</td>\n      <td>7.58</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>337</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.50</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>338</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.58</td>\n      <td>7.75</td>\n      <td>7.50</td>\n      <td>7.58</td>\n    </tr>\n    <tr>\n      <th>339</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.83</td>\n      <td>7.67</td>\n      <td>7.50</td>\n      <td>7.58</td>\n    </tr>\n    <tr>\n      <th>340</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.50</td>\n      <td>7.58</td>\n      <td>7.58</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>341</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n      <td>7.58</td>\n    </tr>\n  </tbody>\n</table>\n<p>15 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nSelect rows where the aroma and flavor scores are both at least 8:\n\n::: {#42b74e58 .cell execution_count=73}\n``` {.python .cell-code}\ncoffee.query(\"`Score.Aroma` >= 8 and `Score.Aroma` >= 8\")\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>31</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>7.83</td>\n      <td>8.33</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.25</td>\n      <td>8.00</td>\n      <td>7.67</td>\n      <td>7.92</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.00</td>\n      <td>7.83</td>\n      <td>7.67</td>\n      <td>7.83</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.17</td>\n      <td>7.83</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.25</td>\n      <td>8.17</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>344</th>\n      <td>Guatemala</td>\n      <td>2014</td>\n      <td>8.00</td>\n      <td>7.92</td>\n      <td>7.67</td>\n      <td>7.58</td>\n    </tr>\n    <tr>\n      <th>350</th>\n      <td>Guatemala</td>\n      <td>2014</td>\n      <td>8.00</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>Colombia</td>\n      <td>2015</td>\n      <td>8.17</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>385</th>\n      <td>Colombia</td>\n      <td>2015</td>\n      <td>8.17</td>\n      <td>7.83</td>\n      <td>7.58</td>\n      <td>8.08</td>\n    </tr>\n    <tr>\n      <th>391</th>\n      <td>Colombia</td>\n      <td>2015</td>\n      <td>8.00</td>\n      <td>7.50</td>\n      <td>7.50</td>\n      <td>7.67</td>\n    </tr>\n  </tbody>\n</table>\n<p>20 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nDo you see how we put backticks around the column names? This is because it had a dot (`.`) in the name. Whenever you have special characters, like dot or spaces, you will need to use backticks around the variable name.\n\nSelect rows where the aftertaste score was at least 8 and the acidity was below 7:\n\n::: {#76904b6a .cell execution_count=74}\n``` {.python .cell-code}\ncoffee.query(\"`Score.Aftertaste` >= 8 or `Score.Acidity` < 7\")\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>30</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.17</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.25</td>\n      <td>8.17</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.08</td>\n      <td>8.17</td>\n      <td>8.00</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>193</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.33</td>\n      <td>7.17</td>\n      <td>7.00</td>\n      <td>6.75</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>7.00</td>\n      <td>6.83</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>230</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.00</td>\n      <td>6.58</td>\n      <td>6.67</td>\n      <td>6.83</td>\n    </tr>\n    <tr>\n      <th>233</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.92</td>\n      <td>6.92</td>\n      <td>6.92</td>\n      <td>6.92</td>\n    </tr>\n    <tr>\n      <th>237</th>\n      <td>Colombia</td>\n      <td>2013</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.17</td>\n    </tr>\n    <tr>\n      <th>383</th>\n      <td>Mexico</td>\n      <td>2014</td>\n      <td>6.92</td>\n      <td>7.00</td>\n      <td>6.83</td>\n      <td>6.92</td>\n    </tr>\n    <tr>\n      <th>387</th>\n      <td>Colombia</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>8.00</td>\n      <td>7.67</td>\n    </tr>\n  </tbody>\n</table>\n<p>13 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nSelect rows where the year is prior to 2015, or the Flavor and the Aftertaste are above 7.75.\n\n::: {#61ebf86b .cell execution_count=75}\n``` {.python .cell-code}\ncoffee.query(\"Year < 2015 or (`Score.Flavor` > 7.75 and `Score.Aftertaste` > 7.75)\")\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>380</th>\n      <td>Mexico</td>\n      <td>2014</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>7.17</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>381</th>\n      <td>Mexico</td>\n      <td>2014</td>\n      <td>7.58</td>\n      <td>7.75</td>\n      <td>7.42</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>382</th>\n      <td>Mexico</td>\n      <td>2014</td>\n      <td>7.08</td>\n      <td>7.08</td>\n      <td>6.92</td>\n      <td>7.08</td>\n    </tr>\n    <tr>\n      <th>383</th>\n      <td>Mexico</td>\n      <td>2014</td>\n      <td>6.92</td>\n      <td>7.00</td>\n      <td>6.83</td>\n      <td>6.92</td>\n    </tr>\n    <tr>\n      <th>384</th>\n      <td>Colombia</td>\n      <td>2015</td>\n      <td>8.17</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n  </tbody>\n</table>\n<p>385 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nYou can also use the bracket notation for filtering data:\n\n::: {#968823d8 .cell execution_count=76}\n``` {.python .cell-code}\ncoffee[coffee[\"Year\"] >= 2014]\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>327</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.92</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.92</td>\n    </tr>\n    <tr>\n      <th>328</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.92</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>329</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>330</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.67</td>\n      <td>7.67</td>\n      <td>7.50</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>331</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.83</td>\n      <td>7.75</td>\n      <td>7.58</td>\n      <td>7.58</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>88 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nYou will find that Pandas has many ways to achieve the same thing. While this flexibility can be helpful especially if you are doing some exploratory analysis for your research, it is often a good idea to stick to one way of doing things, especially within a single script or data pipeline.\n\n#### Selecting Rows and Columns\n\nSometimes, you may need to select rows and columns at the same time. For this, you can use `loc()` and `iloc()`. These tend to feel more natural in situations in which you have a row index. Our data does not, so let's use this little data frame instead to illustrate what I mean.\n\n::: {#125fc156 .cell execution_count=77}\n``` {.python .cell-code}\ndf = pd.DataFrame(\n    {\"A\": [1, 3, 5, 6], \"B\": [2, 1, 4, 7], \"C\": [4, 3, 3, 1], \"D\": [9, 7, 4, 2]},\n    index=[\"Patient 1\", \"Patient 2\", \"Patient 3\", \"Patient 4\"],\n)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Patient 1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>4</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>Patient 2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Patient 3</th>\n      <td>5</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Patient 4</th>\n      <td>6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIn this data frame, row names are \"Patient 1\" to \"Patient 4\" and the column names are A-D.\n\nGetting a single value:\n\n::: {#73e0bfd3 .cell execution_count=78}\n``` {.python .cell-code}\ndf.loc[\"Patient 2\", \"C\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\nnp.int64(3)\n```\n:::\n:::\n\n\nGetting the values for a single row as a series:\n\n::: {#cf5547e3 .cell execution_count=79}\n``` {.python .cell-code}\ndf.loc[\"Patient 4\", :]\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\nA    6\nB    7\nC    1\nD    2\nName: Patient 4, dtype: int64\n```\n:::\n:::\n\n\nGetting a single column as a series:\n\n::: {#dbd8c8bb .cell execution_count=80}\n``` {.python .cell-code}\ndf.loc[:, \"A\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\nPatient 1    1\nPatient 2    3\nPatient 3    5\nPatient 4    6\nName: A, dtype: int64\n```\n:::\n:::\n\n\nGetting multiple rows for a single column:\n\n::: {#c619b54a .cell execution_count=81}\n``` {.python .cell-code}\ndf.loc[[\"Patient 1\", \"Patient 3\"], \"B\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\nPatient 1    2\nPatient 3    4\nName: B, dtype: int64\n```\n:::\n:::\n\n\nGetting multiple contiguous rows for a single column. (We can use Python's slice notation for this. Just be aware that the end of the slice is included in the output when you use `loc()`, unlike the usual Python slicing.)\n\n::: {#57c19f35 .cell execution_count=82}\n``` {.python .cell-code}\ndf.loc[\"Patient 1\":\"Patient 3\", \"B\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\nPatient 1    2\nPatient 2    1\nPatient 3    4\nName: B, dtype: int64\n```\n:::\n:::\n\n\nGetting multiple columns for a single row:\n\n::: {#0c810040 .cell execution_count=83}\n``` {.python .cell-code}\ndf.loc[\"Patient 2\", [\"B\", \"D\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\nB    1\nD    7\nName: Patient 2, dtype: int64\n```\n:::\n:::\n\n\nGetting multiple contiguous columns for a single row using slicing.\n\n::: {#700a3955 .cell execution_count=84}\n``` {.python .cell-code}\ndf.loc[\"Patient 2\", \"B\":\"D\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```\nB    1\nC    3\nD    7\nName: Patient 2, dtype: int64\n```\n:::\n:::\n\n\nGetting multiple rows and multiple columns:\n\n::: {#ada3c76d .cell execution_count=85}\n``` {.python .cell-code}\ndf.loc[[\"Patient 1\", \"Patient 4\"], [\"B\", \"D\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=85}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Patient 1</th>\n      <td>2</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>Patient 4</th>\n      <td>7</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd of course, you can mix and match slicing as required to get exactly the data you need:\n\n::: {#09bfc6f0 .cell execution_count=86}\n``` {.python .cell-code}\ndf.loc[\"Patient 1\":\"Patient 3\", [\"A\", \"C\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Patient 1</th>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Patient 2</th>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Patient 3</th>\n      <td>5</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Subsetting Rows\n\nThere are a few nice functions for sampling and downsizing your data frames. This can be helpful if you're working with huge data, or if you just want to get a better handle on things before working on the full data.\n\nGet the first few rows of a table:\n\n::: {#7b5f905b .cell execution_count=87}\n``` {.python .cell-code}\ncoffee.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nGet the last few rows of a table:\n\n::: {#1f08f07c .cell execution_count=88}\n``` {.python .cell-code}\ncoffee.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSample 5% of the rows of a table:\n\n::: {#b8d8591b .cell execution_count=89}\n``` {.python .cell-code}\ncoffee.sample(frac=0.05)\n```\n\n::: {.cell-output .cell-output-display execution_count=89}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>221</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.08</td>\n      <td>7.00</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>316</th>\n      <td>Mexico</td>\n      <td>2013</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.58</td>\n    </tr>\n    <tr>\n      <th>126</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.58</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.17</td>\n    </tr>\n    <tr>\n      <th>326</th>\n      <td>Mexico</td>\n      <td>2013</td>\n      <td>7.08</td>\n      <td>7.00</td>\n      <td>6.83</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>269</th>\n      <td>Colombia</td>\n      <td>2013</td>\n      <td>7.33</td>\n      <td>7.33</td>\n      <td>7.58</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>291</th>\n      <td>Guatemala</td>\n      <td>2013</td>\n      <td>7.83</td>\n      <td>7.67</td>\n      <td>7.33</td>\n      <td>7.33</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>7.50</td>\n      <td>7.50</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>333</th>\n      <td>Colombia</td>\n      <td>2014</td>\n      <td>7.67</td>\n      <td>7.67</td>\n      <td>7.67</td>\n      <td>7.92</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.58</td>\n      <td>7.67</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>346</th>\n      <td>Guatemala</td>\n      <td>2014</td>\n      <td>7.58</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>8.00</td>\n    </tr>\n  </tbody>\n</table>\n<p>21 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nRandomly select 10 rows from a table:\n\n::: {#e48c688b .cell execution_count=90}\n``` {.python .cell-code}\ncoffee.sample(n=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=90}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>349</th>\n      <td>Guatemala</td>\n      <td>2014</td>\n      <td>7.58</td>\n      <td>7.83</td>\n      <td>7.33</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>251</th>\n      <td>Colombia</td>\n      <td>2013</td>\n      <td>7.75</td>\n      <td>7.42</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>246</th>\n      <td>Colombia</td>\n      <td>2013</td>\n      <td>7.67</td>\n      <td>7.67</td>\n      <td>7.67</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.58</td>\n      <td>7.42</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>135</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.58</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.17</td>\n      <td>7.83</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>137</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.33</td>\n      <td>7.25</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.50</td>\n      <td>7.67</td>\n      <td>7.50</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.50</td>\n      <td>7.50</td>\n      <td>7.42</td>\n      <td>7.58</td>\n    </tr>\n    <tr>\n      <th>353</th>\n      <td>Guatemala</td>\n      <td>2014</td>\n      <td>7.33</td>\n      <td>7.83</td>\n      <td>7.17</td>\n      <td>8.17</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSelect the top 10 highest entries for a column:\n\n::: {#b5d9ea8d .cell execution_count=91}\n``` {.python .cell-code}\ncoffee.nlargest(10, \"Score.Flavor\")\n```\n\n::: {.cell-output .cell-output-display execution_count=91}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>74</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.25</td>\n      <td>8.17</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.17</td>\n      <td>7.83</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>8.17</td>\n      <td>7.50</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.08</td>\n      <td>8.17</td>\n      <td>8.00</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>8.00</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.17</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>7.83</td>\n      <td>8.33</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.25</td>\n      <td>8.00</td>\n      <td>7.67</td>\n      <td>7.92</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>8.00</td>\n      <td>7.67</td>\n      <td>8.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSelect the 10 smallest entries for a column:\n\n::: {#6747df1a .cell execution_count=92}\n``` {.python .cell-code}\ncoffee.nsmallest(10, \"Score.Aroma\")\n```\n\n::: {.cell-output .cell-output-display execution_count=92}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>234</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.50</td>\n      <td>6.67</td>\n      <td>6.42</td>\n      <td>7.17</td>\n    </tr>\n    <tr>\n      <th>306</th>\n      <td>Guatemala</td>\n      <td>2013</td>\n      <td>6.50</td>\n      <td>6.33</td>\n      <td>6.50</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>6.67</td>\n      <td>6.50</td>\n      <td>6.33</td>\n      <td>7.00</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>6.75</td>\n      <td>6.50</td>\n      <td>6.17</td>\n      <td>7.00</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>6.75</td>\n      <td>6.67</td>\n      <td>6.17</td>\n      <td>7.17</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.92</td>\n      <td>7.17</td>\n      <td>7.08</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>194</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.92</td>\n      <td>7.17</td>\n      <td>7.17</td>\n      <td>7.17</td>\n    </tr>\n    <tr>\n      <th>211</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.92</td>\n      <td>6.92</td>\n      <td>6.67</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>231</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.92</td>\n      <td>6.42</td>\n      <td>6.17</td>\n      <td>7.33</td>\n    </tr>\n    <tr>\n      <th>233</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.92</td>\n      <td>6.92</td>\n      <td>6.92</td>\n      <td>6.92</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Reshaping Data\n\nYou will often find yourself needing to change the layout of your data. This can include sorting, reindexing (i.e., adding or changing indices), renaming columns, concatenating, pivoting, and melting data frames.\n\n#### Sorting Rows and Columns\n\nSorting a data frame by a specific column:\n\n::: {#1fad23c4 .cell execution_count=93}\n``` {.python .cell-code}\ncoffee.sort_values(\"Score.Aftertaste\")\n```\n\n::: {.cell-output .cell-output-display execution_count=93}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>231</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.92</td>\n      <td>6.42</td>\n      <td>6.17</td>\n      <td>7.33</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.17</td>\n      <td>6.08</td>\n      <td>6.17</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>6.75</td>\n      <td>6.67</td>\n      <td>6.17</td>\n      <td>7.17</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.17</td>\n      <td>6.17</td>\n      <td>6.17</td>\n      <td>7.08</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>6.75</td>\n      <td>6.50</td>\n      <td>6.17</td>\n      <td>7.00</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>237</th>\n      <td>Colombia</td>\n      <td>2013</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.17</td>\n    </tr>\n    <tr>\n      <th>387</th>\n      <td>Colombia</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>8.00</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.17</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.08</td>\n      <td>8.17</td>\n      <td>8.00</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.25</td>\n      <td>8.17</td>\n      <td>8.00</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe default sort order is ascending. If you want descending order, you must ask for it:\n\n::: {#52dcca5b .cell execution_count=94}\n``` {.python .cell-code}\ncoffee.sort_values(\"Score.Aftertaste\", ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=94}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>74</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.25</td>\n      <td>8.17</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>237</th>\n      <td>Colombia</td>\n      <td>2013</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.17</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>8.00</td>\n      <td>8.17</td>\n    </tr>\n    <tr>\n      <th>387</th>\n      <td>Colombia</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>8.00</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.08</td>\n      <td>8.17</td>\n      <td>8.00</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>231</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>6.92</td>\n      <td>6.42</td>\n      <td>6.17</td>\n      <td>7.33</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>6.75</td>\n      <td>6.50</td>\n      <td>6.17</td>\n      <td>7.00</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.17</td>\n      <td>6.08</td>\n      <td>6.17</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.17</td>\n      <td>6.17</td>\n      <td>6.17</td>\n      <td>7.08</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>6.75</td>\n      <td>6.67</td>\n      <td>6.17</td>\n      <td>7.17</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nYou can sort values based on multiple columns as well. In addition, you can specify multiple values to the `ascending` option so that you can have some columns sorted ascending and others sorted descending. Let's first sort by ascending year, and then by descending flavor (that is within a year, put the best scoring coffees at the top).\n\n::: {#d01f3132 .cell execution_count=95}\n``` {.python .cell-code}\ncoffee.sort_values([\"Year\", \"Score.Flavor\"], ascending=[True, False])\n```\n\n::: {.cell-output .cell-output-display execution_count=95}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>74</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.25</td>\n      <td>8.17</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>8.17</td>\n      <td>8.17</td>\n      <td>7.83</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>Guatemala</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>8.17</td>\n      <td>7.50</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>Mexico</td>\n      <td>2012</td>\n      <td>8.08</td>\n      <td>8.17</td>\n      <td>8.00</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n    <tr>\n      <th>408</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.42</td>\n      <td>7.17</td>\n      <td>7.83</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nFinally, you can sort based on the names of row and column indices. Here is an example that sorts by the names of the columns.\n\n::: {#d2c25ae6 .cell execution_count=96}\n``` {.python .cell-code}\ncoffee.sort_index(axis=\"columns\")\n```\n\n::: {.cell-output .cell-output-display execution_count=96}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Score.Acidity</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>7.75</td>\n      <td>7.83</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>8.00</td>\n      <td>7.83</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>2012</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>7.42</td>\n      <td>7.00</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>7.25</td>\n      <td>6.75</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>7.42</td>\n      <td>7.42</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>2015</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nIn pandas, every row and column needs a unique identifier called an index. While pandas will automatically assign numeric indexes if none are provided, you can also specify custom row and column names to better organize and access your data.\n\n#### Renaming Columns\n\nRenaming columns is very useful for dealing with your colleague's messy data! You will learn this one like the back of your hand.\n\n::: {#df428abe .cell execution_count=97}\n``` {.python .cell-code}\ncoffee.rename(\n    columns={\n        \"Score.Acidity\": \"Acidity\",\n        \"Score.Aftertaste\": \"Aftertaste\",\n        \"Score.Aroma\": \"Aroma\",\n        \"Score.Flavor\": \"Flavor\",\n    }\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=97}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Aroma</th>\n      <th>Flavor</th>\n      <th>Aftertaste</th>\n      <th>Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nIn cases like this, where there is a pattern in the column names that you want to get rid of, you can use a Python function.\n\n::: {#bd8a408c .cell execution_count=98}\n``` {.python .cell-code}\ncoffee.rename(columns=lambda name: name.replace(\"Score.\", \"\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=98}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Aroma</th>\n      <th>Flavor</th>\n      <th>Aftertaste</th>\n      <th>Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nNice!\n\n#### Dropping Columns\n\nDropping columns is easy with `drop()`:\n\n::: {#84966dbf .cell execution_count=99}\n``` {.python .cell-code}\ncoffee.drop(columns=[\"Country\", \"Year\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n#### Reindexing\n\n\"Reindexing\" sounds a bit weird, but it is all about editing row and column names. A common operation involves turning row names into an explicit column, or turning a column into row names. Let's go back to our tiny data frame again.\n\n::: {#ad066197 .cell execution_count=100}\n``` {.python .cell-code}\ndf = pd.DataFrame(\n    {\"A\": [1, 3, 5, 6], \"B\": [2, 1, 4, 7], \"C\": [4, 3, 3, 1], \"D\": [9, 7, 4, 2]},\n    index=[\"Patient 1\", \"Patient 2\", \"Patient 3\", \"Patient 4\"],\n)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Patient 1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>4</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>Patient 2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Patient 3</th>\n      <td>5</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Patient 4</th>\n      <td>6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nCurrently, the row names are the patient IDs. Let's change those to a column called `\"PatientID\"`:\n\n::: {#e97d3ce1 .cell execution_count=101}\n``` {.python .cell-code}\ndf = df.reset_index(names=\"PatientID\")\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PatientID</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Patient 1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>4</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Patient 2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Patient 3</td>\n      <td>5</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Patient 4</td>\n      <td>6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow the row index is the numbers 0-3. If we want to turn the `PatientID` column back into the row index, we use `set_index()` like this:\n\n::: {#8b100617 .cell execution_count=102}\n``` {.python .cell-code}\ndf = df.set_index(\"PatientID\")\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=102}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n    <tr>\n      <th>PatientID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Patient 1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>4</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>Patient 2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>Patient 3</th>\n      <td>5</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>Patient 4</th>\n      <td>6</td>\n      <td>7</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere are times when having a row index can be convenient, but generally I have data as columns only as it can make for cleaner data manipulation.\n\n#### Concatenating\n\nSometimes you have multiple data frames that you want to glue together. This can be done either by glueing rows and keeping columns the same, or by glueing columns and keeping rows the same.\n\nTo see it in action, let's make two small data frames. One for group A:\n\n::: {#9300f9a1 .cell execution_count=103}\n``` {.python .cell-code}\ngroup_a = pd.DataFrame({\"Treatment\": [1, 2, 3], \"Control\": [4, 5, 6]})\ngroup_a\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Treatment</th>\n      <th>Control</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd one for group B:\n\n::: {#13e164c3 .cell execution_count=104}\n``` {.python .cell-code}\ngroup_b = pd.DataFrame({\"Treatment\": [10, 20, 30], \"Control\": [40, 50, 60]})\ngroup_b\n```\n\n::: {.cell-output .cell-output-display execution_count=104}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Treatment</th>\n      <th>Control</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>30</td>\n      <td>60</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##### Glue Rows\n\nGlue the rows (this also works for more than two data frames):\n\n::: {#1d70af79 .cell execution_count=105}\n``` {.python .cell-code}\npd.concat([group_a, group_b])\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Treatment</th>\n      <th>Control</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>10</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>30</td>\n      <td>60</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThat's fine, but you probably still want the group info. You can add in the column before concatenating:\n\n::: {#aac1ffd8 .cell execution_count=106}\n``` {.python .cell-code}\npd.concat(\n    [\n        group_a.assign(Group=\"A\"),\n        group_b.assign(Group=\"B\"),\n    ]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=106}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Treatment</th>\n      <th>Control</th>\n      <th>Group</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>10</td>\n      <td>40</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>50</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>30</td>\n      <td>60</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere we go! Now we haven't lost the info.\n\n##### Glue Columns\n\nGlue the columns:\n\n::: {#3624629b .cell execution_count=107}\n``` {.python .cell-code}\nprint(pd.concat([group_a, group_b], axis=\"columns\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Treatment  Control  Treatment  Control\n0          1        4         10       40\n1          2        5         20       50\n2          3        6         30       60\n```\n:::\n:::\n\n\nNow that is a little silly to glue the columns in this way since it results in duplicate column names. You might want to follow it with a rename operation. Let's pretend that the two data frames represent two study groups, each having values for treatment and control. Then you might do something like this:\n\n::: {#7a004312 .cell execution_count=108}\n``` {.python .cell-code}\npd.concat(\n    [\n        group_a.add_prefix(\"GroupA\"),\n        group_b.add_prefix(\"GroupB\"),\n    ],\n    axis=\"columns\",\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=108}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GroupATreatment</th>\n      <th>GroupAControl</th>\n      <th>GroupBTreatment</th>\n      <th>GroupBControl</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n      <td>10</td>\n      <td>40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n      <td>20</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n      <td>30</td>\n      <td>60</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNice!\n\n#### Pivoting and Melting\n\nAlright, now this can get a little bit tricky. These operations are sometimes called pivot wider and pivot longer. Let's just talk about the basics, but know that you can get pretty fancy with this if required.\n\n(We will use the renamed columns so the output looks a little nicer.)\n\n::: {#9a007186 .cell execution_count=109}\n``` {.python .cell-code}\ncoffee_renamed = coffee.rename(columns=lambda name: name.replace(\"Score.\", \"\"))\ncoffee_tidy = coffee_renamed.melt(\n    # These variables identify observations\n    id_vars=[\"Country\", \"Year\"],\n    # The column name for the variables\n    var_name=\"Category\",\n    # The column name for the values of those variables\n    value_name=\"Score\",\n)\n\ncoffee_tidy\n```\n\n::: {.cell-output .cell-output-display execution_count=109}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Category</th>\n      <th>Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>Aroma</td>\n      <td>7.83</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>Aroma</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>Aroma</td>\n      <td>7.67</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>Aroma</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>Aroma</td>\n      <td>7.75</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1655</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>Acidity</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>1656</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>Acidity</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>1657</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>Acidity</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>1658</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>Acidity</td>\n      <td>7.42</td>\n    </tr>\n    <tr>\n      <th>1659</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>Acidity</td>\n      <td>7.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>1660 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nCertain operations require [tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html) or are more natural when the data is in this format. For example, making plots using [seaborn](https://seaborn.pydata.org/).\n\n::: {#2e503ae2 .cell execution_count=110}\n``` {.python .cell-code}\nimport seaborn as sns\n\nsns.boxplot(coffee_tidy.sort_values(\"Category\"), x=\"Category\", y=\"Score\", hue=\"Country\")\n```\n\n::: {.cell-output .cell-output-display}\n![](07_exploratory_data_analysis_files/figure-html/cell-111-output-1.png){}\n:::\n:::\n\n\n(Converting the `coffee_tidy` data frame back to the messy form is a bit trickier because Country-Year pairs don't form unique pairs. So we will use a different example for this.)\n\n::: {#edb5da5a .cell execution_count=111}\n``` {.python .cell-code}\ndf = pd.DataFrame(\n    {\n        \"Group\": [\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\"],\n        \"Condition\": [\n            \"Treatment\",\n            \"Treatment\",\n            \"Control\",\n            \"Control\",\n            \"Treatment\",\n            \"Treatment\",\n            \"Control\",\n            \"Control\",\n        ],\n        \"Replicate\": [1, 2, 1, 2, 1, 2, 1, 2],\n        \"Result\": [53.6, 57.2, 66.3, 61.4, 48.6, 49.2, 63.5, 67.8],\n    }\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=111}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Group</th>\n      <th>Condition</th>\n      <th>Replicate</th>\n      <th>Result</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>Treatment</td>\n      <td>1</td>\n      <td>53.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>Treatment</td>\n      <td>2</td>\n      <td>57.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>Control</td>\n      <td>1</td>\n      <td>66.3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A</td>\n      <td>Control</td>\n      <td>2</td>\n      <td>61.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>B</td>\n      <td>Treatment</td>\n      <td>1</td>\n      <td>48.6</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>B</td>\n      <td>Treatment</td>\n      <td>2</td>\n      <td>49.2</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>B</td>\n      <td>Control</td>\n      <td>1</td>\n      <td>63.5</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>B</td>\n      <td>Control</td>\n      <td>2</td>\n      <td>67.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow, we use `pivot()` to convert it back to the so-called \"messy\" format:\n\n::: {#a28b0887 .cell execution_count=112}\n``` {.python .cell-code}\ndf_messy = df.pivot(\n    index=[\"Group\", \"Replicate\"],\n    columns=\"Condition\",\n    values=\"Result\",\n).reset_index()\ndf_messy.columns.name = None\ndf_messy\n```\n\n::: {.cell-output .cell-output-display execution_count=112}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Group</th>\n      <th>Replicate</th>\n      <th>Control</th>\n      <th>Treatment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>1</td>\n      <td>66.3</td>\n      <td>53.6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>2</td>\n      <td>61.4</td>\n      <td>57.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B</td>\n      <td>1</td>\n      <td>63.5</td>\n      <td>48.6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B</td>\n      <td>2</td>\n      <td>67.8</td>\n      <td>49.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo go back to the tidy format:\n\n::: {#9014aeed .cell execution_count=113}\n``` {.python .cell-code}\ndf_tidy = df_messy.melt(\n    id_vars=[\"Group\", \"Replicate\"],\n    var_name=\"Condition\",\n    value_name=\"Result\",\n)\ndf_tidy\n```\n\n::: {.cell-output .cell-output-display execution_count=113}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Group</th>\n      <th>Replicate</th>\n      <th>Condition</th>\n      <th>Result</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>1</td>\n      <td>Control</td>\n      <td>66.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>2</td>\n      <td>Control</td>\n      <td>61.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>B</td>\n      <td>1</td>\n      <td>Control</td>\n      <td>63.5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B</td>\n      <td>2</td>\n      <td>Control</td>\n      <td>67.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A</td>\n      <td>1</td>\n      <td>Treatment</td>\n      <td>53.6</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>A</td>\n      <td>2</td>\n      <td>Treatment</td>\n      <td>57.2</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>B</td>\n      <td>1</td>\n      <td>Treatment</td>\n      <td>48.6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>B</td>\n      <td>2</td>\n      <td>Treatment</td>\n      <td>49.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nCheck it out:\n\n::: {#17c3a0bb .cell execution_count=114}\n``` {.python .cell-code}\na = (\n    df.sort_values(by=[\"Group\", \"Condition\", \"Replicate\"])\n    .sort_index(axis=\"columns\")\n    .reset_index(drop=True)\n)\n\ndisplay(a)\n\nb = (\n    df_tidy.sort_values(by=[\"Group\", \"Condition\", \"Replicate\"])\n    .sort_index(axis=\"columns\")\n    .reset_index(drop=True)\n)\n\ndisplay(b)\n\nassert a.equals(b)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Condition</th>\n      <th>Group</th>\n      <th>Replicate</th>\n      <th>Result</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Control</td>\n      <td>A</td>\n      <td>1</td>\n      <td>66.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Control</td>\n      <td>A</td>\n      <td>2</td>\n      <td>61.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Treatment</td>\n      <td>A</td>\n      <td>1</td>\n      <td>53.6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Treatment</td>\n      <td>A</td>\n      <td>2</td>\n      <td>57.2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Control</td>\n      <td>B</td>\n      <td>1</td>\n      <td>63.5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Control</td>\n      <td>B</td>\n      <td>2</td>\n      <td>67.8</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Treatment</td>\n      <td>B</td>\n      <td>1</td>\n      <td>48.6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Treatment</td>\n      <td>B</td>\n      <td>2</td>\n      <td>49.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Condition</th>\n      <th>Group</th>\n      <th>Replicate</th>\n      <th>Result</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Control</td>\n      <td>A</td>\n      <td>1</td>\n      <td>66.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Control</td>\n      <td>A</td>\n      <td>2</td>\n      <td>61.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Treatment</td>\n      <td>A</td>\n      <td>1</td>\n      <td>53.6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Treatment</td>\n      <td>A</td>\n      <td>2</td>\n      <td>57.2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Control</td>\n      <td>B</td>\n      <td>1</td>\n      <td>63.5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Control</td>\n      <td>B</td>\n      <td>2</td>\n      <td>67.8</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Treatment</td>\n      <td>B</td>\n      <td>1</td>\n      <td>48.6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Treatment</td>\n      <td>B</td>\n      <td>2</td>\n      <td>49.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n_Note: we use `display()` here rather than print to get nice looking tables when we need to \"print\" multiple items in a single codeblock._\n\nThis is a bit of a trickier topic, but I still wanted to give you an idea of how it works for when you run into it in your own research.\n\n### Making New Columns\n\nThere are a couple of ways to make new columns in a data frame.\n\nThe first way is with `assign()` which creates a new data frame with the requested column added to it.\n\nLet's say that you wanted to make a score summary that is a linear combination of a few of the score columns.\n\n::: {#c6590920 .cell execution_count=115}\n``` {.python .cell-code}\ncoffee.assign(\n    Score=lambda df: 1.5 * df[\"Score.Aroma\"]\n    + 2 * df[\"Score.Flavor\"]\n    + 0.75 * df[\"Score.Aftertaste\"]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=115}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n      <th>Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>33.5575</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n      <td>33.3375</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>33.0375</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>32.2825</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>32.9375</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n      <td>31.0000</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n      <td>31.1600</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n      <td>30.2775</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n      <td>32.5300</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n      <td>31.8675</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\nIf you check the original data frame, you will see that the `Score` column that we just created is not there:\n\n::: {#d70e0ded .cell execution_count=116}\n``` {.python .cell-code}\ntry:\n    coffee[\"Score\"]\nexcept KeyError:\n    print(\"no Score column!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nno Score column!\n```\n:::\n:::\n\n\nIf you want to actually save that column in your original data frame, you need to use the bracket notation again.\n\n::: {#205c240c .cell execution_count=117}\n``` {.python .cell-code}\ncoffee[\"Score\"] = (\n    1.5 * coffee[\"Score.Aroma\"]\n    + 2 * coffee[\"Score.Flavor\"]\n    + 0.75 * coffee[\"Score.Aftertaste\"]\n)\ncoffee\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n      <th>Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>33.5575</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n      <td>33.3375</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>33.0375</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>32.2825</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>32.9375</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n      <td>31.0000</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n      <td>31.1600</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n      <td>30.2775</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n      <td>32.5300</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n      <td>31.8675</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\nAnd now the `Score` column is part of the `coffee` data frame. Let's drop it out so it doesn't stick around for the rest of the tutorial.\n\n::: {#c9ea58e9 .cell execution_count=118}\n``` {.python .cell-code}\ncoffee = coffee.drop(columns=\"Score\")\n```\n:::\n\n\n### Grouping Data\n\nGrouping and aggregating data is a very common operation. For example, you might want to run aggregation functions on groups of data like, what's the mean Flavor score for countries in this data set?\n\n::: {#fb33f76a .cell execution_count=119}\n``` {.python .cell-code}\ncoffee.groupby(\"Country\").agg({\"Score.Flavor\": \"mean\"})\n# coffee.groupby(\"Country\").agg({\"Score.Aroma\": [\"mean\", \"min\", \"mean\"]})\n```\n\n::: {.cell-output .cell-output-display execution_count=119}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Score.Flavor</th>\n    </tr>\n    <tr>\n      <th>Country</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Colombia</th>\n      <td>7.602347</td>\n    </tr>\n    <tr>\n      <th>Guatemala</th>\n      <td>7.461803</td>\n    </tr>\n    <tr>\n      <th>Mexico</th>\n      <td>7.374513</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYou can run the aggregations on multiple columns at once. Here we take the mean flavor and the sum of the aroma. (Yes, that's a weird thing to do, it's just here to show you that you don't have to run the same function for each column.)\n\n::: {#3264dff3 .cell execution_count=120}\n``` {.python .cell-code}\ncoffee.groupby(\"Country\").agg({\"Score.Flavor\": \"mean\", \"Score.Aroma\": \"sum\"})\n```\n\n::: {.cell-output .cell-output-display execution_count=120}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Score.Flavor</th>\n      <th>Score.Aroma</th>\n    </tr>\n    <tr>\n      <th>Country</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Colombia</th>\n      <td>7.602347</td>\n      <td>752.53</td>\n    </tr>\n    <tr>\n      <th>Guatemala</th>\n      <td>7.461803</td>\n      <td>920.60</td>\n    </tr>\n    <tr>\n      <th>Mexico</th>\n      <td>7.374513</td>\n      <td>1454.48</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYou can even run multiple aggregation functions on each column:\n\n::: {#f633936f .cell execution_count=121}\n``` {.python .cell-code}\ncoffee.groupby(\"Country\").agg(\n    {\"Score.Flavor\": [\"mean\", \"min\", \"max\"], \"Score.Aroma\": \"sum\"}\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=121}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">Score.Flavor</th>\n      <th>Score.Aroma</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>min</th>\n      <th>max</th>\n      <th>sum</th>\n    </tr>\n    <tr>\n      <th>Country</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Colombia</th>\n      <td>7.602347</td>\n      <td>7.25</td>\n      <td>8.00</td>\n      <td>752.53</td>\n    </tr>\n    <tr>\n      <th>Guatemala</th>\n      <td>7.461803</td>\n      <td>6.08</td>\n      <td>8.17</td>\n      <td>920.60</td>\n    </tr>\n    <tr>\n      <th>Mexico</th>\n      <td>7.374513</td>\n      <td>6.42</td>\n      <td>8.25</td>\n      <td>1454.48</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIn many cases you need to group based on multiple columns. In this dataset, it makes sense to group by Country-Year pairs:\n\n::: {#62a8a2db .cell execution_count=122}\n``` {.python .cell-code}\ncoffee.groupby([\"Country\", \"Year\"]).agg(\n    {\"Score.Flavor\": [\"mean\", \"std\"], \"Score.Aroma\": [\"mean\", \"std\"]}\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=122}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">Score.Flavor</th>\n      <th colspan=\"2\" halign=\"left\">Score.Aroma</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th>mean</th>\n      <th>std</th>\n      <th>mean</th>\n      <th>std</th>\n    </tr>\n    <tr>\n      <th>Country</th>\n      <th>Year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">Colombia</th>\n      <th>2012</th>\n      <td>7.621667</td>\n      <td>0.166900</td>\n      <td>7.637333</td>\n      <td>0.124677</td>\n    </tr>\n    <tr>\n      <th>2013</th>\n      <td>7.546579</td>\n      <td>0.184028</td>\n      <td>7.646053</td>\n      <td>0.170493</td>\n    </tr>\n    <tr>\n      <th>2014</th>\n      <td>7.617333</td>\n      <td>0.128478</td>\n      <td>7.728667</td>\n      <td>0.142672</td>\n    </tr>\n    <tr>\n      <th>2015</th>\n      <td>7.690000</td>\n      <td>0.115388</td>\n      <td>7.795333</td>\n      <td>0.213972</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Guatemala</th>\n      <th>2012</th>\n      <td>7.401364</td>\n      <td>0.501006</td>\n      <td>7.508182</td>\n      <td>0.363237</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2015</th>\n      <td>7.595714</td>\n      <td>0.230508</td>\n      <td>7.625000</td>\n      <td>0.172571</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">Mexico</th>\n      <th>2012</th>\n      <td>7.370741</td>\n      <td>0.324318</td>\n      <td>7.457284</td>\n      <td>0.275460</td>\n    </tr>\n    <tr>\n      <th>2013</th>\n      <td>7.369500</td>\n      <td>0.236609</td>\n      <td>7.486500</td>\n      <td>0.161156</td>\n    </tr>\n    <tr>\n      <th>2014</th>\n      <td>7.400909</td>\n      <td>0.234668</td>\n      <td>7.394545</td>\n      <td>0.239097</td>\n    </tr>\n    <tr>\n      <th>2015</th>\n      <td>7.585000</td>\n      <td>0.120208</td>\n      <td>7.665000</td>\n      <td>0.120208</td>\n    </tr>\n  </tbody>\n</table>\n<p>12 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nThat would be the mean and standard deviation of flavor and aroma for all country-year pairs.\n\n### Combining Data Sets\n\nAnother useful bit of functionality is merging datasets that have overlapping columns. These is a lot like doing joins in a relational database. While Pandas does have a `join()` function, we are mainly going to be using `merge()` instead, as it doesn't require that the tables have meaningful row indices.\n\nLet's say we have a data frame that includes useful information about the countries for which we have coffee data. (Okay, we're not using necessarily \"useful\" data in this example, but work with me a bit.)\n\n::: {#0ffc5391 .cell execution_count=123}\n``` {.python .cell-code}\ncountry_capitals = pd.DataFrame(\n    {\n        \"Country\": [\"Colombia\", \"Guatemala\", \"Mexico\"],\n        \"Capital\": [\"Bogotá\", \"Guatemala City\", \"Mexico City\"],\n    }\n)\ncountry_capitals\n```\n\n::: {.cell-output .cell-output-display execution_count=123}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Capital</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>Bogotá</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Guatemala</td>\n      <td>Guatemala City</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Mexico</td>\n      <td>Mexico City</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOkay, now let's say we wanted that info in our coffee data frame. We can join them using `merge()`.\n\n::: {#11d44eb9 .cell execution_count=124}\n``` {.python .cell-code}\ncoffee.merge(country_capitals)\n```\n\n::: {.cell-output .cell-output-display execution_count=124}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Year</th>\n      <th>Score.Aroma</th>\n      <th>Score.Flavor</th>\n      <th>Score.Aftertaste</th>\n      <th>Score.Acidity</th>\n      <th>Capital</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>Bogotá</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.92</td>\n      <td>7.83</td>\n      <td>7.75</td>\n      <td>Bogotá</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.67</td>\n      <td>7.83</td>\n      <td>7.83</td>\n      <td>8.00</td>\n      <td>Bogotá</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.42</td>\n      <td>7.67</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>Bogotá</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Colombia</td>\n      <td>2012</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>7.75</td>\n      <td>Bogotá</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>410</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.25</td>\n      <td>7.00</td>\n      <td>7.25</td>\n      <td>Guatemala City</td>\n    </tr>\n    <tr>\n      <th>411</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.00</td>\n      <td>7.42</td>\n      <td>Guatemala City</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>Guatemala</td>\n      <td>2015</td>\n      <td>7.25</td>\n      <td>7.17</td>\n      <td>6.75</td>\n      <td>7.25</td>\n      <td>Guatemala City</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.75</td>\n      <td>7.67</td>\n      <td>7.42</td>\n      <td>7.42</td>\n      <td>Mexico City</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>Mexico</td>\n      <td>2015</td>\n      <td>7.58</td>\n      <td>7.50</td>\n      <td>7.33</td>\n      <td>7.50</td>\n      <td>Mexico City</td>\n    </tr>\n  </tbody>\n</table>\n<p>415 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\nThere is actually a lot to the `merge()` function which we won't get into too much here, but one important thing is how missing data is handled between data frames. Let's make some more data to look at this.\n\nFirst, a data frame for jobs:\n\n::: {#4c51b642 .cell execution_count=125}\n``` {.python .cell-code}\njobs = pd.DataFrame(\n    {\n        \"Name\": [\"Rahaf\", \"Nanjin\", \"Lujain\", \"Lovisa\"],\n        \"Job\": [\"Chef\", \"Courier\", \"Engineer\", \"Bookmaker\"],\n    }\n)\njobs\n```\n\n::: {.cell-output .cell-output-display execution_count=125}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Job</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rahaf</td>\n      <td>Chef</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nanjin</td>\n      <td>Courier</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lujain</td>\n      <td>Engineer</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lovisa</td>\n      <td>Bookmaker</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd another one for ages:\n\n::: {#8dc82a67 .cell execution_count=126}\n``` {.python .cell-code}\nages = pd.DataFrame(\n    {\n        \"Name\": [\"Rahaf\", \"Nanjin\", \"Lujain\", \"Lovisa\"],\n        \"Age\": [\"47\", \"26\", \"31\", \"61\"],\n    }\n)\nages\n```\n\n::: {.cell-output .cell-output-display execution_count=126}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rahaf</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nanjin</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lujain</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lovisa</td>\n      <td>61</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo demonstrate the joins, we will need to take subsets of the data frames in which some of the rows overlap and some of them don't:\n\n::: {#deff22ca .cell execution_count=127}\n``` {.python .cell-code}\njobs_subset = jobs.head(3)\nages_subset = ages.tail(3)\n\ndisplay(jobs_subset)\ndisplay(ages_subset)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Job</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rahaf</td>\n      <td>Chef</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nanjin</td>\n      <td>Courier</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lujain</td>\n      <td>Engineer</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Nanjin</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lujain</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lovisa</td>\n      <td>61</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Inner Join\n\nThe inner join keeps rows that only belong to both sets of data. (This is like the inner join in SQL.)\n\n::: {#25e6df07 .cell execution_count=128}\n``` {.python .cell-code}\njobs_subset.merge(ages_subset, how=\"inner\")\n```\n\n::: {.cell-output .cell-output-display execution_count=128}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Job</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Nanjin</td>\n      <td>Courier</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lujain</td>\n      <td>Engineer</td>\n      <td>31</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Outer Join\n\nThe outer join keeps all the rows, even if some of the rows are only present in one data frame or the other. Missing values will be `NaN` by default. (This is like the full outer join in SQL.)\n\n::: {#85501c3f .cell execution_count=129}\n``` {.python .cell-code}\njobs_subset.merge(ages_subset, how=\"outer\")\n```\n\n::: {.cell-output .cell-output-display execution_count=129}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Job</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Lovisa</td>\n      <td>NaN</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lujain</td>\n      <td>Engineer</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Nanjin</td>\n      <td>Courier</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Rahaf</td>\n      <td>Chef</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Left Join\n\nThe left join keeps all the rows in the left data frame, even if they are not present in the right data frame. Missing values will be `NaN` by default. (This is like the left outer join in SQL.)\n\n::: {#555c9a0a .cell execution_count=130}\n``` {.python .cell-code}\njobs_subset.merge(ages_subset, how=\"left\")\n```\n\n::: {.cell-output .cell-output-display execution_count=130}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Job</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Rahaf</td>\n      <td>Chef</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nanjin</td>\n      <td>Courier</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lujain</td>\n      <td>Engineer</td>\n      <td>31</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Right Join\n\nThe right join keeps all the rows in the right data frame, even if they are not present in the left data frame. Missing values will be `NaN` by default. (This is like the right outer join in SQL.)\n\n::: {#d47f324e .cell execution_count=131}\n``` {.python .cell-code}\njobs_subset.merge(ages_subset, how=\"right\")\n```\n\n::: {.cell-output .cell-output-display execution_count=131}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Job</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Nanjin</td>\n      <td>Courier</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lujain</td>\n      <td>Engineer</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lovisa</td>\n      <td>NaN</td>\n      <td>61</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#tip-07-merge-considerations .callout-tip title=\"Stop & Think\" collapse=\"false\"}\nWhen merging datasets, what factors should you consider when choosing between inner, outer, left, and right joins?\n:::\n\n### Pandas Summary\n\nPandas is a huge and fairly complex library. But you can of get a lot of real work done by getting comfortable with a fairly small subset, and then working your way through more advanced concepts over time.\n\n## Wrap-Up\n\nIn this chapter, we went over the basics of exploratory data analysis (EDA) in Python using the Pandas library. We went through three examples datasets together letting our curiosity guide us. Then, we went through a big tour of the Pandas library for you to use as a reference to some of the most frequently used Pandas functions. Pandas is a big library with a lot of different functions and different ways to do things. This chapter should give you enough Pandas skills to start using it in your own research, and give you the basics you need to get more in-depth with the library later in your career.\n\n## Suggested Readings\n\nPandas is a massive library. These resources can help get a handle on it:\n\n- [Pandas cheat sheet](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf)\n  Pandas docs\n- [Pandas User Guide](https://pandas.pydata.org/pandas-docs/stable/user_guide/index.html)\n- [The pandas DataFrame: Make Working With Data Delightful](https://realpython.com/pandas-dataframe)\n\n## Practice Problems\n\nConsider the following data when answering the following problems.\n\n::: {#178cf086 .cell execution_count=132}\n``` {.python .cell-code}\nstate_cancer_data = {\n    \"State\": [\n        \"Delaware\",\n        \"Maryland\",\n        \"Virginia\",\n        \"Pennsylvania\",\n        \"New York\",\n        \"New Jersey\",\n    ],\n    \"Cancer Deaths\": [\n        13_000,\n        72_000,\n        99_000,\n        202_000,\n        249_000,\n        117_000,\n    ],\n    \"Population\": [\n        6_300_000,\n        40_500_000,\n        56_100_000,\n        88_800_000,\n        135_700_000,\n        61_500_000,\n    ],\n    \"Percent Aged 65+\": [\n        19,\n        16,\n        16,\n        19,\n        17,\n        17,\n    ],\n    \"Median Household Income\": [\n        68_000,\n        85_000,\n        74_000,\n        62_000,\n        69_000,\n        83_000,\n    ],\n}\n```\n:::\n\n\n### 7.1 {#sec-problem-7.1}\n\nCreate a Pandas DataFrame to represent the state cancer and demographic data given above.\n\n### 7.2 {#sec-problem-7.2}\n\nCreate a new column called `Cancer Deaths Per 100k` that represents the number of cancer cases per 100,000 people for each state.\n\n### 7.3 {#sec-problem-7.3}\n\nWhich states have a cancer rate of at least 180 cases per 100k and a median household income less than $68,500?\n\n### 7.4 {#sec-problem-7.4}\n\nWhat is the relationship between median household income and the rate of cancer deaths?\n\n### 7.5 {#sec-problem-7.5}\n\nWhat is the relationship between the percent of the population aged 65 and older and the rate of cancer deaths?\n\n",
    "supporting": [
      "07_exploratory_data_analysis_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}