{
  "hash": "b62a962dad6aa680ace0aa12dd395a77",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: \"Ryan M. Moore, PhD\"\ndate-modified: last-modified\ndate: \"2025-05-23\"\njupyter: python3\n---\n\n# Basics: Practice Problems\n\nThese are the practice problems for @sec-basics.  For solutions, see @sec-basics-practice-problem-solutions.\n\n## Assigning Variables and Printing {#sec-assigning-variables-printing}\n\n### Task Description\n\nCreate a variable to store the name of a bacterial species (e.g., `\"Escherichia coli\"`). Assign another variable for the number of base pairs in its genome (e.g., `4_600_000`). Print a statement describing the species and its genome size.\n\n### Learning Objectives\n\n- Assign values to variables\n- Print formatted output\n- Use underscores in large numbers for readability\n\n### Solution\n\n::: {#fd886817 .cell execution_count=1}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# Should print:\n# The species Escherichia coli has a genome size of 4600000 base pairs.\n```\n\n### Common Issues\n\n- Forgetting to enclose text in quotes\n- Forgetting the `f` in the f-strings\n- Not matching variable names in the f-string\n\n### Optional Extensions\n\n- Try with a different species and genome size.\n- Try without using f-strings\n\n## Calculating and Formatting GC Content {#sec-calculating-formatting-gc-content}\n\n### Task Description\n\nGiven variables `gc_count` (number of G or C bases) and `total_bases` (total number of bases in the genome), calculate the GC content as a decimal value and print it to two decimal places.\n\n### Learning Objectives\n\n- Perform basic arithmetic operations\n- Calculate percentages or ratios\n- Use f-strings with formatting\n\n### Solution\n\n::: {#15ffedd4 .cell execution_count=2}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# Should print:\n# GC content: 0.28\n```\n\n### Common Issues\n\n- Using integer division rather than float division (e.g., should use `/`, not `//`)\n- Forgetting to format decimal places\n\n### Optional Extensions\n\n- Multiply by `100` to display as a percentage.\n\n## String Slicing and Concatenation {#sec-string-slicing-concatenation}\n\n### Task Description\n\n1. Create a variable `sequence` to hold the DNA sequence string `\"ACTGGTCAA\"`.\n2. Then use string slicing (e.g., `s[start:end]`) to create two more variables, one to hold the first four bases, and the other to hold the remaining five bases.\n3. Concatenate the two parts back together\n4. Print everything to check your work\n\n### Learning Objectives\n\n- Create string variables and concatenate strings with `+`\n- Use string slicing `[start:end]` notation\n- Understand zero-based indexing; extract parts of a string\n\n### Solution\n\n::: {#67b0759b .cell execution_count=3}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# Should output something like:\n# sequence='ACTGGTCAA'\n# first_four='ACTG'; last_five='GTCAA'\n# combined='ACTGGTCAA'\n```\n\n### Common Issues\n\n- Off-by-one errors in slicing\n- Incorrect use of negative indices\n\n### Optional Extensions\n\n- Use f-string formatting to combine the first and last parts of the sequence\n- Try the slice notation where you don't specify both the start and the end\n- Extract the last 3 bases using negative indices\n\n## Working with Booleans and Conditional Execution {#sec-working-booleans-conditional-execution}\n\n### Task Description\n\nYou have a variable `quality_score`. Write code that prints `\"Pass\"` if `quality_score` is greater than or equal to `30`, and `\"Fail\"` otherwise.\n\nThen, given two boolean variables, `is_long_enough` and `is_high_quality`, print `\"Accepted\"` if both are `True`, otherwise `\"Rejected\"`.\n\n### Learning Objectives\n\n- Use boolean comparisons and conditional statements\n- Work with boolean variables and logical operators `and`\n\n### Solution\n\n::: {#d115ad56 .cell execution_count=4}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# quality_score = 28 -> Fail\n# quality_score = 32 -> Pass\n# is_long_enough = True, is_high_quality = False -> Rejected\n# is_long_enough = True, is_high_quality = True -> Accepted\n```\n\n### Common Issues\n\n- Using `>` instead of `>=` for the test\n- Using `or` instead of `and` in the boolean expression\n\n### Optional Extensions\n\n- Add a message showing the quality score if it is under `30`\n- Show the user the reason for rejection\n\n## Using Built-in Functions and List Operations {#sec-using-builtin-functions-list-ops}\n\n### Task Description\n\nYou are given the following gene expression values: `2.1`, `3.4`, `1.8`, `6.2`, and `4.0`.\n\n1. Create a list of gene expression values and print the minimum, maximum, and average.\n2. Then, get the first item in the list and print its type.\n\n### Learning Objectives\n\n- Use built-in functions: `min()`, `max()`, `len()`, `sum()`, `type()`\n- Work with lists\n\n### Solution\n\n::: {#572ff0e4 .cell execution_count=5}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# Output:\n# min: 1.8\n# max: 6.2\n# mean: 3.5\n# type of first item: <class 'float'>\n```\n\n### Common Issues\n\n- Calling the functions incorrectly\n- Using the name of the function as your variable name\n\n### Optional Extensions\n\n- Show the average to two decimal places\n\n## Truthy/Falsy and Checking Emptiness {#sec-truthy-falsy-checking-emptiness}\n\n### Task Description\n\nCreate an empty list called `sequences`. Write code to check if the list is empty. If it is, print `\"No sequences found!\"`, otherwise print `\"Sequences loaded!\"`\n\nThen, print the boolean value (`True`/`False`) of several sample values: empty string `\"\"`, `\"AGTC\"`, `0`, `3.14`, empty list, and a non-empty list.\n\n### Learning Objectives\n\n- Understand truthy/falsy values in Python\n- Check for emptiness using `if` statements\n- Use the `bool()` function\n\n### Solution\n\n::: {#3ced7242 .cell execution_count=6}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# For sequences = [], should print: No sequences found!\n# For bool() values: False, True, False, True, False, True\n```\n\n### Common Issues\n\n- Not understanding which values are Truthy/Falsy in Python\n\n### Optional Extensions\n\n- Print the number of loaded sequences if not empty\n\n## Avoiding Built-in Name Shadowing {#sec-avoiding-builtin-name-shadowing}\n\n### Task Description\n\nAssign the DNA sequence `\"ACTG\"` to a variable called `str`, and print its length.  Then use the `str()` function to convert the float `3.14` to a string.  What happens?\n\n### Learning Objectives\n\n- Use appropriate variable names\n- Avoid overwriting built-in functions\n\n### Solution\n\n::: {#63b822a8 .cell execution_count=7}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# Output:\n# 4\n# TypeError: 'str' object is not callable\n```\n\n### Common Issues\n\n- Accidentally shadowing built-ins resulting in confusing errors\n\n### Optional Extensions\n\n- Try the same thing with other built-ins like `list`, `len`\n\n## Filtering Based on Multiple Criteria {#sec-filtering-multiple-criteria}\n\n### Task Description\n\nGiven a sequence with the variables `read_length`, `gc_content`, and `quality_score`, print `\"Read passes all quality filters\"` if:\n\n- The read length is at least `100`\n- The GC Content is no less than `0.4` and no more than `0.6`\n- The quality score is greater than `30`\n\nOtherwise, print `\"Read filtered out\"`.\n\n### Learning Objectives\n\n- Use multiple conditionals with `and`\n- Check ranges and comparison\n\n### Solution\n\n::: {#b35a22f8 .cell execution_count=8}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# All conditions met => \"Read passes all quality filters\"\n# At least one condition not met (e.g., quality score = 25) => \"Read filtered out\"\n```\n\n### Common Issues\n\n- Using `or` instead of `and`\n- Messing up the boundary values\n- Problems turning \"plain language\" to boolean conditions\n\n### Optional Extensions\n\n- Explain which filter was not passed\n\n## Formatting Scientific Output {#sec-formatting-scientific-output}\n\n### Task Description\n\nGiven a `gene_id` (`\"nrdA\"`) and a `p_value` (`0.000012345`), print `\"Gene [gene_id] => [p_value]\"` formatting the p-value in scientific notation with two decimals.\n\nThen print a report about its significance:\n\n- If the p-value is less than `0.01`, print: `Highly significant`\n- If the p-value is less than `0.05`, print: `Significant`\n- If the p-value is less than `0.10`, print: `Almost significant`\n- If the p-value is greater than or equal to `0.10`, print: `Not significant`\n\n### Learning Objectives\n\n- Format numbers as scientific notation\n- if/elif/else chains\n\n### Solution\n\n::: {#fabf3218 .cell execution_count=9}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# Output:\n# Gene nrdA => 1.23e-05\n# Highly significant\n```\n\n### Common Issues\n\n- Forgetting formatting codes in f-strings\n- Incorrect boolean logic\n\n### Optional Extensions\n\n- Only print a single message that includes the gene ID, the p-value, and the significance message.\n\n## Sequence Analysis {#sec-sequence-analysis}\n\n### Task Description\n\nGiven a ssDNA sequence string (`\"TGacTGatcGT\"`), first, convert the sequence to all uppercase letters, then analyze the DNA sequence by printing various information about it:\n\n- Sequence length\n- Count of nucleotides, A, C, G, and T\n- Count of ambiguous bases (N)\n- GC Content as a percentage\n- Calculate the molecular weight of the sequence\n\nTo calculate the molecular weight, use this formula from the [Thermo Fisher](https://www.thermofisher.com/us/en/home/references/ambion-tech-support/rna-tools-and-calculators/dna-and-rna-molecular-weights-and-conversions.html) website:\n\n$M.W. = (A_n * 313.2) + (T_n * 304.2) + (C_n * 289.2) + (G_n * 329.2) + 79.0$\n\nIn the formula, $A_n$ means the number of `A` nucleotides, $T_n$ is the number of `T` nucleotides, and so on.\n\n_Note: Save each calculation to its own variable._\n\n### Learning Objectives\n\n- Perform multiple calculations to solve a single problem\n- Translate mathematical formulas into code\n- Perform basic sequence analysis\n\n### Solution\n\n::: {#569236fe .cell execution_count=10}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# Should print:\n# DNA Sequence: TGACTGATCGT\n# Length: 11\n# Nucleotide counts\n# A: 2, C: 2, G: 3, T: 4\n# Ambiguous count: 0\n# GC Content (%): 45.45454545454545\n# Molecular weight: 3488.2\n```\n\n### Common Issues\n\n- Forgetting to convert to uppercase first\n- Operator precedence in GC content calculation\n- Not implementing the molecular weight formula correctly\n\n### Optional Extensions\n\n- Make up some rules about what properties a \"high quality\" sequence should have, e.g., no more than 3 ambiguous bases, having a certain length or GC percentage, etc. Then check the sequence against those rules.\n\n## Hard: Nested Conditions for Sequence Filtering {#sec-nested-conditions-sequence-filtering}\n\n### Task Description\n\nGiven variables representing a DNA sequence's length, quality score, and ambiguous base count, write nested conditional statements to print filtering messages according to:\n\n- If sequence length is greater than or equal to `200`:\n    - If quality score is greater than or equal to `30`:\n        - If there is no more than one ambiguous base, print `\"Sequence accepted\"`\n        - Else print `\"Sequence rejected: ambiguous bases present\"`\n    - Else print `\"Sequence rejected: low quality\"`\n- Else print `\"Sequence rejected: too short\"`\n\n### Learning Objectives\n\n- Practice nested `if` statements\n- Use logical reasoning to handle multiple conditions\n\n### Solution\n\n::: {#e24a7c45 .cell execution_count=11}\n``` {.python .cell-code}\n# Write your code here!\n```\n:::\n\n\n### Test Cases\n\n```python\n# sequence_length = 250, quality_score = 32, ambiguous_bases = 0 → Sequence accepted\n# ambiguous_bases = 2 → Sequence rejected: too many ambiguous bases\n# quality_score = 28 → Sequence rejected: low quality\n# sequence_length = 150 → Sequence rejected: too short\n```\n\n### Common Issues\n\n- Missing or misplacing indentation\n- Not matching the correct `else` with the corresponding `if`\n\n### Optional Extensions\n\n- Can you re-write the solution so that it doesn't use nested conditional statements?\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}