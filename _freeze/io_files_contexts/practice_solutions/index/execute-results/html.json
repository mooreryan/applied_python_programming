{
  "hash": "72d044976a044de3f4330ec495a0c536",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: \"Ryan M. Moore, PhD\"\ndate-modified: last-modified\ndate: \"2025-04-24\"\njupyter: python3\n---\n\n# Practice Problem Solutions â€” @sec-io-files-contexts {#sec-io-files-contexts-practice-problem-solutions}\n\n## Set Up\n\nSet up some fake data that we will use in the practice problems.\n\n::: {#45c70612 .cell execution_count=1}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"w\") as file:\n    file.write(\"first line\\nsecond line\\nthird line\\n\")\n\ndata_lines = [\n    \"1. Basics\\n\",\n    \"2. Collections\\n\",\n    \"3. Algorithms\\n\",\n    \"4. Functions\\n\",\n    \"5. OOP\\n\",\n    \"6. Errors\\n\",\n    \"7. EDA\\n\",\n    \"8. Stats\\n\",\n    \"9. I/O\\n\",\n]\nwith open(\"data.txt\", \"w\") as file:\n    file.writelines(data_lines)\n```\n:::\n\n\n## Group 1 {#sec-io-files-contexts-practice-problem-solutions-group-1}\n\n1. Open a file called `data.txt` for reading, print its type, then close it.\n\n::: {#b548c6a7 .cell execution_count=2}\n``` {.python .cell-code}\nfile = open(\"data.txt\", \"r\")\nprint(type(file))\nfile.close()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class '_io.TextIOWrapper'>\n```\n:::\n:::\n\n\n2. Write \"Hello, World!\" into a file named `test.txt`.\n\n::: {#fda43dcb .cell execution_count=3}\n``` {.python .cell-code}\nwith open(\"test.txt\", \"w\") as f:\n    f.write(\"Hello, World!\")\n```\n:::\n\n\n3. Read and print all text from a file named `sample.txt`.\n\n::: {#aa2f5fb3 .cell execution_count=4}\n``` {.python .cell-code}\nwith open(\"sample.txt\") as f:\n    content = f.read()\n    print(content)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst line\nsecond line\nthird line\n\n```\n:::\n:::\n\n\n4. Read a file line by line and print each line without the trailing newline character(s).\n\n::: {#86d05b77 .cell execution_count=5}\n``` {.python .cell-code}\nwith open(\"sample.txt\") as file:\n    for line in file:\n        print(line.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst line\nsecond line\nthird line\n```\n:::\n:::\n\n\n5. Append the text \"New Entry\" to `log.txt`.\n\n::: {#b6c6af4e .cell execution_count=6}\n``` {.python .cell-code}\nwith open(\"log.txt\", \"a\") as file:\n    file.write(\"New Entry\\n\")\n```\n:::\n\n\n6. Print the file's name and mode after opening it.\n\n::: {#25cd298f .cell execution_count=7}\n``` {.python .cell-code}\nwith open(\"sample.txt\") as file:\n    print(file.name)\n    print(file.mode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsample.txt\nr\n```\n:::\n:::\n\n\n7. Write three lines to `multi.txt`: \"One\", \"Two\", \"Three\", each on its own line.\n\n::: {#39061e42 .cell execution_count=8}\n``` {.python .cell-code}\nwith open(\"multi.txt\", \"w\") as file:\n    file.write(\"One\\n\")\n    file.write(\"Two\\n\")\n    file.write(\"Three\\n\")\n```\n:::\n\n\n8. Use a for-loop to write the numbers 1-5 to a file (one per line).\n\n::: {#86a08ac1 .cell execution_count=9}\n``` {.python .cell-code}\nwith open(\"numbers.txt\", \"w\") as file:\n    for i in range(1, 6):\n        file.write(str(i) + \"\\n\")\n```\n:::\n\n\n9. Print `\"File is closed\"` if file is closed after exiting a `with`-block.\n\n::: {#bdd4087a .cell execution_count=10}\n``` {.python .cell-code}\nwith open(\"sample.txt\") as file:\n    pass\n\nif file.closed:\n    print(\"File is closed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFile is closed\n```\n:::\n:::\n\n\n10. Use `readline()` to read and print just the first line of `sample.txt`.\n\n::: {#6fc71a25 .cell execution_count=11}\n``` {.python .cell-code}\nwith open(\"sample.txt\") as file:\n    print(file.readline().strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst line\n```\n:::\n:::\n\n\n11. Create a function that prints the contents of a file it is given.\n\n::: {#e53963bd .cell execution_count=12}\n``` {.python .cell-code}\ndef print_file(file_path):\n    with open(file_path) as file:\n        print(file.read())\n```\n:::\n\n\n12. Use a `for` loop to write a list of fruits into a file, one fruit per line.\n\n::: {#9925f4ab .cell execution_count=13}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nwith open(\"fruits.txt\", \"w\") as file:\n    for fruit in fruits:\n        file.write(fruit + \"\\n\")\n```\n:::\n\n\n13. Read and print the first eight characters of `sample.txt`.\n\n::: {#17a13aa2 .cell execution_count=14}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"rb\") as file:\n    print(file.read(8))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nb'first li'\n```\n:::\n:::\n\n\n14. Demonstrate that opening an existing file in write mode (`\"w\"`) mode erases its contents.\n\n::: {#ae1f3c7e .cell execution_count=15}\n``` {.python .cell-code}\nwith open(\"test.txt\", \"w\") as file:\n    file.write(\"contents\")\n\nwith open(\"test.txt\", \"w\") as file:\n    file.write(\"Overwritten!\")\n\nwith open(\"test.txt\") as file:\n    contents = file.read()\n    assert contents == \"Overwritten!\"\n```\n:::\n\n\n15. Use a try-except block to print a message if `not_a_file.txt` does not exist.\n\n::: {#63f35cad .cell execution_count=16}\n``` {.python .cell-code}\ntry:\n    with open(\"not_a_file.txt\") as file:\n        data = file.read()\nexcept FileNotFoundError as error:\n    print(f\"{error=}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nerror=FileNotFoundError(2, 'No such file or directory')\n```\n:::\n:::\n\n\n16. Print file position (using `.tell()`) before and after reading 4 bytes.\n\n::: {#452eac67 .cell execution_count=17}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"rb\") as file:\n    print(file.tell())\n    file.read(4)\n    print(file.tell())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n4\n```\n:::\n:::\n\n\n17. Write binary bytes `b'ABC'` to a file called `bytes.bin`.\n\n::: {#80f0fac0 .cell execution_count=18}\n``` {.python .cell-code}\nwith open(\"bytes.bin\", \"wb\") as file:\n    file.write(b\"ABCDEFGHIJK\")\n```\n:::\n\n\n18. Read the binary file you just created (`bytes.bin`) and print the first five bytes.\n\n::: {#c0164566 .cell execution_count=19}\n``` {.python .cell-code}\nwith open(\"bytes.bin\", \"rb\") as f:\n    print(f.read(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nb'ABCDE'\n```\n:::\n:::\n\n\n19. Use `\"rt\"` mode to read text and `\"wb\"` mode to write bytes.\n\n::: {#170f5945 .cell execution_count=20}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"rt\") as file:\n    print(file.read())\nwith open(\"bytes.bin\", \"wb\") as file:\n    file.write(b\"xyz\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst line\nsecond line\nthird line\n\n```\n:::\n:::\n\n\n20. Print the error message if a file open operation raises an `OSError`.\n\n::: {#32352c3b .cell execution_count=21}\n``` {.python .cell-code}\ntry:\n    with open(\"/fake/file.txt\") as file:\n        content = file.read()\nexcept OSError as error:\n    print(f\"{error=}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nerror=FileNotFoundError(2, 'No such file or directory')\n```\n:::\n:::\n\n\n21. Print the first line from a file, then use `.seek(0)` to go back to the beginning of the file and re-print the first line.\n\n::: {#00eee633 .cell execution_count=22}\n``` {.python .cell-code}\nwith open(\"sample.txt\") as file:\n    print(file.readline().strip())\n    file.seek(0)\n    print(file.readline().strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst line\nfirst line\n```\n:::\n:::\n\n\n22. Use `with` statement to write the line `\"Finished!\"` into `finished.txt`.\n\n::: {#4b7324f8 .cell execution_count=23}\n``` {.python .cell-code}\nwith open(\"finished.txt\", \"w\") as file:\n    file.write(\"Finished!\\n\")\n```\n:::\n\n\n23. Open the file `finished.txt` and append the line `\"Appending again!\"`.\n\n::: {#19d6792c .cell execution_count=24}\n``` {.python .cell-code}\nwith open(\"finished.txt\", \"a\") as file:\n    file.write(\"Appending again!\\n\")\n```\n:::\n\n\n24. Create a dictionary, and write each key-value pair to a file (format: `key => value`).\n\n::: {#251ecce1 .cell execution_count=25}\n``` {.python .cell-code}\nd = {\"A\": 1, \"B\": 2}\nwith open(\"dict.txt\", \"w\") as file:\n    for k, v in d.items():\n        file.write(f\"{k} => {v}\\n\")\n```\n:::\n\n\n25. Print current working directory using `os.getcwd()` module.\n\n```python\nimport os\nprint(os.getcwd())\n```\n\n26. List files in the current directory with `os.listdir()`.\n\n```python\nimport os\nprint(os.listdir(\".\"))\n```\n\n27. Pass a file name to `os.listdir()`, then handle the error using `try/except`.\n\n::: {#7c2aecfa .cell execution_count=26}\n``` {.python .cell-code}\nimport os\n\ndirname = \"sample.txt\"\n\ntry:\n    os.listdir(dirname)\nexcept NotADirectoryError:\n    print(f\"'{dirname}' is not a directory!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'sample.txt' is not a directory!\n```\n:::\n:::\n\n\n28. After writing three lines to a file called `sample.txt`, read the file and print the number of lines. (Use `writelines()` and `readlines()`.)\n\n::: {#2cbfe743 .cell execution_count=27}\n``` {.python .cell-code}\nlines = [\"first line\\n\", \"second line\\n\", \"third line\\n\"]\n\nwith open(\"sample.txt\", \"w\") as file:\n    file.writelines(lines)\n\nwith open(\"sample.txt\") as file:\n    print(len(file.readlines()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n29. Use `seek` to skip the first 3 bytes then print the rest of the file.\n\n::: {#35bcbc70 .cell execution_count=28}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"rb\") as file:\n    file.seek(3)\n    print(file.read())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nb'st line\\nsecond line\\nthird line\\n'\n```\n:::\n:::\n\n\n30. Catch any `OSError` when trying to open a file.\n\n::: {#5cd1c1b7 .cell execution_count=29}\n``` {.python .cell-code}\ntry:\n    with open(\"maybe_missing.txt\") as file:\n        data = file.read()\nexcept OSError as error:\n    print(\"Caught OSError:\", error)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCaught OSError: [Errno 2] No such file or directory: 'maybe_missing.txt'\n```\n:::\n:::\n\n\n## Group 2 {#sec-io-files-contexts-practice-problem-solutions-group-2}\n\n1. Read all lines from `data.txt` into a list, then write every second line to `even_lines.txt`.\n\n::: {#45e2c58e .cell execution_count=30}\n``` {.python .cell-code}\nwith open(\"data.txt\") as file:\n    lines = file.readlines()\n\nwith open(\"even_lines.txt\", \"w\") as file:\n    for i, line in enumerate(lines):\n        if i % 2 == 1:\n            file.write(line)\n\n# Check your work!\nwith open(\"even_lines.txt\") as file:\n    for line in file:\n        print(line.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2. Collections\n4. Functions\n6. Errors\n8. Stats\n```\n:::\n:::\n\n\n2. Write user input (entered with `input()`) to a file called `user.txt`.\n\n```python\ntext = input(\"Enter something: \")\nwith open(\"user.txt\", \"w\") as f:\n    f.write(text)\n```\n\n3. Open `data.txt` for writing and write 10 lines (`\"Line {i}\"`). Then, open the same file again and append a summary line: `\"Total lines: 10\"`.\n\n::: {#0bf66369 .cell execution_count=31}\n``` {.python .cell-code}\nwith open(\"data.txt\", \"w\") as file:\n    for i in range(10):\n        file.write(f\"Line {i + 1}\\n\")\n\nwith open(\"data.txt\", \"a\") as file:\n    file.write(\"Total lines: 10\\n\")\n\n# Check your work!\nwith open(\"data.txt\") as file:\n    print(file.read().strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\nTotal lines: 10\n```\n:::\n:::\n\n\n4. Write each character of a string to a new line in a text file.\n\n::: {#bb4d4841 .cell execution_count=32}\n``` {.python .cell-code}\nmessage = \"coding is cool\"\nwith open(\"chars.txt\", \"w\") as file:\n    for letter in message:\n        file.write(f\"{letter}\\n\")\n\n# Check your work!\nwith open(\"chars.txt\") as file:\n    print(file.read().strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nc\no\nd\ni\nn\ng\n \ni\ns\n \nc\no\no\nl\n```\n:::\n:::\n\n\n5. Ask for a filename. Try to read and print it, or print \"Not found!\" if the file does not exist.\n\n```python\nfilename = input(\"Filename: \")\ntry:\n    with open(filename) as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print(f\"{filename} was not found!\")\n```\n\n_Note: If you are working with the Quarto notebook associated with these solutions, you will need to put the `{}` around the Python block, like `{python}` so that the example can be run. Because it accepts input from standard in, it is not run when generating the HTML content._\n\n6. Write an integer list to a text file, then read it and compute their sum.\n\n::: {#7276cb80 .cell execution_count=33}\n``` {.python .cell-code}\nnumbers = [1, 2, 3, 4]\n\nwith open(\"numbers.txt\", \"w\") as file:\n    for number in numbers:\n        file.write(str(number) + \"\\n\")\n\nwith open(\"numbers.txt\") as file:\n    total = sum(int(line.strip()) for line in file)\n\nprint(total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n7. Read up to the 10th character of a file and print those characters backwards.\n\n   ```python\n   with open('sample.txt') as f:\n       text = f.read(10)\n       print(text[::-1])\n   ```\n\n8. Write a file, then read its contents twice using `seek()`.\n\n::: {#bc618c3d .cell execution_count=34}\n``` {.python .cell-code}\nwith open(\"temp.txt\", \"w\") as file:\n    file.write(\"Magic Beans\\n\")\n\nwith open(\"temp.txt\") as file:\n    contents = file.read()\n    print(contents.strip())\n\n    file.seek(0)\n\n    contents = file.read()\n    print(contents.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMagic Beans\nMagic Beans\n```\n:::\n:::\n\n\nTODO: decide on a couple of file names and just use those\n\n9. Write three words to a file, each on their own line. Then, print all the lines of that file in uppercase.\n\n::: {#215c3020 .cell execution_count=35}\n``` {.python .cell-code}\nwords = [\"apple\", \"pie\", \"is\", \"good\"]\n\nwith open(\"numbers.txt\", \"w\") as file:\n    for word in words:\n        file.write(f\"{word}\\n\")\n\nwith open(\"numbers.txt\") as file:\n    for line in file:\n        print(line.strip().upper())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAPPLE\nPIE\nIS\nGOOD\n```\n:::\n:::\n\n\n10. Write some lines to a file, including some empty lines. Then, read the file back, counting the number of empty lines.\n\n::: {#09fcdb90 .cell execution_count=36}\n``` {.python .cell-code}\nwith open(\"sample.txt\", \"w\") as file:\n    for line in [\"this\", \"\", \"is\", \"a\", \"\", \"line\"]:\n        file.write(f\"{line}\\n\")\n\nwith open(\"sample.txt\") as file:\n    blank_line_count = sum(line.strip() == \"\" for line in file)\n\nprint(f\"there were {blank_line_count} empty lines!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthere were 2 empty lines!\n```\n:::\n:::\n\n\n11. Write two lists (`genes` and `counts`) into a file as `gene,count` rows.\n\n::: {#baa6bfd2 .cell execution_count=37}\n``` {.python .cell-code}\ngenes = [\"nrdA\", \"nrdJ\"]\ncounts = [10, 20]\n\nwith open(\"pairs.csv\", \"w\") as file:\n    for gene, count in zip(genes, counts):\n        file.write(f\"{gene},{count}\\n\")\n\n# Check your work!\nwith open(\"pairs.csv\") as file:\n    print(file.read().strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnrdA,10\nnrdJ,20\n```\n:::\n:::\n\n\n12. Write some lines to a file, some of which contain the word `\"gene\"`. Then, open that file and print every line that contains the word `\"gene\"`.\n\n::: {#177346a9 .cell execution_count=38}\n``` {.python .cell-code}\nwith open(\"data.txt\", \"w\") as file:\n    file.writelines(\n        [\n            \"gene therapy\\n\",\n            \"protein sequences\\n\",\n            \"gene annotation\\n\",\n            \"analyzing gene expression\\n\",\n            \"multiple sequence alignment\\n\",\n        ]\n    )\n\nwith open(\"data.txt\") as file:\n    for line in file:\n        if \"gene\" in line:\n            print(line.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngene therapy\ngene annotation\nanalyzing gene expression\n```\n:::\n:::\n\n\n13. Read the contents from one file and write it uppercased to another file. (Read the input file line-by-line.)\n\n::: {#89e53817 .cell execution_count=39}\n``` {.python .cell-code}\nwith open(\"data.txt\") as input_file, open(\"upper.txt\", \"w\") as output_file:\n    for line in input_file:\n        output_file.write(line.upper())\n\n# Check your work!\nwith open(\"upper.txt\") as file:\n    for line in file:\n        print(line.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGENE THERAPY\nPROTEIN SEQUENCES\nGENE ANNOTATION\nANALYZING GENE EXPRESSION\nMULTIPLE SEQUENCE ALIGNMENT\n```\n:::\n:::\n\n\n14. Try to open a file that doesn't exist without crashing the program.\n\n::: {#0f997b87 .cell execution_count=40}\n``` {.python .cell-code}\ntry:\n    with open('/fake/file.txt') as file:\n        _ = file.read()\nexcept OSError as error:\n    print(f\"{error=}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nerror=FileNotFoundError(2, 'No such file or directory')\n```\n:::\n:::\n\n\n15. Create a list of dictionaries like this: `{\"A\": 1, \"B\": 2, \"C\": 3}`. Then write the data as a CSV file with a header line.\n\n::: {#90285eb1 .cell execution_count=41}\n``` {.python .cell-code}\nrows = [\n    {\"A\": 1, \"B\": 4, \"C\": 7},\n    {\"A\": 2, \"B\": 5, \"C\": 8},\n    {\"A\": 3, \"B\": 6, \"C\": 9},\n]\n\nwith open(\"table.csv\", \"w\") as file:\n    file.write(\"A,B,C\\n\")\n    for row in rows:\n        values = [str(value) for value in row.values()]\n        line = \",\".join(values)\n        file.write(f\"{line}\\n\")\n\n# Check your work!\nwith open(\"table.csv\") as file:\n    for line in file:\n        print(line.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA,B,C\n1,4,7\n2,5,8\n3,6,9\n```\n:::\n:::\n\n\n16. Create a small FASTA file. Then, read the file and count how many lines in a file start with \">\".\n\n::: {#c51bd39f .cell execution_count=42}\n``` {.python .cell-code}\nwith open(\"sequences.fasta\", \"w\") as file:\n    file.write(\">seq_1\\n\")\n    file.write(\"ACTG\\n\")\n    file.write(\">seq_2\\n\")\n    file.write(\"GGCAC\\n\")\n    file.write(\">seq_3\\n\")\n    file.write(\"AAACTA\\n\")\n\n\nwith open(\"sequences.fasta\") as file:\n    record_count = sum(line.startswith(\">\") for line in file)\n\nprint(record_count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n```\n:::\n:::\n\n\n17. Copy the header lines from the FASTA file you just created into another file. Do not print the `>` in the output file.\n\n::: {#20b90ab7 .cell execution_count=43}\n``` {.python .cell-code}\nwith open(\"sequences.fasta\") as fasta_file, open(\"headers.txt\", \"w\") as output_file:\n    for line in fasta_file:\n        if line.startswith(\">\"):\n            output_line = line.strip()[1:] + \"\\n\"\n            output_file.write(output_line)\n\n# Check your work!\nwith open(\"headers.txt\") as file:\n    for line in file:\n        print(line.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nseq_1\nseq_2\nseq_3\n```\n:::\n:::\n\n\n18. Write a few lines to a file. One of the lines should be `\"exit\"`. Then, read the lines of the file you created, but stop as soon as you read the `\"exit\"` line.\n\n::: {#a5ba6e08 .cell execution_count=44}\n``` {.python .cell-code}\nwith open(\"data.txt\", \"w\") as file:\n    file.writelines(\n        [\n            \"line 1\\n\",\n            \"line 2\\n\",\n            \"exit\\n\",\n            \"line 3\\n\",\n        ]\n    )\n\nwith open(\"data.txt\") as file:\n    for line in file:\n        line = line.strip()\n        if line == \"exit\":\n            break\n\n        print(line)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nline 1\nline 2\n```\n:::\n:::\n\n\n19. Open an output file, write one line, then print the output of `file.closed`. Next, use `with` to open the file, and after the block, print the result of `file.closed` again.\n\n::: {#ef182db0 .cell execution_count=45}\n``` {.python .cell-code}\nfile = open(\"output.txt\", \"w\")\nfile.write(\"gene 1\\n\")\nprint(file.closed)\nfile.close()\n\nwith open(\"output.txt\", \"w\") as file:\n    file.write(\"gene 2\\n\")\n\nprint(file.closed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\n```\n:::\n:::\n\n\n20. Write three numbers to a binary file as bytes, then read, and print them as integers.\n\n::: {#24289baa .cell execution_count=46}\n``` {.python .cell-code}\nnumbers = [7, 8, 9]\n\nwith open(\"numbers.dat\", \"wb\") as file:\n    file.write(bytes(numbers))\n\nwith open(\"numbers.dat\", \"rb\") as file:\n    data = file.read()\n    print(type(data))\n    print(data)\n\nprint(list(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'bytes'>\nb'\\x07\\x08\\t'\n[7, 8, 9]\n```\n:::\n:::\n\n\n## Group 3 {#sec-io-files-contexts-practice-problem-solutions-group-3}\n\n1. Using biopython, write code that opens a FASTA file and (1) prints the sequence ID and length for each sequence, and (2) prints the mean sequence length. (Use the FASTA sequence you created earlier.)\n\n::: {#5e94a858 .cell execution_count=47}\n``` {.python .cell-code}\nsequence_count = 0\ntotal_length = 0\n\nfrom Bio import SeqIO\n\nfor record in SeqIO.parse(\"sequences.fasta\", \"fasta\"):\n    sequence_count += 1\n    seq_length = len(record.seq)\n    total_length += seq_length\n\n    print(record.id, seq_length, sep=\"\\t\")\n\nprint(\"\\nTotal sequences:\", sequence_count)\nprint(\"\\nMean length:\", total_length / sequence_count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nseq_1\t4\nseq_2\t5\nseq_3\t6\n\nTotal sequences: 3\n\nMean length: 5.0\n```\n:::\n:::\n\n\n2. Write the contents of a dictionary to a TSV file. Each line should be like `key\\tvalue`. Then read the file, insert any lines where the value is greater than or equal to 10 into a new dictionary.\n\n::: {#7c764876 .cell execution_count=48}\n``` {.python .cell-code}\ndata = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 10, \"e\": 20, \"f\": 30}\nwith open(\"dict.tsv\", \"w\") as file:\n    for key, value in data.items():\n        line = f\"{key}\\t{value}\\n\"\n        file.write(line)\n\nfiltered_data = {}\nwith open(\"dict.tsv\") as file:\n    for line in file:\n        key, value = line.strip().split(\"\\t\")\n        if int(value) >= 10:\n            filtered_data[key] = value\n\nprint(filtered_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'d': '10', 'e': '20', 'f': '30'}\n```\n:::\n:::\n\n\n3. Using pandas, create a data frame with the following data: `{\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]}`, and write it to a CSV without the row index. Read the resulting file using `csv.DictReader`. Print any record in which the value in field \"A\" is >= 2 and the value in field \"C\" is <= 8.\n\n::: {#284149a2 .cell execution_count=49}\n``` {.python .cell-code}\nimport csv\nimport pandas as pd\n\ndf = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\ndf.to_csv(\"df.csv\", index=False)\n\nwith open(\"df.csv\", newline=\"\") as file:\n    for record in csv.DictReader(file):\n        if int(record[\"A\"]) >= 2 and int(record[\"C\"]) <= 8:\n            print(record)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'A': '2', 'B': '5', 'C': '8'}\n```\n:::\n:::\n\n\n4. Write code that opens a FASTQ file, then prints the id and average quality score for the first 10 records.\n\n::: {#2de1f711 .cell execution_count=50}\n``` {.python .cell-code}\nfrom Bio import SeqIO\nimport numpy as np\n\n# TODO: get the data in the write location\nfor i, record in enumerate(SeqIO.parse(\"../../_data/sample_1.fastq\", \"fastq\")):\n    if i >= 10:\n        break\n\n    quality_score = np.mean(record.letter_annotations[\"phred_quality\"])\n    print(record.id, quality_score, sep=\" => \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nread_0 => 23.757142857142856\nread_1 => 24.114285714285714\nread_2 => 22.32857142857143\nread_3 => 23.357142857142858\nread_4 => 22.15714285714286\nread_5 => 25.071428571428573\nread_6 => 25.87142857142857\nread_7 => 22.185714285714287\nread_8 => 23.87142857142857\nread_9 => 24.257142857142856\n```\n:::\n:::\n\n\n5. Read a binary file and print each byte in hexadecimal. (Use the built-in [hex()](https://docs.python.org/3/library/functions.html#hex) function.)\n\n::: {#1d5b19c9 .cell execution_count=51}\n``` {.python .cell-code}\nwith open(\"data.bin\", \"wb\") as file:\n    file.write(b\"apple pie\")\n\nwith open(\"data.bin\", \"rb\") as file:\n    data = file.read()\n\nfor byte in data:\n    print(hex(byte))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0x61\n0x70\n0x70\n0x6c\n0x65\n0x20\n0x70\n0x69\n0x65\n```\n:::\n:::\n\n\n6. Try to read and print the contents of a list of files. If any file doesn't exist, skip it and print a message about the file not being found.\n\n::: {#15c45df2 .cell execution_count=52}\n``` {.python .cell-code}\nfilenames = [\"fake.txt\", \"data.txt\", \"nope.txt\"]\n\nfor filename in filenames:\n    print()\n    try:\n        with open(filename) as file:\n            print(f\"found {filename}!\")\n            print(file.read().strip())\n            print(\"DONE!\")\n    except FileNotFoundError:\n        print(f\"file '{filename}' not found\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nfile 'fake.txt' not found\n\nfound data.txt!\nline 1\nline 2\nexit\nline 3\nDONE!\n\nfile 'nope.txt' not found\n```\n:::\n:::\n\n\n7. Write the given `gene_data` to a file. Then, read the lines of the file, extracting gene names and sequences from each line using using regular expressions. Finally, print each gene name and sequence in the format \"name => sequence\".\n\n::: {#bbb4a326 .cell execution_count=53}\n``` {.python .cell-code}\nimport re\n\ngene_data = [\n    \"gene: nrdA; seq: AACCTTG\\n\",\n    \"gene: nrdJd; seq: ACACGGT\\n\",\n    \"gene: pol; seq: AAACGGTAA\\n\",\n]\n\nwith open(\"gene_data.txt\", \"w\") as file:\n    file.writelines(gene_data)\n\npattern = r\"gene: ([a-zA-Z]+); seq: ([ACTG]+)\"\n\nwith open(\"gene_data.txt\") as file:\n    for line in file:\n        matches = re.fullmatch(pattern, line.strip())\n        gene_name = matches[1]\n        sequence = matches[2]\n        print(gene_name, sequence, sep=\" => \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnrdA => AACCTTG\nnrdJd => ACACGGT\npol => AAACGGTAA\n```\n:::\n:::\n\n\n8. Create a file containing 50 random words chosen from the following list `[\"apple\", \"pie\", \"is\", \"good\"]`. Read that file and count how many times each word occurs. Print the dictionary sorted by word count. Don't forget to set the random seed for reproducibility!\n\n::: {#b10a866f .cell execution_count=54}\n``` {.python .cell-code}\nfrom collections import Counter\nimport random\n\nrandom.seed(2341)\n\nwith open(\"words.txt\", \"w\") as file:\n    for word in random.choices([\"apple\", \"pie\", \"is\", \"good\"], k=50):\n        file.write(word + \"\\n\")\n\nwith open(\"words.txt\") as f:\n    words = f.read().split()\n\ncounts = Counter(words)\n\nfor word in sorted(counts):\n    print(word, counts[word])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple 13\ngood 16\nis 12\npie 9\n```\n:::\n:::\n\n\n9. Without using the CSV module, read a CSV file. If any of the lines have a different number of fields, stop the iteration and print an error message.\n\n::: {#f31a78f0 .cell execution_count=55}\n``` {.python .cell-code}\nwith open(\"df.csv\", \"a\") as file:\n    file.write(\"1,2,3,4\\n\")\n\nwith open(\"df.csv\") as file:\n    fields = file.readline().strip().split(\",\")\n    expected_length = len(fields)\n\n    for line in file:\n        line = line.strip()\n        fields = line.split(\",\")\n\n        if len(fields) != expected_length:\n            print(\n                \"ERROR\",\n                f\"line '{line}'\",\n                f\"expected: {expected_length} fields\",\n                f\"found: {len(fields)} fields\",\n                sep=\" -- \"\n            )\n            break\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nERROR -- line '1,2,3,4' -- expected: 3 fields -- found: 4 fields\n```\n:::\n:::\n\n\n10. Given a file path, open the file either as text or binary based on its extension (`.txt` -- text mode, `.bin` -- binary mode), and print the contents. Make sure to handle file not found errors!\n\n::: {#e5982128 .cell execution_count=56}\n``` {.python .cell-code}\npath = \"file.txt\"\n\nif path.endswith(\".bin\"):\n    mode = \"rb\"\nelse:\n    mode = \"r\"\n\ntry:\n    with open(path, mode) as file:\n        print(file.read())\nexcept FileNotFoundError as error:\n    print(f\"file '{path}' not found!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfile 'file.txt' not found!\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}